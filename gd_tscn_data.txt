 
==== H:\Game Creation\testing-environ\Data\Classes\PlayerClassData.gd ==== 
# PlayerClassData.gd
# Resource to define base stats for a player class.
class_name PlayerClassData
extends Resource

# --- Core Combat Stats ---
@export var base_max_health: int = 100
@export var base_health_regeneration: float = 0.0 # HP per second
@export var base_numerical_damage: int = 10 # NEW: Player's core damage value
@export var base_global_damage_multiplier: float = 1.0 # Player's global damage multiplier (usually starts at 1.0)
# Note: base_damage_bonus (flat added at end) will be a general stat, not class-specific base.
@export var base_attack_speed_multiplier: float = 1.0 
@export var base_armor: int = 0 
@export var base_armor_penetration: float = 0.0 

# --- Movement & Utility ---
@export var base_movement_speed: float = 60.0
@export var base_magnet_range: float = 40.0 
@export var base_experience_gain_multiplier: float = 1.0

# --- Weapon Effect Modifiers ---
@export var base_aoe_area_multiplier: float = 1.0 
@export var base_projectile_size_multiplier: float = 1.0 
@export var base_projectile_speed_multiplier: float = 1.0
@export var base_effect_duration_multiplier: float = 1.0 

# --- Other Stats ---
@export var base_crit_chance: float = 0.05 
@export var base_crit_damage_multiplier: float = 1.5 
@export var base_luck: int = 0

@export_multiline var class_description: String = "Description of this class."
 
==== H:\Game Creation\testing-environ\Scenes\MeleeAimingDot.gd ==== 
# MeleeAimingDot.gd
# Attach this to the root Node2D of MeleeAimingDot.tscn
# This node will position itself on an oval around its parent (the player)
# based on the mouse direction, and also rotate to aim at the mouse.
extends Node2D

# Adjust these in the Inspector for the MeleeAimingDot node in player.tscn
@export var oval_radius_x: float = 30.0 # Horizontal radius of the oval path
@export var oval_radius_y: float = 20.0 # Vertical radius of the oval path

# Optional: Visual representation of the dot itself
@onready var dot_visual: Sprite2D = $DotVisual # Assuming a child Sprite2D named DotVisual

func _process(_delta: float):
	var parent = get_parent()
	if not is_instance_valid(parent):
		# print_debug("MeleeAimingDot: Parent is not valid.")
		return

	var parent_global_pos: Vector2 = parent.global_position
	var mouse_global_pos: Vector2 = get_global_mouse_position()

	var direction_to_mouse_from_parent = (mouse_global_pos - parent_global_pos)

	if direction_to_mouse_from_parent.length_squared() > 0.001: # Avoid issues if mouse is exactly on parent
		var angle_to_mouse = direction_to_mouse_from_parent.angle()

		# Calculate the dot's local position on the oval based on this angle
		var local_pos_on_oval = Vector2()
		local_pos_on_oval.x = oval_radius_x * cos(angle_to_mouse)
		local_pos_on_oval.y = oval_radius_y * sin(angle_to_mouse)
		
		self.position = local_pos_on_oval # Set local position relative to the parent (player)

		# Make the dot itself (or its visual) point towards the mouse.
		# The direction for the dot's rotation is from its *new global position* towards the mouse.
		var direction_from_dot_to_mouse = (mouse_global_pos - self.global_position)
		if direction_from_dot_to_mouse.length_squared() > 0.001:
			var rotation_angle = direction_from_dot_to_mouse.angle()
			if is_instance_valid(dot_visual):
				# Assuming dot_visual sprite is drawn facing RIGHT by default.
				# If it faces LEFT by default, use: rotation_angle - PI
				# If it faces UP by default, use: rotation_angle + PI / 2.0
				# If it faces DOWN by default, use: rotation_angle - PI / 2.0
				dot_visual.rotation = rotation_angle
			else:
				# If no specific visual, rotate the MeleeAimingDot node itself.
				# Assuming this node's "forward" is to the right.
				self.rotation = rotation_angle 
	# else:
		# print_debug("MeleeAimingDot: Mouse is too close to parent to determine direction.")


# This function will be called by player.gd to get the origin for melee attacks
func get_attack_origin_global_position() -> Vector2:
	return self.global_position

# This function can be called by player.gd to get the direction the dot is aiming
func get_aiming_direction() -> Vector2:
	# Returns a normalized vector representing the direction the dot is pointing.
	# This assumes the node (or its dot_visual) is rotated such that its local positive X-axis points towards the target.
	if is_instance_valid(dot_visual):
		return Vector2.RIGHT.rotated(dot_visual.global_rotation)
	else:
		return Vector2.RIGHT.rotated(self.global_rotation)
 
==== H:\Game Creation\testing-environ\Scenes\BaseEnemy.tscn ==== 
[gd_scene load_steps=7 format=3 uid="uid://dxa4b1piqkc7i"]

[ext_resource type="Script" uid="uid://d3jpya6xyhtsw" path="res://Scripts/BaseEnemy.gd" id="1_qu00n"]
[ext_resource type="Script" uid="uid://beexf6tvvofb5" path="res://Scripts/StatusEffects/StatusEffectComponent.gd" id="2_6epgf"]

[sub_resource type="SpriteFrames" id="SpriteFrames_qu00n"]
animations = [{
"frames": [],
"loop": true,
"name": &"idle",
"speed": 5.0
}, {
"frames": [],
"loop": true,
"name": &"walk",
"speed": 5.0
}]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_qu00n"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_6epgf"]
bg_color = Color(0.855745, 0.0366383, 0.247622, 1)

[sub_resource type="CircleShape2D" id="CircleShape2D_qu00n"]
radius = 23.0769

[node name="BaseEnemy" type="CharacterBody2D" groups=["enemies"]]
collision_layer = 8
collision_mask = 136
script = ExtResource("1_qu00n")

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
sprite_frames = SubResource("SpriteFrames_qu00n")
animation = &"idle"

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]

[node name="DamageArea" type="Area2D" parent="."]
collision_layer = 32
collision_mask = 2

[node name="CollisionShape2D" type="CollisionShape2D" parent="DamageArea"]

[node name="ContactDamageTimer" type="Timer" parent="."]
one_shot = true

[node name="HealthBar" type="ProgressBar" parent="."]
visible = false
offset_left = -36.0
offset_top = -40.0
offset_right = 37.0
offset_bottom = -23.0
theme_override_styles/background = SubResource("StyleBoxFlat_qu00n")
theme_override_styles/fill = SubResource("StyleBoxFlat_6epgf")
show_percentage = false

[node name="SeparationDetector" type="Area2D" parent="."]
collision_layer = 0
collision_mask = 8

[node name="CollisionShape2D" type="CollisionShape2D" parent="SeparationDetector"]
position = Vector2(1.04904e-05, 0)
shape = SubResource("CircleShape2D_qu00n")

[node name="SlowEffectTimer" type="Timer" parent="."]
one_shot = true

[node name="KnockbackRecoveryTimer" type="Timer" parent="."]
one_shot = true

[node name="StatusEffectComponent" type="Node" parent="."]
script = ExtResource("2_6epgf")

[connection signal="timeout" from="SlowEffectTimer" to="." method="_on_slow_effect_timer_timeout"]
 
==== H:\Game Creation\testing-environ\Scenes\enemy_slime_green.tscn ==== 
[gd_scene load_steps=14 format=3 uid="uid://ogopd76rmwey"]

[ext_resource type="Script" uid="uid://bdukvx62op55g" path="res://Scripts/enemy_slime_green.gd" id="1_me57i"]
[ext_resource type="Texture2D" uid="uid://b3o4twrxd3yi6" path="res://Assets/Green Slime Enemy Sheet 1 alpha layer.png" id="1_vs6ub"]
[ext_resource type="Script" uid="uid://beexf6tvvofb5" path="res://Scripts/StatusEffects/StatusEffectComponent.gd" id="3_syyvh"]

[sub_resource type="AtlasTexture" id="AtlasTexture_5ook2"]
atlas = ExtResource("1_vs6ub")
region = Rect2(1767, 642, 140, 156)

[sub_resource type="AtlasTexture" id="AtlasTexture_1bb7e"]
atlas = ExtResource("1_vs6ub")
region = Rect2(1607, 642, 147, 156)

[sub_resource type="AtlasTexture" id="AtlasTexture_me57i"]
atlas = ExtResource("1_vs6ub")
region = Rect2(1284, 652, 152, 154)

[sub_resource type="AtlasTexture" id="AtlasTexture_syyvh"]
atlas = ExtResource("1_vs6ub")
region = Rect2(1445, 642, 150, 156)

[sub_resource type="SpriteFrames" id="SpriteFrames_gn4o1"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_5ook2")
}],
"loop": false,
"name": &"attack",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_1bb7e")
}],
"loop": false,
"name": &"idle",
"speed": 8.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_me57i")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_syyvh")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_5ook2")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_1bb7e")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_syyvh")
}],
"loop": true,
"name": &"walk",
"speed": 8.0
}]

[sub_resource type="CircleShape2D" id="CircleShape2D_f37s5"]
radius = 109.432

[sub_resource type="CircleShape2D" id="CircleShape2D_me57i"]
radius = 54.9614

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_syyvh"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_5ook2"]
bg_color = Color(0.855745, 0.0366383, 0.247622, 1)

[sub_resource type="CircleShape2D" id="CircleShape2D_syyvh"]
radius = 10.5409

[node name="enemy_slime_green" type="CharacterBody2D" groups=["enemies"]]
scale = Vector2(0.3, 0.3)
collision_layer = 8
collision_mask = 128
script = ExtResource("1_me57i")
max_health = 22

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
scale = Vector2(0.3, 0.3)
sprite_frames = SubResource("SpriteFrames_gn4o1")
animation = &"attack"
autoplay = "walk"

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(-1.19209e-07, 0)
scale = Vector2(0.3, 0.3)
shape = SubResource("CircleShape2D_f37s5")

[node name="DamageArea" type="Area2D" parent="."]
scale = Vector2(0.3, 0.3)
collision_layer = 32
collision_mask = 2

[node name="CollisionShape2D" type="CollisionShape2D" parent="DamageArea"]
position = Vector2(1, 0)
shape = SubResource("CircleShape2D_me57i")

[node name="ContactDamageTimer" type="Timer" parent="."]
one_shot = true

[node name="HealthBar" type="ProgressBar" parent="."]
visible = false
offset_left = -36.0
offset_top = -40.0
offset_right = 37.0
offset_bottom = -23.0
theme_override_styles/background = SubResource("StyleBoxFlat_syyvh")
theme_override_styles/fill = SubResource("StyleBoxFlat_5ook2")
show_percentage = false
metadata/_edit_use_anchors_ = true

[node name="SeparationDetector" type="Area2D" parent="."]
collision_layer = 0
collision_mask = 8

[node name="CollisionShape2D" type="CollisionShape2D" parent="SeparationDetector"]
position = Vector2(1.04904e-05, 0)
shape = SubResource("CircleShape2D_syyvh")

[node name="SlowEffectTimer" type="Timer" parent="."]
one_shot = true

[node name="KnockbackRecoveryTimer" type="Timer" parent="."]
one_shot = true

[node name="StatusEffectComponent" type="Node" parent="."]
script = ExtResource("3_syyvh")
 
==== H:\Game Creation\testing-environ\Scenes\game.tscn ==== 
[gd_scene load_steps=10 format=3 uid="uid://byb4yoall461x"]

[ext_resource type="PackedScene" uid="uid://bvachsijc2aea" path="res://Scenes/player.tscn" id="1_ebmjs"]
[ext_resource type="Script" uid="uid://nokyxxlylqxb" path="res://Scripts/game.gd" id="1_wrm1d"]
[ext_resource type="PackedScene" uid="uid://ckiis257s4py4" path="res://Scenes/tilemap.tscn" id="2_qxrlw"]
[ext_resource type="Texture2D" uid="uid://bho4t4mp3ai47" path="res://Assets/world_tileset.png" id="3_i6g32"]
[ext_resource type="Texture2D" uid="uid://h5g3y1gbg8kj" path="res://Assets/roguelikeSheet_transparent.png" id="4_1l0tm"]
[ext_resource type="PackedScene" uid="uid://bb1rig3rge632" path="res://Scenes/GameUI.tscn" id="4_3dryh"]

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_v158k"]
texture = ExtResource("3_i6g32")
0:0/0 = 0
1:0/0 = 0
2:0/0 = 0
3:0/0 = 0
4:0/0 = 0
5:0/0 = 0
6:0/0 = 0
7:0/0 = 0
8:0/0 = 0
9:0/0 = 0
10:0/0 = 0
11:0/0 = 0
0:1/0 = 0
1:1/0 = 0
2:1/0 = 0
3:1/0 = 0
4:1/0 = 0
5:1/0 = 0
6:1/0 = 0
7:1/0 = 0
8:1/0 = 0
9:1/0 = 0
10:1/0 = 0
11:1/0 = 0
0:2/0 = 0
1:2/0 = 0
2:2/0 = 0
3:2/0 = 0
4:2/0 = 0
5:2/0 = 0
6:2/0 = 0
7:2/0 = 0
8:2/0 = 0
9:2/0 = 0
10:2/0 = 0
11:2/0 = 0
0:3/0 = 0
1:3/0 = 0
2:3/0 = 0
5:3/0 = 0
6:3/0 = 0
7:3/0 = 0
8:3/0 = 0
9:3/0 = 0
0:4/0 = 0
1:4/0 = 0
2:4/0 = 0
3:4/0 = 0
4:4/0 = 0
5:4/0 = 0
6:4/0 = 0
7:4/0 = 0
8:4/0 = 0
9:4/0 = 0
0:5/0 = 0
1:5/0 = 0
2:5/0 = 0
3:5/0 = 0
4:5/0 = 0
5:5/0 = 0
6:5/0 = 0
7:5/0 = 0
8:5/0 = 0
1:6/0 = 0
2:6/0 = 0
3:6/0 = 0
4:6/0 = 0
5:6/0 = 0
6:6/0 = 0
7:6/0 = 0
8:6/0 = 0
0:7/0 = 0
1:7/0 = 0
3:7/0 = 0
5:7/0 = 0
6:7/0 = 0
7:7/0 = 0
8:7/0 = 0
0:8/0 = 0
1:8/0 = 0
2:8/0 = 0
3:8/0 = 0
4:8/0 = 0
5:8/0 = 0
6:8/0 = 0
7:8/0 = 0
8:8/0 = 0
0:9/0 = 0
1:9/0 = 0
2:9/0 = 0
3:9/0 = 0
4:9/0 = 0
5:9/0 = 0
6:9/0 = 0
7:9/0 = 0
0:10/0 = 0
1:10/0 = 0
2:10/0 = 0
3:10/0 = 0
4:10/0 = 0
6:10/0 = 0
0:11/0 = 0
1:11/0 = 0
2:11/0 = 0
3:11/0 = 0
4:11/0 = 0
5:11/0 = 0
0:12/0 = 0
1:12/0 = 0
2:12/0 = 0
3:12/0 = 0
4:12/0 = 0
0:13/0 = 0
1:13/0 = 0
2:13/0 = 0
3:13/0 = 0
4:13/0 = 0
5:13/0 = 0
0:14/0 = 0
1:14/0 = 0
2:14/0 = 0
3:14/0 = 0
4:14/0 = 0
0:15/0 = 0
1:15/0 = 0
2:15/0 = 0
3:15/0 = 0

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_h4fw4"]
texture = ExtResource("4_1l0tm")
separation = Vector2i(1, 1)
0:0/0 = 0
1:0/0 = 0
2:0/0 = 0
3:0/0 = 0
4:0/0 = 0
5:0/0 = 0
6:0/0 = 0
7:0/0 = 0
8:0/0 = 0
9:0/0 = 0
10:0/0 = 0
11:0/0 = 0
12:0/0 = 0
13:0/0 = 0
14:0/0 = 0
15:0/0 = 0
16:0/0 = 0
17:0/0 = 0
18:0/0 = 0
19:0/0 = 0
20:0/0 = 0
21:0/0 = 0
22:0/0 = 0
23:0/0 = 0
24:0/0 = 0
25:0/0 = 0
26:0/0 = 0
27:0/0 = 0
28:0/0 = 0
29:0/0 = 0
30:0/0 = 0
31:0/0 = 0
32:0/0 = 0
33:0/0 = 0
34:0/0 = 0
35:0/0 = 0
36:0/0 = 0
37:0/0 = 0
38:0/0 = 0
39:0/0 = 0
40:0/0 = 0
41:0/0 = 0
42:0/0 = 0
43:0/0 = 0
44:0/0 = 0
45:0/0 = 0
46:0/0 = 0
47:0/0 = 0
48:0/0 = 0
49:0/0 = 0
50:0/0 = 0
51:0/0 = 0
52:0/0 = 0
53:0/0 = 0
54:0/0 = 0
55:0/0 = 0
56:0/0 = 0
0:1/0 = 0
1:1/0 = 0
2:1/0 = 0
3:1/0 = 0
4:1/0 = 0
5:1/0 = 0
6:1/0 = 0
7:1/0 = 0
8:1/0 = 0
9:1/0 = 0
10:1/0 = 0
11:1/0 = 0
12:1/0 = 0
13:1/0 = 0
14:1/0 = 0
15:1/0 = 0
16:1/0 = 0
17:1/0 = 0
18:1/0 = 0
19:1/0 = 0
20:1/0 = 0
21:1/0 = 0
22:1/0 = 0
23:1/0 = 0
24:1/0 = 0
25:1/0 = 0
26:1/0 = 0
27:1/0 = 0
28:1/0 = 0
29:1/0 = 0
30:1/0 = 0
31:1/0 = 0
32:1/0 = 0
33:1/0 = 0
34:1/0 = 0
35:1/0 = 0
36:1/0 = 0
37:1/0 = 0
38:1/0 = 0
39:1/0 = 0
40:1/0 = 0
41:1/0 = 0
42:1/0 = 0
43:1/0 = 0
44:1/0 = 0
45:1/0 = 0
46:1/0 = 0
47:1/0 = 0
48:1/0 = 0
49:1/0 = 0
50:1/0 = 0
51:1/0 = 0
52:1/0 = 0
53:1/0 = 0
54:1/0 = 0
55:1/0 = 0
56:1/0 = 0
0:2/0 = 0
1:2/0 = 0
2:2/0 = 0
3:2/0 = 0
4:2/0 = 0
5:2/0 = 0
6:2/0 = 0
7:2/0 = 0
8:2/0 = 0
9:2/0 = 0
10:2/0 = 0
11:2/0 = 0
12:2/0 = 0
13:2/0 = 0
14:2/0 = 0
15:2/0 = 0
16:2/0 = 0
17:2/0 = 0
18:2/0 = 0
19:2/0 = 0
20:2/0 = 0
21:2/0 = 0
22:2/0 = 0
23:2/0 = 0
24:2/0 = 0
25:2/0 = 0
26:2/0 = 0
27:2/0 = 0
28:2/0 = 0
29:2/0 = 0
30:2/0 = 0
31:2/0 = 0
32:2/0 = 0
33:2/0 = 0
34:2/0 = 0
35:2/0 = 0
36:2/0 = 0
37:2/0 = 0
38:2/0 = 0
39:2/0 = 0
40:2/0 = 0
41:2/0 = 0
42:2/0 = 0
43:2/0 = 0
44:2/0 = 0
45:2/0 = 0
46:2/0 = 0
47:2/0 = 0
48:2/0 = 0
49:2/0 = 0
50:2/0 = 0
51:2/0 = 0
52:2/0 = 0
53:2/0 = 0
54:2/0 = 0
55:2/0 = 0
56:2/0 = 0
0:3/0 = 0
1:3/0 = 0
2:3/0 = 0
3:3/0 = 0
4:3/0 = 0
5:3/0 = 0
6:3/0 = 0
7:3/0 = 0
8:3/0 = 0
9:3/0 = 0
10:3/0 = 0
11:3/0 = 0
12:3/0 = 0
13:3/0 = 0
14:3/0 = 0
15:3/0 = 0
16:3/0 = 0
17:3/0 = 0
18:3/0 = 0
19:3/0 = 0
20:3/0 = 0
21:3/0 = 0
22:3/0 = 0
23:3/0 = 0
24:3/0 = 0
25:3/0 = 0
26:3/0 = 0
27:3/0 = 0
28:3/0 = 0
29:3/0 = 0
30:3/0 = 0
31:3/0 = 0
32:3/0 = 0
33:3/0 = 0
34:3/0 = 0
35:3/0 = 0
36:3/0 = 0
37:3/0 = 0
38:3/0 = 0
39:3/0 = 0
40:3/0 = 0
41:3/0 = 0
42:3/0 = 0
43:3/0 = 0
44:3/0 = 0
45:3/0 = 0
46:3/0 = 0
47:3/0 = 0
48:3/0 = 0
49:3/0 = 0
50:3/0 = 0
51:3/0 = 0
52:3/0 = 0
53:3/0 = 0
54:3/0 = 0
55:3/0 = 0
56:3/0 = 0
0:4/0 = 0
1:4/0 = 0
2:4/0 = 0
3:4/0 = 0
4:4/0 = 0
5:4/0 = 0
6:4/0 = 0
7:4/0 = 0
8:4/0 = 0
9:4/0 = 0
10:4/0 = 0
11:4/0 = 0
12:4/0 = 0
13:4/0 = 0
14:4/0 = 0
15:4/0 = 0
16:4/0 = 0
17:4/0 = 0
18:4/0 = 0
19:4/0 = 0
20:4/0 = 0
21:4/0 = 0
22:4/0 = 0
23:4/0 = 0
24:4/0 = 0
25:4/0 = 0
26:4/0 = 0
27:4/0 = 0
28:4/0 = 0
29:4/0 = 0
30:4/0 = 0
31:4/0 = 0
32:4/0 = 0
33:4/0 = 0
34:4/0 = 0
35:4/0 = 0
36:4/0 = 0
37:4/0 = 0
38:4/0 = 0
39:4/0 = 0
40:4/0 = 0
41:4/0 = 0
42:4/0 = 0
43:4/0 = 0
44:4/0 = 0
45:4/0 = 0
46:4/0 = 0
47:4/0 = 0
48:4/0 = 0
49:4/0 = 0
50:4/0 = 0
51:4/0 = 0
52:4/0 = 0
53:4/0 = 0
54:4/0 = 0
55:4/0 = 0
56:4/0 = 0
0:5/0 = 0
1:5/0 = 0
2:5/0 = 0
3:5/0 = 0
4:5/0 = 0
5:5/0 = 0
6:5/0 = 0
7:5/0 = 0
8:5/0 = 0
9:5/0 = 0
10:5/0 = 0
11:5/0 = 0
12:5/0 = 0
13:5/0 = 0
14:5/0 = 0
15:5/0 = 0
16:5/0 = 0
17:5/0 = 0
18:5/0 = 0
19:5/0 = 0
20:5/0 = 0
21:5/0 = 0
22:5/0 = 0
23:5/0 = 0
24:5/0 = 0
25:5/0 = 0
26:5/0 = 0
27:5/0 = 0
28:5/0 = 0
29:5/0 = 0
30:5/0 = 0
31:5/0 = 0
32:5/0 = 0
33:5/0 = 0
34:5/0 = 0
35:5/0 = 0
36:5/0 = 0
37:5/0 = 0
38:5/0 = 0
39:5/0 = 0
40:5/0 = 0
41:5/0 = 0
42:5/0 = 0
43:5/0 = 0
44:5/0 = 0
45:5/0 = 0
46:5/0 = 0
47:5/0 = 0
48:5/0 = 0
49:5/0 = 0
50:5/0 = 0
51:5/0 = 0
52:5/0 = 0
53:5/0 = 0
54:5/0 = 0
55:5/0 = 0
56:5/0 = 0
0:6/0 = 0
1:6/0 = 0
2:6/0 = 0
3:6/0 = 0
4:6/0 = 0
5:6/0 = 0
6:6/0 = 0
7:6/0 = 0
8:6/0 = 0
9:6/0 = 0
10:6/0 = 0
11:6/0 = 0
12:6/0 = 0
13:6/0 = 0
14:6/0 = 0
15:6/0 = 0
16:6/0 = 0
17:6/0 = 0
18:6/0 = 0
19:6/0 = 0
20:6/0 = 0
21:6/0 = 0
22:6/0 = 0
23:6/0 = 0
24:6/0 = 0
25:6/0 = 0
26:6/0 = 0
27:6/0 = 0
28:6/0 = 0
29:6/0 = 0
30:6/0 = 0
31:6/0 = 0
32:6/0 = 0
33:6/0 = 0
34:6/0 = 0
35:6/0 = 0
36:6/0 = 0
37:6/0 = 0
38:6/0 = 0
39:6/0 = 0
40:6/0 = 0
41:6/0 = 0
42:6/0 = 0
43:6/0 = 0
44:6/0 = 0
45:6/0 = 0
46:6/0 = 0
47:6/0 = 0
48:6/0 = 0
49:6/0 = 0
50:6/0 = 0
51:6/0 = 0
52:6/0 = 0
53:6/0 = 0
54:6/0 = 0
55:6/0 = 0
56:6/0 = 0
0:7/0 = 0
1:7/0 = 0
2:7/0 = 0
3:7/0 = 0
4:7/0 = 0
5:7/0 = 0
6:7/0 = 0
7:7/0 = 0
8:7/0 = 0
9:7/0 = 0
10:7/0 = 0
11:7/0 = 0
12:7/0 = 0
13:7/0 = 0
14:7/0 = 0
15:7/0 = 0
16:7/0 = 0
17:7/0 = 0
18:7/0 = 0
19:7/0 = 0
20:7/0 = 0
21:7/0 = 0
22:7/0 = 0
23:7/0 = 0
24:7/0 = 0
25:7/0 = 0
26:7/0 = 0
27:7/0 = 0
28:7/0 = 0
29:7/0 = 0
30:7/0 = 0
31:7/0 = 0
32:7/0 = 0
33:7/0 = 0
34:7/0 = 0
35:7/0 = 0
36:7/0 = 0
37:7/0 = 0
38:7/0 = 0
39:7/0 = 0
40:7/0 = 0
41:7/0 = 0
42:7/0 = 0
43:7/0 = 0
44:7/0 = 0
45:7/0 = 0
46:7/0 = 0
47:7/0 = 0
48:7/0 = 0
49:7/0 = 0
50:7/0 = 0
51:7/0 = 0
52:7/0 = 0
53:7/0 = 0
54:7/0 = 0
55:7/0 = 0
56:7/0 = 0
0:8/0 = 0
1:8/0 = 0
2:8/0 = 0
3:8/0 = 0
4:8/0 = 0
5:8/0 = 0
6:8/0 = 0
7:8/0 = 0
8:8/0 = 0
9:8/0 = 0
10:8/0 = 0
11:8/0 = 0
12:8/0 = 0
13:8/0 = 0
14:8/0 = 0
15:8/0 = 0
16:8/0 = 0
17:8/0 = 0
18:8/0 = 0
19:8/0 = 0
20:8/0 = 0
21:8/0 = 0
22:8/0 = 0
23:8/0 = 0
24:8/0 = 0
25:8/0 = 0
26:8/0 = 0
27:8/0 = 0
28:8/0 = 0
30:8/0 = 0
31:8/0 = 0
32:8/0 = 0
33:8/0 = 0
34:8/0 = 0
35:8/0 = 0
36:8/0 = 0
37:8/0 = 0
38:8/0 = 0
39:8/0 = 0
40:8/0 = 0
41:8/0 = 0
42:8/0 = 0
43:8/0 = 0
44:8/0 = 0
45:8/0 = 0
46:8/0 = 0
47:8/0 = 0
48:8/0 = 0
49:8/0 = 0
50:8/0 = 0
51:8/0 = 0
52:8/0 = 0
53:8/0 = 0
54:8/0 = 0
55:8/0 = 0
56:8/0 = 0
0:9/0 = 0
1:9/0 = 0
2:9/0 = 0
3:9/0 = 0
4:9/0 = 0
5:9/0 = 0
6:9/0 = 0
7:9/0 = 0
8:9/0 = 0
9:9/0 = 0
10:9/0 = 0
11:9/0 = 0
12:9/0 = 0
13:9/0 = 0
14:9/0 = 0
15:9/0 = 0
16:9/0 = 0
17:9/0 = 0
18:9/0 = 0
19:9/0 = 0
20:9/0 = 0
21:9/0 = 0
22:9/0 = 0
23:9/0 = 0
24:9/0 = 0
25:9/0 = 0
26:9/0 = 0
27:9/0 = 0
28:9/0 = 0
29:9/0 = 0
30:9/0 = 0
31:9/0 = 0
32:9/0 = 0
33:9/0 = 0
34:9/0 = 0
35:9/0 = 0
36:9/0 = 0
37:9/0 = 0
39:9/0 = 0
40:9/0 = 0
41:9/0 = 0
42:9/0 = 0
43:9/0 = 0
44:9/0 = 0
45:9/0 = 0
46:9/0 = 0
47:9/0 = 0
48:9/0 = 0
49:9/0 = 0
50:9/0 = 0
51:9/0 = 0
52:9/0 = 0
53:9/0 = 0
54:9/0 = 0
55:9/0 = 0
56:9/0 = 0
0:10/0 = 0
1:10/0 = 0
2:10/0 = 0
3:10/0 = 0
4:10/0 = 0
5:10/0 = 0
6:10/0 = 0
7:10/0 = 0
8:10/0 = 0
9:10/0 = 0
10:10/0 = 0
11:10/0 = 0
12:10/0 = 0
13:10/0 = 0
14:10/0 = 0
15:10/0 = 0
16:10/0 = 0
17:10/0 = 0
18:10/0 = 0
19:10/0 = 0
20:10/0 = 0
21:10/0 = 0
22:10/0 = 0
23:10/0 = 0
24:10/0 = 0
25:10/0 = 0
26:10/0 = 0
27:10/0 = 0
28:10/0 = 0
29:10/0 = 0
30:10/0 = 0
31:10/0 = 0
32:10/0 = 0
33:10/0 = 0
34:10/0 = 0
35:10/0 = 0
36:10/0 = 0
37:10/0 = 0
38:10/0 = 0
39:10/0 = 0
40:10/0 = 0
41:10/0 = 0
42:10/0 = 0
43:10/0 = 0
44:10/0 = 0
45:10/0 = 0
46:10/0 = 0
47:10/0 = 0
48:10/0 = 0
49:10/0 = 0
50:10/0 = 0
51:10/0 = 0
52:10/0 = 0
53:10/0 = 0
54:10/0 = 0
55:10/0 = 0
56:10/0 = 0
0:11/0 = 0
1:11/0 = 0
2:11/0 = 0
3:11/0 = 0
4:11/0 = 0
5:11/0 = 0
6:11/0 = 0
7:11/0 = 0
8:11/0 = 0
9:11/0 = 0
10:11/0 = 0
11:11/0 = 0
12:11/0 = 0
13:11/0 = 0
14:11/0 = 0
15:11/0 = 0
16:11/0 = 0
17:11/0 = 0
18:11/0 = 0
19:11/0 = 0
20:11/0 = 0
21:11/0 = 0
22:11/0 = 0
23:11/0 = 0
24:11/0 = 0
25:11/0 = 0
26:11/0 = 0
27:11/0 = 0
28:11/0 = 0
29:11/0 = 0
30:11/0 = 0
31:11/0 = 0
32:11/0 = 0
33:11/0 = 0
34:11/0 = 0
35:11/0 = 0
36:11/0 = 0
37:11/0 = 0
38:11/0 = 0
39:11/0 = 0
40:11/0 = 0
41:11/0 = 0
42:11/0 = 0
43:11/0 = 0
44:11/0 = 0
45:11/0 = 0
46:11/0 = 0
47:11/0 = 0
48:11/0 = 0
49:11/0 = 0
50:11/0 = 0
51:11/0 = 0
52:11/0 = 0
53:11/0 = 0
54:11/0 = 0
55:11/0 = 0
56:11/0 = 0
0:12/0 = 0
1:12/0 = 0
2:12/0 = 0
3:12/0 = 0
4:12/0 = 0
5:12/0 = 0
6:12/0 = 0
7:12/0 = 0
8:12/0 = 0
9:12/0 = 0
10:12/0 = 0
11:12/0 = 0
12:12/0 = 0
13:12/0 = 0
14:12/0 = 0
15:12/0 = 0
16:12/0 = 0
17:12/0 = 0
18:12/0 = 0
19:12/0 = 0
20:12/0 = 0
21:12/0 = 0
22:12/0 = 0
23:12/0 = 0
24:12/0 = 0
25:12/0 = 0
26:12/0 = 0
27:12/0 = 0
28:12/0 = 0
29:12/0 = 0
30:12/0 = 0
31:12/0 = 0
32:12/0 = 0
33:12/0 = 0
34:12/0 = 0
35:12/0 = 0
36:12/0 = 0
37:12/0 = 0
38:12/0 = 0
39:12/0 = 0
40:12/0 = 0
41:12/0 = 0
42:12/0 = 0
43:12/0 = 0
44:12/0 = 0
45:12/0 = 0
46:12/0 = 0
47:12/0 = 0
48:12/0 = 0
49:12/0 = 0
50:12/0 = 0
51:12/0 = 0
52:12/0 = 0
53:12/0 = 0
54:12/0 = 0
55:12/0 = 0
56:12/0 = 0
0:13/0 = 0
1:13/0 = 0
2:13/0 = 0
3:13/0 = 0
4:13/0 = 0
5:13/0 = 0
6:13/0 = 0
7:13/0 = 0
8:13/0 = 0
9:13/0 = 0
10:13/0 = 0
11:13/0 = 0
12:13/0 = 0
13:13/0 = 0
14:13/0 = 0
15:13/0 = 0
16:13/0 = 0
17:13/0 = 0
18:13/0 = 0
19:13/0 = 0
20:13/0 = 0
21:13/0 = 0
22:13/0 = 0
23:13/0 = 0
24:13/0 = 0
25:13/0 = 0
26:13/0 = 0
27:13/0 = 0
28:13/0 = 0
29:13/0 = 0
30:13/0 = 0
31:13/0 = 0
32:13/0 = 0
33:13/0 = 0
34:13/0 = 0
35:13/0 = 0
36:13/0 = 0
37:13/0 = 0
38:13/0 = 0
39:13/0 = 0
40:13/0 = 0
41:13/0 = 0
42:13/0 = 0
43:13/0 = 0
44:13/0 = 0
45:13/0 = 0
46:13/0 = 0
47:13/0 = 0
48:13/0 = 0
49:13/0 = 0
50:13/0 = 0
51:13/0 = 0
52:13/0 = 0
53:13/0 = 0
54:13/0 = 0
55:13/0 = 0
56:13/0 = 0
0:14/0 = 0
1:14/0 = 0
2:14/0 = 0
3:14/0 = 0
4:14/0 = 0
5:14/0 = 0
6:14/0 = 0
7:14/0 = 0
8:14/0 = 0
9:14/0 = 0
10:14/0 = 0
11:14/0 = 0
12:14/0 = 0
13:14/0 = 0
14:14/0 = 0
15:14/0 = 0
16:14/0 = 0
17:14/0 = 0
18:14/0 = 0
19:14/0 = 0
20:14/0 = 0
21:14/0 = 0
22:14/0 = 0
23:14/0 = 0
24:14/0 = 0
25:14/0 = 0
26:14/0 = 0
27:14/0 = 0
28:14/0 = 0
29:14/0 = 0
30:14/0 = 0
31:14/0 = 0
32:14/0 = 0
33:14/0 = 0
34:14/0 = 0
35:14/0 = 0
36:14/0 = 0
37:14/0 = 0
38:14/0 = 0
39:14/0 = 0
40:14/0 = 0
41:14/0 = 0
42:14/0 = 0
43:14/0 = 0
44:14/0 = 0
45:14/0 = 0
46:14/0 = 0
47:14/0 = 0
48:14/0 = 0
49:14/0 = 0
50:14/0 = 0
51:14/0 = 0
52:14/0 = 0
53:14/0 = 0
54:14/0 = 0
55:14/0 = 0
56:14/0 = 0
0:15/0 = 0
1:15/0 = 0
2:15/0 = 0
3:15/0 = 0
4:15/0 = 0
5:15/0 = 0
6:15/0 = 0
7:15/0 = 0
8:15/0 = 0
9:15/0 = 0
10:15/0 = 0
11:15/0 = 0
12:15/0 = 0
13:15/0 = 0
14:15/0 = 0
15:15/0 = 0
16:15/0 = 0
17:15/0 = 0
18:15/0 = 0
19:15/0 = 0
20:15/0 = 0
21:15/0 = 0
22:15/0 = 0
23:15/0 = 0
24:15/0 = 0
25:15/0 = 0
26:15/0 = 0
27:15/0 = 0
28:15/0 = 0
29:15/0 = 0
30:15/0 = 0
31:15/0 = 0
32:15/0 = 0
33:15/0 = 0
34:15/0 = 0
35:15/0 = 0
36:15/0 = 0
37:15/0 = 0
38:15/0 = 0
39:15/0 = 0
40:15/0 = 0
41:15/0 = 0
42:15/0 = 0
43:15/0 = 0
44:15/0 = 0
45:15/0 = 0
46:15/0 = 0
47:15/0 = 0
48:15/0 = 0
49:15/0 = 0
50:15/0 = 0
51:15/0 = 0
52:15/0 = 0
53:15/0 = 0
54:15/0 = 0
55:15/0 = 0
56:15/0 = 0
0:16/0 = 0
1:16/0 = 0
2:16/0 = 0
3:16/0 = 0
4:16/0 = 0
5:16/0 = 0
6:16/0 = 0
7:16/0 = 0
8:16/0 = 0
9:16/0 = 0
10:16/0 = 0
11:16/0 = 0
12:16/0 = 0
13:16/0 = 0
14:16/0 = 0
15:16/0 = 0
16:16/0 = 0
17:16/0 = 0
18:16/0 = 0
19:16/0 = 0
20:16/0 = 0
21:16/0 = 0
22:16/0 = 0
23:16/0 = 0
24:16/0 = 0
25:16/0 = 0
26:16/0 = 0
27:16/0 = 0
28:16/0 = 0
29:16/0 = 0
30:16/0 = 0
31:16/0 = 0
32:16/0 = 0
33:16/0 = 0
34:16/0 = 0
35:16/0 = 0
36:16/0 = 0
37:16/0 = 0
38:16/0 = 0
39:16/0 = 0
40:16/0 = 0
41:16/0 = 0
42:16/0 = 0
43:16/0 = 0
44:16/0 = 0
45:16/0 = 0
46:16/0 = 0
47:16/0 = 0
48:16/0 = 0
49:16/0 = 0
50:16/0 = 0
51:16/0 = 0
52:16/0 = 0
53:16/0 = 0
54:16/0 = 0
55:16/0 = 0
56:16/0 = 0
0:17/0 = 0
1:17/0 = 0
2:17/0 = 0
3:17/0 = 0
4:17/0 = 0
5:17/0 = 0
6:17/0 = 0
7:17/0 = 0
8:17/0 = 0
9:17/0 = 0
10:17/0 = 0
11:17/0 = 0
12:17/0 = 0
13:17/0 = 0
14:17/0 = 0
15:17/0 = 0
16:17/0 = 0
17:17/0 = 0
18:17/0 = 0
19:17/0 = 0
20:17/0 = 0
21:17/0 = 0
22:17/0 = 0
23:17/0 = 0
24:17/0 = 0
25:17/0 = 0
26:17/0 = 0
27:17/0 = 0
28:17/0 = 0
29:17/0 = 0
30:17/0 = 0
31:17/0 = 0
32:17/0 = 0
33:17/0 = 0
34:17/0 = 0
35:17/0 = 0
36:17/0 = 0
37:17/0 = 0
38:17/0 = 0
39:17/0 = 0
40:17/0 = 0
41:17/0 = 0
42:17/0 = 0
43:17/0 = 0
44:17/0 = 0
45:17/0 = 0
46:17/0 = 0
47:17/0 = 0
48:17/0 = 0
49:17/0 = 0
50:17/0 = 0
51:17/0 = 0
52:17/0 = 0
53:17/0 = 0
54:17/0 = 0
55:17/0 = 0
56:17/0 = 0
2:18/0 = 0
3:18/0 = 0
4:18/0 = 0
5:18/0 = 0
6:18/0 = 0
7:18/0 = 0
8:18/0 = 0
9:18/0 = 0
10:18/0 = 0
11:18/0 = 0
12:18/0 = 0
13:18/0 = 0
14:18/0 = 0
15:18/0 = 0
16:18/0 = 0
17:18/0 = 0
18:18/0 = 0
19:18/0 = 0
20:18/0 = 0
21:18/0 = 0
22:18/0 = 0
23:18/0 = 0
24:18/0 = 0
25:18/0 = 0
26:18/0 = 0
27:18/0 = 0
28:18/0 = 0
29:18/0 = 0
30:18/0 = 0
31:18/0 = 0
32:18/0 = 0
33:18/0 = 0
34:18/0 = 0
35:18/0 = 0
36:18/0 = 0
37:18/0 = 0
38:18/0 = 0
39:18/0 = 0
40:18/0 = 0
41:18/0 = 0
42:18/0 = 0
43:18/0 = 0
44:18/0 = 0
45:18/0 = 0
46:18/0 = 0
47:18/0 = 0
48:18/0 = 0
49:18/0 = 0
50:18/0 = 0
51:18/0 = 0
52:18/0 = 0
53:18/0 = 0
54:18/0 = 0
55:18/0 = 0
56:18/0 = 0
0:19/0 = 0
1:19/0 = 0
2:19/0 = 0
3:19/0 = 0
4:19/0 = 0
5:19/0 = 0
6:19/0 = 0
7:19/0 = 0
8:19/0 = 0
9:19/0 = 0
10:19/0 = 0
11:19/0 = 0
12:19/0 = 0
13:19/0 = 0
14:19/0 = 0
15:19/0 = 0
16:19/0 = 0
17:19/0 = 0
18:19/0 = 0
19:19/0 = 0
20:19/0 = 0
21:19/0 = 0
22:19/0 = 0
23:19/0 = 0
24:19/0 = 0
25:19/0 = 0
26:19/0 = 0
27:19/0 = 0
28:19/0 = 0
29:19/0 = 0
30:19/0 = 0
31:19/0 = 0
32:19/0 = 0
33:19/0 = 0
34:19/0 = 0
35:19/0 = 0
36:19/0 = 0
37:19/0 = 0
38:19/0 = 0
39:19/0 = 0
40:19/0 = 0
41:19/0 = 0
42:19/0 = 0
43:19/0 = 0
44:19/0 = 0
45:19/0 = 0
46:19/0 = 0
47:19/0 = 0
48:19/0 = 0
49:19/0 = 0
50:19/0 = 0
51:19/0 = 0
52:19/0 = 0
53:19/0 = 0
54:19/0 = 0
55:19/0 = 0
56:19/0 = 0
0:20/0 = 0
1:20/0 = 0
2:20/0 = 0
3:20/0 = 0
4:20/0 = 0
5:20/0 = 0
6:20/0 = 0
7:20/0 = 0
8:20/0 = 0
9:20/0 = 0
10:20/0 = 0
11:20/0 = 0
12:20/0 = 0
13:20/0 = 0
14:20/0 = 0
15:20/0 = 0
16:20/0 = 0
17:20/0 = 0
18:20/0 = 0
19:20/0 = 0
20:20/0 = 0
21:20/0 = 0
22:20/0 = 0
23:20/0 = 0
24:20/0 = 0
25:20/0 = 0
26:20/0 = 0
27:20/0 = 0
28:20/0 = 0
29:20/0 = 0
30:20/0 = 0
31:20/0 = 0
32:20/0 = 0
33:20/0 = 0
34:20/0 = 0
35:20/0 = 0
36:20/0 = 0
37:20/0 = 0
38:20/0 = 0
39:20/0 = 0
40:20/0 = 0
41:20/0 = 0
42:20/0 = 0
43:20/0 = 0
44:20/0 = 0
45:20/0 = 0
46:20/0 = 0
47:20/0 = 0
48:20/0 = 0
49:20/0 = 0
50:20/0 = 0
51:20/0 = 0
52:20/0 = 0
53:20/0 = 0
54:20/0 = 0
55:20/0 = 0
56:20/0 = 0
0:21/0 = 0
1:21/0 = 0
2:21/0 = 0
3:21/0 = 0
4:21/0 = 0
5:21/0 = 0
6:21/0 = 0
7:21/0 = 0
8:21/0 = 0
9:21/0 = 0
10:21/0 = 0
11:21/0 = 0
12:21/0 = 0
13:21/0 = 0
14:21/0 = 0
15:21/0 = 0
16:21/0 = 0
17:21/0 = 0
18:21/0 = 0
19:21/0 = 0
20:21/0 = 0
21:21/0 = 0
22:21/0 = 0
23:21/0 = 0
24:21/0 = 0
25:21/0 = 0
26:21/0 = 0
27:21/0 = 0
28:21/0 = 0
29:21/0 = 0
30:21/0 = 0
31:21/0 = 0
32:21/0 = 0
33:21/0 = 0
34:21/0 = 0
35:21/0 = 0
36:21/0 = 0
37:21/0 = 0
38:21/0 = 0
39:21/0 = 0
40:21/0 = 0
41:21/0 = 0
42:21/0 = 0
43:21/0 = 0
44:21/0 = 0
45:21/0 = 0
46:21/0 = 0
47:21/0 = 0
48:21/0 = 0
49:21/0 = 0
50:21/0 = 0
51:21/0 = 0
52:21/0 = 0
53:21/0 = 0
54:21/0 = 0
55:21/0 = 0
56:21/0 = 0
0:22/0 = 0
1:22/0 = 0
2:22/0 = 0
3:22/0 = 0
4:22/0 = 0
5:22/0 = 0
6:22/0 = 0
7:22/0 = 0
8:22/0 = 0
9:22/0 = 0
10:22/0 = 0
11:22/0 = 0
12:22/0 = 0
13:22/0 = 0
14:22/0 = 0
15:22/0 = 0
16:22/0 = 0
17:22/0 = 0
18:22/0 = 0
19:22/0 = 0
20:22/0 = 0
21:22/0 = 0
22:22/0 = 0
23:22/0 = 0
24:22/0 = 0
25:22/0 = 0
26:22/0 = 0
27:22/0 = 0
28:22/0 = 0
29:22/0 = 0
30:22/0 = 0
31:22/0 = 0
32:22/0 = 0
33:22/0 = 0
34:22/0 = 0
35:22/0 = 0
36:22/0 = 0
37:22/0 = 0
38:22/0 = 0
39:22/0 = 0
40:22/0 = 0
41:22/0 = 0
42:22/0 = 0
43:22/0 = 0
44:22/0 = 0
45:22/0 = 0
46:22/0 = 0
47:22/0 = 0
48:22/0 = 0
49:22/0 = 0
50:22/0 = 0
51:22/0 = 0
52:22/0 = 0
53:22/0 = 0
54:22/0 = 0
55:22/0 = 0
56:22/0 = 0
0:23/0 = 0
1:23/0 = 0
2:23/0 = 0
3:23/0 = 0
4:23/0 = 0
5:23/0 = 0
6:23/0 = 0
7:23/0 = 0
8:23/0 = 0
9:23/0 = 0
10:23/0 = 0
11:23/0 = 0
12:23/0 = 0
13:23/0 = 0
14:23/0 = 0
15:23/0 = 0
16:23/0 = 0
17:23/0 = 0
18:23/0 = 0
19:23/0 = 0
20:23/0 = 0
21:23/0 = 0
22:23/0 = 0
23:23/0 = 0
24:23/0 = 0
25:23/0 = 0
26:23/0 = 0
27:23/0 = 0
28:23/0 = 0
29:23/0 = 0
30:23/0 = 0
31:23/0 = 0
32:23/0 = 0
33:23/0 = 0
34:23/0 = 0
35:23/0 = 0
36:23/0 = 0
37:23/0 = 0
38:23/0 = 0
39:23/0 = 0
40:23/0 = 0
41:23/0 = 0
42:23/0 = 0
43:23/0 = 0
44:23/0 = 0
45:23/0 = 0
46:23/0 = 0
47:23/0 = 0
48:23/0 = 0
49:23/0 = 0
50:23/0 = 0
51:23/0 = 0
52:23/0 = 0
53:23/0 = 0
54:23/0 = 0
55:23/0 = 0
56:23/0 = 0
0:24/0 = 0
1:24/0 = 0
2:24/0 = 0
3:24/0 = 0
4:24/0 = 0
5:24/0 = 0
6:24/0 = 0
7:24/0 = 0
8:24/0 = 0
9:24/0 = 0
10:24/0 = 0
11:24/0 = 0
12:24/0 = 0
13:24/0 = 0
14:24/0 = 0
15:24/0 = 0
16:24/0 = 0
17:24/0 = 0
18:24/0 = 0
19:24/0 = 0
20:24/0 = 0
21:24/0 = 0
22:24/0 = 0
23:24/0 = 0
24:24/0 = 0
25:24/0 = 0
26:24/0 = 0
27:24/0 = 0
28:24/0 = 0
29:24/0 = 0
30:24/0 = 0
31:24/0 = 0
32:24/0 = 0
33:24/0 = 0
34:24/0 = 0
35:24/0 = 0
36:24/0 = 0
37:24/0 = 0
38:24/0 = 0
39:24/0 = 0
40:24/0 = 0
41:24/0 = 0
42:24/0 = 0
43:24/0 = 0
44:24/0 = 0
45:24/0 = 0
46:24/0 = 0
47:24/0 = 0
48:24/0 = 0
49:24/0 = 0
50:24/0 = 0
51:24/0 = 0
52:24/0 = 0
53:24/0 = 0
54:24/0 = 0
55:24/0 = 0
56:24/0 = 0
2:25/0 = 0
3:25/0 = 0
4:25/0 = 0
5:25/0 = 0
6:25/0 = 0
7:25/0 = 0
8:25/0 = 0
9:25/0 = 0
10:25/0 = 0
11:25/0 = 0
12:25/0 = 0
13:25/0 = 0
14:25/0 = 0
15:25/0 = 0
16:25/0 = 0
17:25/0 = 0
18:25/0 = 0
19:25/0 = 0
20:25/0 = 0
21:25/0 = 0
22:25/0 = 0
23:25/0 = 0
24:25/0 = 0
25:25/0 = 0
26:25/0 = 0
27:25/0 = 0
28:25/0 = 0
29:25/0 = 0
30:25/0 = 0
31:25/0 = 0
32:25/0 = 0
33:25/0 = 0
34:25/0 = 0
35:25/0 = 0
36:25/0 = 0
37:25/0 = 0
38:25/0 = 0
39:25/0 = 0
40:25/0 = 0
41:25/0 = 0
42:25/0 = 0
43:25/0 = 0
44:25/0 = 0
45:25/0 = 0
46:25/0 = 0
47:25/0 = 0
48:25/0 = 0
49:25/0 = 0
50:25/0 = 0
51:25/0 = 0
52:25/0 = 0
53:25/0 = 0
54:25/0 = 0
55:25/0 = 0
56:25/0 = 0
0:26/0 = 0
1:26/0 = 0
2:26/0 = 0
3:26/0 = 0
4:26/0 = 0
5:26/0 = 0
6:26/0 = 0
7:26/0 = 0
8:26/0 = 0
9:26/0 = 0
10:26/0 = 0
11:26/0 = 0
12:26/0 = 0
13:26/0 = 0
14:26/0 = 0
15:26/0 = 0
16:26/0 = 0
17:26/0 = 0
18:26/0 = 0
19:26/0 = 0
20:26/0 = 0
21:26/0 = 0
22:26/0 = 0
23:26/0 = 0
24:26/0 = 0
25:26/0 = 0
26:26/0 = 0
27:26/0 = 0
28:26/0 = 0
29:26/0 = 0
30:26/0 = 0
31:26/0 = 0
32:26/0 = 0
33:26/0 = 0
34:26/0 = 0
35:26/0 = 0
36:26/0 = 0
37:26/0 = 0
38:26/0 = 0
39:26/0 = 0
40:26/0 = 0
41:26/0 = 0
42:26/0 = 0
43:26/0 = 0
44:26/0 = 0
45:26/0 = 0
46:26/0 = 0
47:26/0 = 0
48:26/0 = 0
49:26/0 = 0
50:26/0 = 0
51:26/0 = 0
52:26/0 = 0
53:26/0 = 0
54:26/0 = 0
55:26/0 = 0
56:26/0 = 0
0:27/0 = 0
1:27/0 = 0
2:27/0 = 0
3:27/0 = 0
4:27/0 = 0
5:27/0 = 0
6:27/0 = 0
7:27/0 = 0
8:27/0 = 0
9:27/0 = 0
10:27/0 = 0
11:27/0 = 0
12:27/0 = 0
13:27/0 = 0
14:27/0 = 0
15:27/0 = 0
16:27/0 = 0
17:27/0 = 0
18:27/0 = 0
19:27/0 = 0
20:27/0 = 0
21:27/0 = 0
22:27/0 = 0
23:27/0 = 0
24:27/0 = 0
25:27/0 = 0
26:27/0 = 0
27:27/0 = 0
28:27/0 = 0
29:27/0 = 0
30:27/0 = 0
31:27/0 = 0
32:27/0 = 0
33:27/0 = 0
34:27/0 = 0
35:27/0 = 0
36:27/0 = 0
37:27/0 = 0
38:27/0 = 0
39:27/0 = 0
40:27/0 = 0
41:27/0 = 0
42:27/0 = 0
43:27/0 = 0
44:27/0 = 0
45:27/0 = 0
46:27/0 = 0
47:27/0 = 0
48:27/0 = 0
49:27/0 = 0
50:27/0 = 0
51:27/0 = 0
52:27/0 = 0
53:27/0 = 0
54:27/0 = 0
55:27/0 = 0
56:27/0 = 0
0:28/0 = 0
1:28/0 = 0
2:28/0 = 0
3:28/0 = 0
4:28/0 = 0
5:28/0 = 0
6:28/0 = 0
7:28/0 = 0
8:28/0 = 0
9:28/0 = 0
10:28/0 = 0
11:28/0 = 0
12:28/0 = 0
13:28/0 = 0
14:28/0 = 0
15:28/0 = 0
16:28/0 = 0
17:28/0 = 0
18:28/0 = 0
19:28/0 = 0
20:28/0 = 0
21:28/0 = 0
22:28/0 = 0
23:28/0 = 0
24:28/0 = 0
25:28/0 = 0
26:28/0 = 0
27:28/0 = 0
28:28/0 = 0
29:28/0 = 0
30:28/0 = 0
31:28/0 = 0
32:28/0 = 0
33:28/0 = 0
34:28/0 = 0
35:28/0 = 0
36:28/0 = 0
37:28/0 = 0
38:28/0 = 0
39:28/0 = 0
40:28/0 = 0
41:28/0 = 0
42:28/0 = 0
43:28/0 = 0
44:28/0 = 0
45:28/0 = 0
46:28/0 = 0
47:28/0 = 0
48:28/0 = 0
49:28/0 = 0
50:28/0 = 0
51:28/0 = 0
52:28/0 = 0
53:28/0 = 0
54:28/0 = 0
55:28/0 = 0
56:28/0 = 0
0:29/0 = 0
1:29/0 = 0
2:29/0 = 0
3:29/0 = 0
4:29/0 = 0
5:29/0 = 0
6:29/0 = 0
7:29/0 = 0
8:29/0 = 0
9:29/0 = 0
10:29/0 = 0
11:29/0 = 0
12:29/0 = 0
13:29/0 = 0
14:29/0 = 0
15:29/0 = 0
16:29/0 = 0
17:29/0 = 0
18:29/0 = 0
19:29/0 = 0
20:29/0 = 0
21:29/0 = 0
22:29/0 = 0
23:29/0 = 0
24:29/0 = 0
25:29/0 = 0
26:29/0 = 0
27:29/0 = 0
28:29/0 = 0
29:29/0 = 0
30:29/0 = 0
31:29/0 = 0
32:29/0 = 0
33:29/0 = 0
34:29/0 = 0
35:29/0 = 0
36:29/0 = 0
37:29/0 = 0
38:29/0 = 0
39:29/0 = 0
40:29/0 = 0
41:29/0 = 0
42:29/0 = 0
43:29/0 = 0
44:29/0 = 0
45:29/0 = 0
46:29/0 = 0
47:29/0 = 0
48:29/0 = 0
49:29/0 = 0
50:29/0 = 0
51:29/0 = 0
52:29/0 = 0
53:29/0 = 0
54:29/0 = 0
55:29/0 = 0
56:29/0 = 0
0:30/0 = 0
1:30/0 = 0
2:30/0 = 0
3:30/0 = 0
4:30/0 = 0
5:30/0 = 0
6:30/0 = 0
7:30/0 = 0
8:30/0 = 0
9:30/0 = 0
10:30/0 = 0
11:30/0 = 0
12:30/0 = 0
13:30/0 = 0
14:30/0 = 0
15:30/0 = 0
16:30/0 = 0
17:30/0 = 0
18:30/0 = 0
19:30/0 = 0
20:30/0 = 0
21:30/0 = 0
22:30/0 = 0
23:30/0 = 0
24:30/0 = 0
25:30/0 = 0
26:30/0 = 0
27:30/0 = 0
28:30/0 = 0
29:30/0 = 0
30:30/0 = 0
31:30/0 = 0
32:30/0 = 0
33:30/0 = 0
34:30/0 = 0
35:30/0 = 0
36:30/0 = 0
37:30/0 = 0
38:30/0 = 0
39:30/0 = 0
40:30/0 = 0
41:30/0 = 0
42:30/0 = 0
43:30/0 = 0
44:30/0 = 0
45:30/0 = 0
46:30/0 = 0
47:30/0 = 0
48:30/0 = 0
49:30/0 = 0
50:30/0 = 0
51:30/0 = 0
52:30/0 = 0
53:30/0 = 0
54:30/0 = 0
55:30/0 = 0
56:30/0 = 0
1:18/0 = 0
0:18/0 = 0
38:9/0 = 0
29:8/0 = 0
1:25/0 = 0
0:25/0 = 0

[sub_resource type="TileSet" id="TileSet_ldgsr"]
sources/0 = SubResource("TileSetAtlasSource_v158k")
sources/1 = SubResource("TileSetAtlasSource_h4fw4")

[node name="Game" type="Node2D"]
script = ExtResource("1_wrm1d")

[node name="TileMapLayer" parent="." instance=ExtResource("2_qxrlw")]
position = Vector2(1, 0)
tile_set = SubResource("TileSet_ldgsr")

[node name="Player" parent="." instance=ExtResource("1_ebmjs")]
position = Vector2(14, -8)

[node name="AttacksContainer" type="Node2D" parent="."]
z_index = 5

[node name="EnemiesContainer" type="Node2D" parent="."]

[node name="DropsContainer" type="Node2D" parent="."]
z_index = 5

[node name="BossContainer" type="Node2D" parent="."]
position = Vector2(0, -1)

[node name="EnemySpawnTimer" type="Timer" parent="."]
wait_time = 2.0
autostart = true

[node name="GameUI" parent="." instance=ExtResource("4_3dryh")]
 
==== H:\Game Creation\testing-environ\Scenes\GameUI.tscn ==== 
[gd_scene load_steps=6 format=3 uid="uid://bb1rig3rge632"]

[ext_resource type="Script" uid="uid://cd3iuxf8rv2a8" path="res://Scripts/GameUI.gd" id="1_tyage"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_xi5v6"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_gek4i"]
bg_color = Color(0, 0.917647, 0.34902, 1)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_tyage"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_37hul"]
bg_color = Color(0, 0.629619, 0.980279, 1)

[node name="GameUI" type="Control"]
layout_mode = 3
anchors_preset = 0
offset_right = 40.0
offset_bottom = 40.0
script = ExtResource("1_tyage")

[node name="HUDLayer" type="CanvasLayer" parent="."]

[node name="PlayerHealthBar" type="ProgressBar" parent="HUDLayer"]
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -35.0
offset_top = -44.0
offset_right = 25.0
offset_bottom = -34.0
grow_horizontal = 2
grow_vertical = 2
theme_override_styles/background = SubResource("StyleBoxFlat_xi5v6")
theme_override_styles/fill = SubResource("StyleBoxFlat_gek4i")
show_percentage = false

[node name="GameplayTimerLabel" type="Label" parent="HUDLayer"]
anchors_preset = 5
anchor_left = 0.5
anchor_right = 0.5
offset_left = -36.0
offset_right = 28.0
offset_bottom = 23.0
grow_horizontal = 2
text = "00:00:00"

[node name="OneSecondTickTimer" type="Timer" parent="HUDLayer"]
autostart = true

[node name="TempExpBar" type="ProgressBar" parent="HUDLayer"]
visible = false
offset_left = 538.0
offset_top = 291.0
offset_right = 618.0
offset_bottom = 299.0
theme_override_styles/background = SubResource("StyleBoxFlat_tyage")
theme_override_styles/fill = SubResource("StyleBoxFlat_37hul")
show_percentage = false

[node name="TempExpBarVisibilityTimer" type="Timer" parent="HUDLayer"]
one_shot = true

[node name="DDSLabel" type="Label" parent="HUDLayer"]
offset_left = 540.0
offset_top = 26.0
offset_right = 590.0
offset_bottom = 49.0
text = "DDS: 0"

[node name="CulledEnemiesLabel" type="Label" parent="HUDLayer"]
offset_left = 673.0
offset_top = 2.0
offset_right = 740.0
offset_bottom = 25.0
text = "Culled: 0"

[node name="ThreatPoolLabel" type="Label" parent="HUDLayer"]
offset_left = 673.0
offset_top = 24.0
offset_right = 742.0
offset_bottom = 47.0
text = "Threat: 0"
 
==== H:\Game Creation\testing-environ\Scenes\player.tscn ==== 
[gd_scene load_steps=13 format=3 uid="uid://bvachsijc2aea"]

[ext_resource type="Script" uid="uid://dtfipf543e47p" path="res://Scripts/player.gd" id="1_cvnsp"]
[ext_resource type="Texture2D" uid="uid://4gwemat1ky05" path="res://Assets/Characters/Warrior Class Animation 2.png" id="2_cvnsp"]
[ext_resource type="PackedScene" uid="uid://b61cokdldirn3" path="res://Scenes/Player/MeleeAimingDot.tscn" id="3_6t5aa"]
[ext_resource type="PackedScene" uid="uid://cjnf0osd35xn1" path="res://Scenes/Player/Components/WeaponManager.tscn" id="4_vgqql"]
[ext_resource type="Script" uid="uid://cpmacn0v2x1kd" path="res://Scripts/PlayerStats.gd" id="5_fkybt"]
[ext_resource type="Script" uid="uid://beexf6tvvofb5" path="res://Scripts/StatusEffects/StatusEffectComponent.gd" id="6_x3wgy"]

[sub_resource type="AtlasTexture" id="AtlasTexture_cvnsp"]
atlas = ExtResource("2_cvnsp")
region = Rect2(170, 0, 170, 256)

[sub_resource type="AtlasTexture" id="AtlasTexture_6t5aa"]
atlas = ExtResource("2_cvnsp")
region = Rect2(0, 0, 170, 256)

[sub_resource type="AtlasTexture" id="AtlasTexture_vgqql"]
atlas = ExtResource("2_cvnsp")
region = Rect2(170, 0, 170, 256)

[sub_resource type="SpriteFrames" id="SpriteFrames_x3wgy"]
resource_name = "warrior_frames"
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_cvnsp")
}],
"loop": true,
"name": &"idle",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_6t5aa")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_vgqql")
}],
"loop": true,
"name": &"walk",
"speed": 8.0
}]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_v0iea"]
size = Vector2(3.64585, 7.54717)

[sub_resource type="CircleShape2D" id="CircleShape2D_cvnsp"]
radius = 5.09902

[node name="Player" type="CharacterBody2D" groups=["player_char_group"]]
z_index = 6
collision_layer = 3
collision_mask = 17
script = ExtResource("1_cvnsp")
sprite_flip_x_compensation = -40.0

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
scale = Vector2(0.14, 0.154)
sprite_frames = SubResource("SpriteFrames_x3wgy")
animation = &"walk"
autoplay = "walk"

[node name="Camera2D" type="Camera2D" parent="AnimatedSprite2D"]
zoom = Vector2(2, 2)

[node name="UIAnchor" type="Marker2D" parent="AnimatedSprite2D"]

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(-3, 1)
scale = Vector2(1.91999, 2.12)
shape = SubResource("RectangleShape2D_v0iea")

[node name="ScytheAttackTimer" type="Timer" parent="."]
wait_time = 3.0
autostart = true

[node name="ExperienceCollectorArea" type="Area2D" parent="."]
collision_layer = 0
collision_mask = 64

[node name="CollisionShape2D" type="CollisionShape2D" parent="ExperienceCollectorArea"]
position = Vector2(-3, 0)
shape = SubResource("CircleShape2D_cvnsp")

[node name="MeleeAimingDot" parent="." instance=ExtResource("3_6t5aa")]
oval_radius_x = 25.0
oval_radius_y = 35.0

[node name="WeaponManager" parent="." instance=ExtResource("4_vgqql")]

[node name="PlayerStats" type="Node" parent="."]
script = ExtResource("5_fkybt")

[node name="StatusEffectComponent" type="Node" parent="."]
script = ExtResource("6_x3wgy")
 
==== H:\Game Creation\testing-environ\Scenes\tilemap.tscn ==== 
[gd_scene load_steps=6 format=4 uid="uid://ckiis257s4py4"]

[ext_resource type="Texture2D" uid="uid://bho4t4mp3ai47" path="res://Assets/world_tileset.png" id="1_wwf40"]
[ext_resource type="Texture2D" uid="uid://h5g3y1gbg8kj" path="res://Assets/roguelikeSheet_transparent.png" id="2_j6h4s"]

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_c185m"]
texture = ExtResource("1_wwf40")
0:0/0 = 0
1:0/0 = 0
2:0/0 = 0
3:0/0 = 0
4:0/0 = 0
5:0/0 = 0
6:0/0 = 0
7:0/0 = 0
8:0/0 = 0
9:0/0 = 0
10:0/0 = 0
11:0/0 = 0
0:1/0 = 0
1:1/0 = 0
2:1/0 = 0
3:1/0 = 0
4:1/0 = 0
5:1/0 = 0
6:1/0 = 0
7:1/0 = 0
8:1/0 = 0
9:1/0 = 0
10:1/0 = 0
11:1/0 = 0
0:2/0 = 0
1:2/0 = 0
2:2/0 = 0
3:2/0 = 0
4:2/0 = 0
5:2/0 = 0
6:2/0 = 0
7:2/0 = 0
8:2/0 = 0
9:2/0 = 0
10:2/0 = 0
11:2/0 = 0
0:3/0 = 0
1:3/0 = 0
2:3/0 = 0
5:3/0 = 0
6:3/0 = 0
7:3/0 = 0
8:3/0 = 0
9:3/0 = 0
0:4/0 = 0
1:4/0 = 0
2:4/0 = 0
3:4/0 = 0
4:4/0 = 0
5:4/0 = 0
6:4/0 = 0
7:4/0 = 0
8:4/0 = 0
9:4/0 = 0
0:5/0 = 0
1:5/0 = 0
2:5/0 = 0
3:5/0 = 0
4:5/0 = 0
5:5/0 = 0
6:5/0 = 0
7:5/0 = 0
8:5/0 = 0
1:6/0 = 0
2:6/0 = 0
3:6/0 = 0
4:6/0 = 0
5:6/0 = 0
6:6/0 = 0
7:6/0 = 0
8:6/0 = 0
0:7/0 = 0
1:7/0 = 0
3:7/0 = 0
5:7/0 = 0
6:7/0 = 0
7:7/0 = 0
8:7/0 = 0
0:8/0 = 0
1:8/0 = 0
2:8/0 = 0
3:8/0 = 0
4:8/0 = 0
5:8/0 = 0
6:8/0 = 0
7:8/0 = 0
8:8/0 = 0
0:9/0 = 0
1:9/0 = 0
2:9/0 = 0
3:9/0 = 0
4:9/0 = 0
5:9/0 = 0
6:9/0 = 0
7:9/0 = 0
0:10/0 = 0
1:10/0 = 0
2:10/0 = 0
3:10/0 = 0
4:10/0 = 0
6:10/0 = 0
0:11/0 = 0
1:11/0 = 0
2:11/0 = 0
3:11/0 = 0
4:11/0 = 0
5:11/0 = 0
0:12/0 = 0
1:12/0 = 0
2:12/0 = 0
3:12/0 = 0
4:12/0 = 0
0:13/0 = 0
1:13/0 = 0
2:13/0 = 0
3:13/0 = 0
4:13/0 = 0
5:13/0 = 0
0:14/0 = 0
1:14/0 = 0
2:14/0 = 0
3:14/0 = 0
4:14/0 = 0
0:15/0 = 0
1:15/0 = 0
2:15/0 = 0
3:15/0 = 0

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_2465o"]
texture = ExtResource("2_j6h4s")
separation = Vector2i(1, 1)
use_texture_padding = false
0:0/0 = 0
1:0/0 = 0
2:0/0 = 0
3:0/0 = 0
4:0/0 = 0
5:0/0 = 0
6:0/0 = 0
7:0/0 = 0
8:0/0 = 0
9:0/0 = 0
10:0/0 = 0
11:0/0 = 0
12:0/0 = 0
13:0/0 = 0
14:0/0 = 0
15:0/0 = 0
16:0/0 = 0
17:0/0 = 0
18:0/0 = 0
19:0/0 = 0
20:0/0 = 0
21:0/0 = 0
22:0/0 = 0
23:0/0 = 0
24:0/0 = 0
25:0/0 = 0
26:0/0 = 0
27:0/0 = 0
28:0/0 = 0
29:0/0 = 0
30:0/0 = 0
31:0/0 = 0
32:0/0 = 0
33:0/0 = 0
34:0/0 = 0
35:0/0 = 0
36:0/0 = 0
37:0/0 = 0
38:0/0 = 0
39:0/0 = 0
40:0/0 = 0
41:0/0 = 0
42:0/0 = 0
43:0/0 = 0
44:0/0 = 0
45:0/0 = 0
46:0/0 = 0
47:0/0 = 0
48:0/0 = 0
49:0/0 = 0
50:0/0 = 0
51:0/0 = 0
52:0/0 = 0
53:0/0 = 0
54:0/0 = 0
55:0/0 = 0
56:0/0 = 0
0:1/0 = 0
1:1/0 = 0
2:1/0 = 0
3:1/0 = 0
4:1/0 = 0
5:1/0 = 0
6:1/0 = 0
7:1/0 = 0
8:1/0 = 0
9:1/0 = 0
10:1/0 = 0
11:1/0 = 0
12:1/0 = 0
13:1/0 = 0
14:1/0 = 0
15:1/0 = 0
16:1/0 = 0
17:1/0 = 0
18:1/0 = 0
19:1/0 = 0
20:1/0 = 0
21:1/0 = 0
22:1/0 = 0
23:1/0 = 0
24:1/0 = 0
25:1/0 = 0
26:1/0 = 0
27:1/0 = 0
28:1/0 = 0
29:1/0 = 0
30:1/0 = 0
31:1/0 = 0
32:1/0 = 0
33:1/0 = 0
34:1/0 = 0
35:1/0 = 0
36:1/0 = 0
37:1/0 = 0
38:1/0 = 0
39:1/0 = 0
40:1/0 = 0
41:1/0 = 0
42:1/0 = 0
43:1/0 = 0
44:1/0 = 0
45:1/0 = 0
46:1/0 = 0
47:1/0 = 0
48:1/0 = 0
49:1/0 = 0
50:1/0 = 0
51:1/0 = 0
52:1/0 = 0
53:1/0 = 0
54:1/0 = 0
55:1/0 = 0
56:1/0 = 0
0:2/0 = 0
1:2/0 = 0
2:2/0 = 0
3:2/0 = 0
4:2/0 = 0
5:2/0 = 0
6:2/0 = 0
7:2/0 = 0
8:2/0 = 0
9:2/0 = 0
10:2/0 = 0
11:2/0 = 0
12:2/0 = 0
13:2/0 = 0
14:2/0 = 0
15:2/0 = 0
16:2/0 = 0
17:2/0 = 0
18:2/0 = 0
19:2/0 = 0
20:2/0 = 0
21:2/0 = 0
22:2/0 = 0
23:2/0 = 0
24:2/0 = 0
25:2/0 = 0
26:2/0 = 0
27:2/0 = 0
28:2/0 = 0
29:2/0 = 0
30:2/0 = 0
31:2/0 = 0
32:2/0 = 0
33:2/0 = 0
34:2/0 = 0
35:2/0 = 0
36:2/0 = 0
37:2/0 = 0
38:2/0 = 0
39:2/0 = 0
40:2/0 = 0
41:2/0 = 0
42:2/0 = 0
43:2/0 = 0
44:2/0 = 0
45:2/0 = 0
46:2/0 = 0
47:2/0 = 0
48:2/0 = 0
49:2/0 = 0
50:2/0 = 0
51:2/0 = 0
52:2/0 = 0
53:2/0 = 0
54:2/0 = 0
55:2/0 = 0
56:2/0 = 0
0:3/0 = 0
1:3/0 = 0
2:3/0 = 0
3:3/0 = 0
4:3/0 = 0
5:3/0 = 0
6:3/0 = 0
7:3/0 = 0
8:3/0 = 0
9:3/0 = 0
10:3/0 = 0
11:3/0 = 0
12:3/0 = 0
13:3/0 = 0
14:3/0 = 0
15:3/0 = 0
16:3/0 = 0
17:3/0 = 0
18:3/0 = 0
19:3/0 = 0
20:3/0 = 0
21:3/0 = 0
22:3/0 = 0
23:3/0 = 0
24:3/0 = 0
25:3/0 = 0
26:3/0 = 0
27:3/0 = 0
28:3/0 = 0
29:3/0 = 0
30:3/0 = 0
31:3/0 = 0
32:3/0 = 0
33:3/0 = 0
34:3/0 = 0
35:3/0 = 0
36:3/0 = 0
37:3/0 = 0
38:3/0 = 0
39:3/0 = 0
40:3/0 = 0
41:3/0 = 0
42:3/0 = 0
43:3/0 = 0
44:3/0 = 0
45:3/0 = 0
46:3/0 = 0
47:3/0 = 0
48:3/0 = 0
49:3/0 = 0
50:3/0 = 0
51:3/0 = 0
52:3/0 = 0
53:3/0 = 0
54:3/0 = 0
55:3/0 = 0
56:3/0 = 0
0:4/0 = 0
1:4/0 = 0
2:4/0 = 0
3:4/0 = 0
4:4/0 = 0
5:4/0 = 0
6:4/0 = 0
7:4/0 = 0
8:4/0 = 0
9:4/0 = 0
10:4/0 = 0
11:4/0 = 0
12:4/0 = 0
13:4/0 = 0
14:4/0 = 0
15:4/0 = 0
16:4/0 = 0
17:4/0 = 0
18:4/0 = 0
19:4/0 = 0
20:4/0 = 0
21:4/0 = 0
22:4/0 = 0
23:4/0 = 0
24:4/0 = 0
25:4/0 = 0
26:4/0 = 0
27:4/0 = 0
28:4/0 = 0
29:4/0 = 0
30:4/0 = 0
31:4/0 = 0
32:4/0 = 0
33:4/0 = 0
34:4/0 = 0
35:4/0 = 0
36:4/0 = 0
37:4/0 = 0
38:4/0 = 0
39:4/0 = 0
40:4/0 = 0
41:4/0 = 0
42:4/0 = 0
43:4/0 = 0
44:4/0 = 0
45:4/0 = 0
46:4/0 = 0
47:4/0 = 0
48:4/0 = 0
49:4/0 = 0
50:4/0 = 0
51:4/0 = 0
52:4/0 = 0
53:4/0 = 0
54:4/0 = 0
55:4/0 = 0
56:4/0 = 0
0:5/0 = 0
1:5/0 = 0
2:5/0 = 0
3:5/0 = 0
4:5/0 = 0
5:5/0 = 0
6:5/0 = 0
7:5/0 = 0
8:5/0 = 0
9:5/0 = 0
10:5/0 = 0
11:5/0 = 0
12:5/0 = 0
13:5/0 = 0
14:5/0 = 0
15:5/0 = 0
16:5/0 = 0
17:5/0 = 0
18:5/0 = 0
19:5/0 = 0
20:5/0 = 0
21:5/0 = 0
22:5/0 = 0
23:5/0 = 0
24:5/0 = 0
25:5/0 = 0
26:5/0 = 0
27:5/0 = 0
28:5/0 = 0
29:5/0 = 0
30:5/0 = 0
31:5/0 = 0
32:5/0 = 0
33:5/0 = 0
34:5/0 = 0
35:5/0 = 0
36:5/0 = 0
37:5/0 = 0
38:5/0 = 0
39:5/0 = 0
40:5/0 = 0
41:5/0 = 0
42:5/0 = 0
43:5/0 = 0
44:5/0 = 0
45:5/0 = 0
46:5/0 = 0
47:5/0 = 0
48:5/0 = 0
49:5/0 = 0
50:5/0 = 0
51:5/0 = 0
52:5/0 = 0
53:5/0 = 0
54:5/0 = 0
55:5/0 = 0
56:5/0 = 0
0:6/0 = 0
1:6/0 = 0
2:6/0 = 0
3:6/0 = 0
4:6/0 = 0
5:6/0 = 0
6:6/0 = 0
7:6/0 = 0
8:6/0 = 0
9:6/0 = 0
10:6/0 = 0
11:6/0 = 0
12:6/0 = 0
13:6/0 = 0
14:6/0 = 0
15:6/0 = 0
16:6/0 = 0
17:6/0 = 0
18:6/0 = 0
19:6/0 = 0
20:6/0 = 0
21:6/0 = 0
22:6/0 = 0
23:6/0 = 0
24:6/0 = 0
25:6/0 = 0
26:6/0 = 0
27:6/0 = 0
28:6/0 = 0
29:6/0 = 0
30:6/0 = 0
31:6/0 = 0
32:6/0 = 0
33:6/0 = 0
34:6/0 = 0
35:6/0 = 0
36:6/0 = 0
37:6/0 = 0
38:6/0 = 0
39:6/0 = 0
40:6/0 = 0
41:6/0 = 0
42:6/0 = 0
43:6/0 = 0
44:6/0 = 0
45:6/0 = 0
46:6/0 = 0
47:6/0 = 0
48:6/0 = 0
49:6/0 = 0
50:6/0 = 0
51:6/0 = 0
52:6/0 = 0
53:6/0 = 0
54:6/0 = 0
55:6/0 = 0
56:6/0 = 0
0:7/0 = 0
1:7/0 = 0
2:7/0 = 0
3:7/0 = 0
4:7/0 = 0
5:7/0 = 0
6:7/0 = 0
7:7/0 = 0
8:7/0 = 0
9:7/0 = 0
10:7/0 = 0
11:7/0 = 0
12:7/0 = 0
13:7/0 = 0
14:7/0 = 0
15:7/0 = 0
16:7/0 = 0
17:7/0 = 0
18:7/0 = 0
19:7/0 = 0
20:7/0 = 0
21:7/0 = 0
22:7/0 = 0
23:7/0 = 0
24:7/0 = 0
25:7/0 = 0
26:7/0 = 0
27:7/0 = 0
28:7/0 = 0
29:7/0 = 0
30:7/0 = 0
31:7/0 = 0
32:7/0 = 0
33:7/0 = 0
34:7/0 = 0
35:7/0 = 0
36:7/0 = 0
37:7/0 = 0
38:7/0 = 0
39:7/0 = 0
40:7/0 = 0
41:7/0 = 0
42:7/0 = 0
43:7/0 = 0
44:7/0 = 0
45:7/0 = 0
46:7/0 = 0
47:7/0 = 0
48:7/0 = 0
49:7/0 = 0
50:7/0 = 0
51:7/0 = 0
52:7/0 = 0
53:7/0 = 0
54:7/0 = 0
55:7/0 = 0
56:7/0 = 0
0:8/0 = 0
1:8/0 = 0
2:8/0 = 0
3:8/0 = 0
4:8/0 = 0
5:8/0 = 0
6:8/0 = 0
7:8/0 = 0
8:8/0 = 0
9:8/0 = 0
10:8/0 = 0
11:8/0 = 0
12:8/0 = 0
13:8/0 = 0
14:8/0 = 0
15:8/0 = 0
16:8/0 = 0
17:8/0 = 0
18:8/0 = 0
19:8/0 = 0
20:8/0 = 0
21:8/0 = 0
22:8/0 = 0
23:8/0 = 0
24:8/0 = 0
25:8/0 = 0
26:8/0 = 0
27:8/0 = 0
28:8/0 = 0
30:8/0 = 0
31:8/0 = 0
32:8/0 = 0
33:8/0 = 0
34:8/0 = 0
35:8/0 = 0
36:8/0 = 0
37:8/0 = 0
38:8/0 = 0
39:8/0 = 0
40:8/0 = 0
41:8/0 = 0
42:8/0 = 0
43:8/0 = 0
44:8/0 = 0
45:8/0 = 0
46:8/0 = 0
47:8/0 = 0
48:8/0 = 0
49:8/0 = 0
50:8/0 = 0
51:8/0 = 0
52:8/0 = 0
53:8/0 = 0
54:8/0 = 0
55:8/0 = 0
56:8/0 = 0
0:9/0 = 0
1:9/0 = 0
2:9/0 = 0
3:9/0 = 0
4:9/0 = 0
5:9/0 = 0
6:9/0 = 0
7:9/0 = 0
8:9/0 = 0
9:9/0 = 0
10:9/0 = 0
11:9/0 = 0
12:9/0 = 0
13:9/0 = 0
14:9/0 = 0
15:9/0 = 0
16:9/0 = 0
17:9/0 = 0
18:9/0 = 0
19:9/0 = 0
20:9/0 = 0
21:9/0 = 0
22:9/0 = 0
23:9/0 = 0
24:9/0 = 0
25:9/0 = 0
26:9/0 = 0
27:9/0 = 0
28:9/0 = 0
29:9/0 = 0
30:9/0 = 0
31:9/0 = 0
32:9/0 = 0
33:9/0 = 0
34:9/0 = 0
35:9/0 = 0
36:9/0 = 0
37:9/0 = 0
39:9/0 = 0
40:9/0 = 0
41:9/0 = 0
42:9/0 = 0
43:9/0 = 0
44:9/0 = 0
45:9/0 = 0
46:9/0 = 0
47:9/0 = 0
48:9/0 = 0
49:9/0 = 0
50:9/0 = 0
51:9/0 = 0
52:9/0 = 0
53:9/0 = 0
54:9/0 = 0
55:9/0 = 0
56:9/0 = 0
0:10/0 = 0
1:10/0 = 0
2:10/0 = 0
3:10/0 = 0
4:10/0 = 0
5:10/0 = 0
6:10/0 = 0
7:10/0 = 0
8:10/0 = 0
9:10/0 = 0
10:10/0 = 0
11:10/0 = 0
12:10/0 = 0
13:10/0 = 0
14:10/0 = 0
15:10/0 = 0
16:10/0 = 0
17:10/0 = 0
18:10/0 = 0
19:10/0 = 0
20:10/0 = 0
21:10/0 = 0
22:10/0 = 0
23:10/0 = 0
24:10/0 = 0
25:10/0 = 0
26:10/0 = 0
27:10/0 = 0
28:10/0 = 0
29:10/0 = 0
30:10/0 = 0
31:10/0 = 0
32:10/0 = 0
33:10/0 = 0
34:10/0 = 0
35:10/0 = 0
36:10/0 = 0
37:10/0 = 0
38:10/0 = 0
39:10/0 = 0
40:10/0 = 0
41:10/0 = 0
42:10/0 = 0
43:10/0 = 0
44:10/0 = 0
45:10/0 = 0
46:10/0 = 0
47:10/0 = 0
48:10/0 = 0
49:10/0 = 0
50:10/0 = 0
51:10/0 = 0
52:10/0 = 0
53:10/0 = 0
54:10/0 = 0
55:10/0 = 0
56:10/0 = 0
0:11/0 = 0
1:11/0 = 0
2:11/0 = 0
3:11/0 = 0
4:11/0 = 0
5:11/0 = 0
6:11/0 = 0
7:11/0 = 0
8:11/0 = 0
9:11/0 = 0
10:11/0 = 0
11:11/0 = 0
12:11/0 = 0
13:11/0 = 0
14:11/0 = 0
15:11/0 = 0
16:11/0 = 0
17:11/0 = 0
18:11/0 = 0
19:11/0 = 0
20:11/0 = 0
21:11/0 = 0
22:11/0 = 0
23:11/0 = 0
24:11/0 = 0
25:11/0 = 0
26:11/0 = 0
27:11/0 = 0
28:11/0 = 0
29:11/0 = 0
30:11/0 = 0
31:11/0 = 0
32:11/0 = 0
33:11/0 = 0
34:11/0 = 0
35:11/0 = 0
36:11/0 = 0
37:11/0 = 0
38:11/0 = 0
39:11/0 = 0
40:11/0 = 0
41:11/0 = 0
42:11/0 = 0
43:11/0 = 0
44:11/0 = 0
45:11/0 = 0
46:11/0 = 0
47:11/0 = 0
48:11/0 = 0
49:11/0 = 0
50:11/0 = 0
51:11/0 = 0
52:11/0 = 0
53:11/0 = 0
54:11/0 = 0
55:11/0 = 0
56:11/0 = 0
0:12/0 = 0
1:12/0 = 0
2:12/0 = 0
3:12/0 = 0
4:12/0 = 0
5:12/0 = 0
6:12/0 = 0
7:12/0 = 0
8:12/0 = 0
9:12/0 = 0
10:12/0 = 0
11:12/0 = 0
12:12/0 = 0
13:12/0 = 0
14:12/0 = 0
15:12/0 = 0
16:12/0 = 0
17:12/0 = 0
18:12/0 = 0
19:12/0 = 0
20:12/0 = 0
21:12/0 = 0
22:12/0 = 0
23:12/0 = 0
24:12/0 = 0
25:12/0 = 0
26:12/0 = 0
27:12/0 = 0
28:12/0 = 0
29:12/0 = 0
30:12/0 = 0
31:12/0 = 0
32:12/0 = 0
33:12/0 = 0
34:12/0 = 0
35:12/0 = 0
36:12/0 = 0
37:12/0 = 0
38:12/0 = 0
39:12/0 = 0
40:12/0 = 0
41:12/0 = 0
42:12/0 = 0
43:12/0 = 0
44:12/0 = 0
45:12/0 = 0
46:12/0 = 0
47:12/0 = 0
48:12/0 = 0
49:12/0 = 0
50:12/0 = 0
51:12/0 = 0
52:12/0 = 0
53:12/0 = 0
54:12/0 = 0
55:12/0 = 0
56:12/0 = 0
0:13/0 = 0
1:13/0 = 0
2:13/0 = 0
3:13/0 = 0
4:13/0 = 0
5:13/0 = 0
6:13/0 = 0
7:13/0 = 0
8:13/0 = 0
9:13/0 = 0
10:13/0 = 0
11:13/0 = 0
12:13/0 = 0
13:13/0 = 0
14:13/0 = 0
15:13/0 = 0
16:13/0 = 0
17:13/0 = 0
18:13/0 = 0
19:13/0 = 0
20:13/0 = 0
21:13/0 = 0
22:13/0 = 0
23:13/0 = 0
24:13/0 = 0
25:13/0 = 0
26:13/0 = 0
27:13/0 = 0
28:13/0 = 0
29:13/0 = 0
30:13/0 = 0
31:13/0 = 0
32:13/0 = 0
33:13/0 = 0
34:13/0 = 0
35:13/0 = 0
36:13/0 = 0
37:13/0 = 0
38:13/0 = 0
39:13/0 = 0
40:13/0 = 0
41:13/0 = 0
42:13/0 = 0
43:13/0 = 0
44:13/0 = 0
45:13/0 = 0
46:13/0 = 0
47:13/0 = 0
48:13/0 = 0
49:13/0 = 0
50:13/0 = 0
51:13/0 = 0
52:13/0 = 0
53:13/0 = 0
54:13/0 = 0
55:13/0 = 0
56:13/0 = 0
0:14/0 = 0
1:14/0 = 0
2:14/0 = 0
3:14/0 = 0
4:14/0 = 0
5:14/0 = 0
6:14/0 = 0
7:14/0 = 0
8:14/0 = 0
9:14/0 = 0
10:14/0 = 0
11:14/0 = 0
12:14/0 = 0
13:14/0 = 0
14:14/0 = 0
15:14/0 = 0
16:14/0 = 0
17:14/0 = 0
18:14/0 = 0
19:14/0 = 0
20:14/0 = 0
21:14/0 = 0
22:14/0 = 0
23:14/0 = 0
24:14/0 = 0
25:14/0 = 0
26:14/0 = 0
27:14/0 = 0
28:14/0 = 0
29:14/0 = 0
30:14/0 = 0
31:14/0 = 0
32:14/0 = 0
33:14/0 = 0
34:14/0 = 0
35:14/0 = 0
36:14/0 = 0
37:14/0 = 0
38:14/0 = 0
39:14/0 = 0
40:14/0 = 0
41:14/0 = 0
42:14/0 = 0
43:14/0 = 0
44:14/0 = 0
45:14/0 = 0
46:14/0 = 0
47:14/0 = 0
48:14/0 = 0
49:14/0 = 0
50:14/0 = 0
51:14/0 = 0
52:14/0 = 0
53:14/0 = 0
54:14/0 = 0
55:14/0 = 0
56:14/0 = 0
0:15/0 = 0
1:15/0 = 0
2:15/0 = 0
3:15/0 = 0
4:15/0 = 0
5:15/0 = 0
6:15/0 = 0
7:15/0 = 0
8:15/0 = 0
9:15/0 = 0
10:15/0 = 0
11:15/0 = 0
12:15/0 = 0
13:15/0 = 0
14:15/0 = 0
15:15/0 = 0
16:15/0 = 0
17:15/0 = 0
18:15/0 = 0
19:15/0 = 0
20:15/0 = 0
21:15/0 = 0
22:15/0 = 0
23:15/0 = 0
24:15/0 = 0
25:15/0 = 0
26:15/0 = 0
27:15/0 = 0
28:15/0 = 0
29:15/0 = 0
30:15/0 = 0
31:15/0 = 0
32:15/0 = 0
33:15/0 = 0
34:15/0 = 0
35:15/0 = 0
36:15/0 = 0
37:15/0 = 0
38:15/0 = 0
39:15/0 = 0
40:15/0 = 0
41:15/0 = 0
42:15/0 = 0
43:15/0 = 0
44:15/0 = 0
45:15/0 = 0
46:15/0 = 0
47:15/0 = 0
48:15/0 = 0
49:15/0 = 0
50:15/0 = 0
51:15/0 = 0
52:15/0 = 0
53:15/0 = 0
54:15/0 = 0
55:15/0 = 0
56:15/0 = 0
0:16/0 = 0
1:16/0 = 0
2:16/0 = 0
3:16/0 = 0
4:16/0 = 0
5:16/0 = 0
6:16/0 = 0
7:16/0 = 0
8:16/0 = 0
9:16/0 = 0
10:16/0 = 0
11:16/0 = 0
12:16/0 = 0
13:16/0 = 0
14:16/0 = 0
15:16/0 = 0
16:16/0 = 0
17:16/0 = 0
18:16/0 = 0
19:16/0 = 0
20:16/0 = 0
21:16/0 = 0
22:16/0 = 0
23:16/0 = 0
24:16/0 = 0
25:16/0 = 0
26:16/0 = 0
27:16/0 = 0
28:16/0 = 0
29:16/0 = 0
30:16/0 = 0
31:16/0 = 0
32:16/0 = 0
33:16/0 = 0
34:16/0 = 0
35:16/0 = 0
36:16/0 = 0
37:16/0 = 0
38:16/0 = 0
39:16/0 = 0
40:16/0 = 0
41:16/0 = 0
42:16/0 = 0
43:16/0 = 0
44:16/0 = 0
45:16/0 = 0
46:16/0 = 0
47:16/0 = 0
48:16/0 = 0
49:16/0 = 0
50:16/0 = 0
51:16/0 = 0
52:16/0 = 0
53:16/0 = 0
54:16/0 = 0
55:16/0 = 0
56:16/0 = 0
0:17/0 = 0
1:17/0 = 0
2:17/0 = 0
3:17/0 = 0
4:17/0 = 0
5:17/0 = 0
6:17/0 = 0
7:17/0 = 0
8:17/0 = 0
9:17/0 = 0
10:17/0 = 0
11:17/0 = 0
12:17/0 = 0
13:17/0 = 0
14:17/0 = 0
15:17/0 = 0
16:17/0 = 0
17:17/0 = 0
18:17/0 = 0
19:17/0 = 0
20:17/0 = 0
21:17/0 = 0
22:17/0 = 0
23:17/0 = 0
24:17/0 = 0
25:17/0 = 0
26:17/0 = 0
27:17/0 = 0
28:17/0 = 0
29:17/0 = 0
30:17/0 = 0
31:17/0 = 0
32:17/0 = 0
33:17/0 = 0
34:17/0 = 0
35:17/0 = 0
36:17/0 = 0
37:17/0 = 0
38:17/0 = 0
39:17/0 = 0
40:17/0 = 0
41:17/0 = 0
42:17/0 = 0
43:17/0 = 0
44:17/0 = 0
45:17/0 = 0
46:17/0 = 0
47:17/0 = 0
48:17/0 = 0
49:17/0 = 0
50:17/0 = 0
51:17/0 = 0
52:17/0 = 0
53:17/0 = 0
54:17/0 = 0
55:17/0 = 0
56:17/0 = 0
2:18/0 = 0
3:18/0 = 0
4:18/0 = 0
5:18/0 = 0
6:18/0 = 0
7:18/0 = 0
8:18/0 = 0
9:18/0 = 0
10:18/0 = 0
11:18/0 = 0
12:18/0 = 0
13:18/0 = 0
14:18/0 = 0
15:18/0 = 0
16:18/0 = 0
17:18/0 = 0
18:18/0 = 0
19:18/0 = 0
20:18/0 = 0
21:18/0 = 0
22:18/0 = 0
23:18/0 = 0
24:18/0 = 0
25:18/0 = 0
26:18/0 = 0
27:18/0 = 0
28:18/0 = 0
29:18/0 = 0
30:18/0 = 0
31:18/0 = 0
32:18/0 = 0
33:18/0 = 0
34:18/0 = 0
35:18/0 = 0
36:18/0 = 0
37:18/0 = 0
38:18/0 = 0
39:18/0 = 0
40:18/0 = 0
41:18/0 = 0
42:18/0 = 0
43:18/0 = 0
44:18/0 = 0
45:18/0 = 0
46:18/0 = 0
47:18/0 = 0
48:18/0 = 0
49:18/0 = 0
50:18/0 = 0
51:18/0 = 0
52:18/0 = 0
53:18/0 = 0
54:18/0 = 0
55:18/0 = 0
56:18/0 = 0
0:19/0 = 0
1:19/0 = 0
2:19/0 = 0
3:19/0 = 0
4:19/0 = 0
5:19/0 = 0
6:19/0 = 0
7:19/0 = 0
8:19/0 = 0
9:19/0 = 0
10:19/0 = 0
11:19/0 = 0
12:19/0 = 0
13:19/0 = 0
14:19/0 = 0
15:19/0 = 0
16:19/0 = 0
17:19/0 = 0
18:19/0 = 0
19:19/0 = 0
20:19/0 = 0
21:19/0 = 0
22:19/0 = 0
23:19/0 = 0
24:19/0 = 0
25:19/0 = 0
26:19/0 = 0
27:19/0 = 0
28:19/0 = 0
29:19/0 = 0
30:19/0 = 0
31:19/0 = 0
32:19/0 = 0
33:19/0 = 0
34:19/0 = 0
35:19/0 = 0
36:19/0 = 0
37:19/0 = 0
38:19/0 = 0
39:19/0 = 0
40:19/0 = 0
41:19/0 = 0
42:19/0 = 0
43:19/0 = 0
44:19/0 = 0
45:19/0 = 0
46:19/0 = 0
47:19/0 = 0
48:19/0 = 0
49:19/0 = 0
50:19/0 = 0
51:19/0 = 0
52:19/0 = 0
53:19/0 = 0
54:19/0 = 0
55:19/0 = 0
56:19/0 = 0
0:20/0 = 0
1:20/0 = 0
2:20/0 = 0
3:20/0 = 0
4:20/0 = 0
5:20/0 = 0
6:20/0 = 0
7:20/0 = 0
8:20/0 = 0
9:20/0 = 0
10:20/0 = 0
11:20/0 = 0
12:20/0 = 0
13:20/0 = 0
14:20/0 = 0
15:20/0 = 0
16:20/0 = 0
17:20/0 = 0
18:20/0 = 0
19:20/0 = 0
20:20/0 = 0
21:20/0 = 0
22:20/0 = 0
23:20/0 = 0
24:20/0 = 0
25:20/0 = 0
26:20/0 = 0
27:20/0 = 0
28:20/0 = 0
29:20/0 = 0
30:20/0 = 0
31:20/0 = 0
32:20/0 = 0
33:20/0 = 0
34:20/0 = 0
35:20/0 = 0
36:20/0 = 0
37:20/0 = 0
38:20/0 = 0
39:20/0 = 0
40:20/0 = 0
41:20/0 = 0
42:20/0 = 0
43:20/0 = 0
44:20/0 = 0
45:20/0 = 0
46:20/0 = 0
47:20/0 = 0
48:20/0 = 0
49:20/0 = 0
50:20/0 = 0
51:20/0 = 0
52:20/0 = 0
53:20/0 = 0
54:20/0 = 0
55:20/0 = 0
56:20/0 = 0
0:21/0 = 0
1:21/0 = 0
2:21/0 = 0
3:21/0 = 0
4:21/0 = 0
5:21/0 = 0
6:21/0 = 0
7:21/0 = 0
8:21/0 = 0
9:21/0 = 0
10:21/0 = 0
11:21/0 = 0
12:21/0 = 0
13:21/0 = 0
14:21/0 = 0
15:21/0 = 0
16:21/0 = 0
17:21/0 = 0
18:21/0 = 0
19:21/0 = 0
20:21/0 = 0
21:21/0 = 0
22:21/0 = 0
23:21/0 = 0
24:21/0 = 0
25:21/0 = 0
26:21/0 = 0
27:21/0 = 0
28:21/0 = 0
29:21/0 = 0
30:21/0 = 0
31:21/0 = 0
32:21/0 = 0
33:21/0 = 0
34:21/0 = 0
35:21/0 = 0
36:21/0 = 0
37:21/0 = 0
38:21/0 = 0
39:21/0 = 0
40:21/0 = 0
41:21/0 = 0
42:21/0 = 0
43:21/0 = 0
44:21/0 = 0
45:21/0 = 0
46:21/0 = 0
47:21/0 = 0
48:21/0 = 0
49:21/0 = 0
50:21/0 = 0
51:21/0 = 0
52:21/0 = 0
53:21/0 = 0
54:21/0 = 0
55:21/0 = 0
56:21/0 = 0
0:22/0 = 0
1:22/0 = 0
2:22/0 = 0
3:22/0 = 0
4:22/0 = 0
5:22/0 = 0
6:22/0 = 0
7:22/0 = 0
8:22/0 = 0
9:22/0 = 0
10:22/0 = 0
11:22/0 = 0
12:22/0 = 0
13:22/0 = 0
14:22/0 = 0
15:22/0 = 0
16:22/0 = 0
17:22/0 = 0
18:22/0 = 0
19:22/0 = 0
20:22/0 = 0
21:22/0 = 0
22:22/0 = 0
23:22/0 = 0
24:22/0 = 0
25:22/0 = 0
26:22/0 = 0
27:22/0 = 0
28:22/0 = 0
29:22/0 = 0
30:22/0 = 0
31:22/0 = 0
32:22/0 = 0
33:22/0 = 0
34:22/0 = 0
35:22/0 = 0
36:22/0 = 0
37:22/0 = 0
38:22/0 = 0
39:22/0 = 0
40:22/0 = 0
41:22/0 = 0
42:22/0 = 0
43:22/0 = 0
44:22/0 = 0
45:22/0 = 0
46:22/0 = 0
47:22/0 = 0
48:22/0 = 0
49:22/0 = 0
50:22/0 = 0
51:22/0 = 0
52:22/0 = 0
53:22/0 = 0
54:22/0 = 0
55:22/0 = 0
56:22/0 = 0
0:23/0 = 0
1:23/0 = 0
2:23/0 = 0
3:23/0 = 0
4:23/0 = 0
5:23/0 = 0
6:23/0 = 0
7:23/0 = 0
8:23/0 = 0
9:23/0 = 0
10:23/0 = 0
11:23/0 = 0
12:23/0 = 0
13:23/0 = 0
14:23/0 = 0
15:23/0 = 0
16:23/0 = 0
17:23/0 = 0
18:23/0 = 0
19:23/0 = 0
20:23/0 = 0
21:23/0 = 0
22:23/0 = 0
23:23/0 = 0
24:23/0 = 0
25:23/0 = 0
26:23/0 = 0
27:23/0 = 0
28:23/0 = 0
29:23/0 = 0
30:23/0 = 0
31:23/0 = 0
32:23/0 = 0
33:23/0 = 0
34:23/0 = 0
35:23/0 = 0
36:23/0 = 0
37:23/0 = 0
38:23/0 = 0
39:23/0 = 0
40:23/0 = 0
41:23/0 = 0
42:23/0 = 0
43:23/0 = 0
44:23/0 = 0
45:23/0 = 0
46:23/0 = 0
47:23/0 = 0
48:23/0 = 0
49:23/0 = 0
50:23/0 = 0
51:23/0 = 0
52:23/0 = 0
53:23/0 = 0
54:23/0 = 0
55:23/0 = 0
56:23/0 = 0
0:24/0 = 0
1:24/0 = 0
2:24/0 = 0
3:24/0 = 0
4:24/0 = 0
5:24/0 = 0
6:24/0 = 0
7:24/0 = 0
8:24/0 = 0
9:24/0 = 0
10:24/0 = 0
11:24/0 = 0
12:24/0 = 0
13:24/0 = 0
14:24/0 = 0
15:24/0 = 0
16:24/0 = 0
17:24/0 = 0
18:24/0 = 0
19:24/0 = 0
20:24/0 = 0
21:24/0 = 0
22:24/0 = 0
23:24/0 = 0
24:24/0 = 0
25:24/0 = 0
26:24/0 = 0
27:24/0 = 0
28:24/0 = 0
29:24/0 = 0
30:24/0 = 0
31:24/0 = 0
32:24/0 = 0
33:24/0 = 0
34:24/0 = 0
35:24/0 = 0
36:24/0 = 0
37:24/0 = 0
38:24/0 = 0
39:24/0 = 0
40:24/0 = 0
41:24/0 = 0
42:24/0 = 0
43:24/0 = 0
44:24/0 = 0
45:24/0 = 0
46:24/0 = 0
47:24/0 = 0
48:24/0 = 0
49:24/0 = 0
50:24/0 = 0
51:24/0 = 0
52:24/0 = 0
53:24/0 = 0
54:24/0 = 0
55:24/0 = 0
56:24/0 = 0
2:25/0 = 0
3:25/0 = 0
4:25/0 = 0
5:25/0 = 0
6:25/0 = 0
7:25/0 = 0
8:25/0 = 0
9:25/0 = 0
10:25/0 = 0
11:25/0 = 0
12:25/0 = 0
13:25/0 = 0
14:25/0 = 0
15:25/0 = 0
16:25/0 = 0
17:25/0 = 0
18:25/0 = 0
19:25/0 = 0
20:25/0 = 0
21:25/0 = 0
22:25/0 = 0
23:25/0 = 0
24:25/0 = 0
25:25/0 = 0
26:25/0 = 0
27:25/0 = 0
28:25/0 = 0
29:25/0 = 0
30:25/0 = 0
31:25/0 = 0
32:25/0 = 0
33:25/0 = 0
34:25/0 = 0
35:25/0 = 0
36:25/0 = 0
37:25/0 = 0
38:25/0 = 0
39:25/0 = 0
40:25/0 = 0
41:25/0 = 0
42:25/0 = 0
43:25/0 = 0
44:25/0 = 0
45:25/0 = 0
46:25/0 = 0
47:25/0 = 0
48:25/0 = 0
49:25/0 = 0
50:25/0 = 0
51:25/0 = 0
52:25/0 = 0
53:25/0 = 0
54:25/0 = 0
55:25/0 = 0
56:25/0 = 0
0:26/0 = 0
1:26/0 = 0
2:26/0 = 0
3:26/0 = 0
4:26/0 = 0
5:26/0 = 0
6:26/0 = 0
7:26/0 = 0
8:26/0 = 0
9:26/0 = 0
10:26/0 = 0
11:26/0 = 0
12:26/0 = 0
13:26/0 = 0
14:26/0 = 0
15:26/0 = 0
16:26/0 = 0
17:26/0 = 0
18:26/0 = 0
19:26/0 = 0
20:26/0 = 0
21:26/0 = 0
22:26/0 = 0
23:26/0 = 0
24:26/0 = 0
25:26/0 = 0
26:26/0 = 0
27:26/0 = 0
28:26/0 = 0
29:26/0 = 0
30:26/0 = 0
31:26/0 = 0
32:26/0 = 0
33:26/0 = 0
34:26/0 = 0
35:26/0 = 0
36:26/0 = 0
37:26/0 = 0
38:26/0 = 0
39:26/0 = 0
40:26/0 = 0
41:26/0 = 0
42:26/0 = 0
43:26/0 = 0
44:26/0 = 0
45:26/0 = 0
46:26/0 = 0
47:26/0 = 0
48:26/0 = 0
49:26/0 = 0
50:26/0 = 0
51:26/0 = 0
52:26/0 = 0
53:26/0 = 0
54:26/0 = 0
55:26/0 = 0
56:26/0 = 0
0:27/0 = 0
1:27/0 = 0
2:27/0 = 0
3:27/0 = 0
4:27/0 = 0
5:27/0 = 0
6:27/0 = 0
7:27/0 = 0
8:27/0 = 0
9:27/0 = 0
10:27/0 = 0
11:27/0 = 0
12:27/0 = 0
13:27/0 = 0
14:27/0 = 0
15:27/0 = 0
16:27/0 = 0
17:27/0 = 0
18:27/0 = 0
19:27/0 = 0
20:27/0 = 0
21:27/0 = 0
22:27/0 = 0
23:27/0 = 0
24:27/0 = 0
25:27/0 = 0
26:27/0 = 0
27:27/0 = 0
28:27/0 = 0
29:27/0 = 0
30:27/0 = 0
31:27/0 = 0
32:27/0 = 0
33:27/0 = 0
34:27/0 = 0
35:27/0 = 0
36:27/0 = 0
37:27/0 = 0
38:27/0 = 0
39:27/0 = 0
40:27/0 = 0
41:27/0 = 0
42:27/0 = 0
43:27/0 = 0
44:27/0 = 0
45:27/0 = 0
46:27/0 = 0
47:27/0 = 0
48:27/0 = 0
49:27/0 = 0
50:27/0 = 0
51:27/0 = 0
52:27/0 = 0
53:27/0 = 0
54:27/0 = 0
55:27/0 = 0
56:27/0 = 0
0:28/0 = 0
1:28/0 = 0
2:28/0 = 0
3:28/0 = 0
4:28/0 = 0
5:28/0 = 0
6:28/0 = 0
7:28/0 = 0
8:28/0 = 0
9:28/0 = 0
10:28/0 = 0
11:28/0 = 0
12:28/0 = 0
13:28/0 = 0
14:28/0 = 0
15:28/0 = 0
16:28/0 = 0
17:28/0 = 0
18:28/0 = 0
19:28/0 = 0
20:28/0 = 0
21:28/0 = 0
22:28/0 = 0
23:28/0 = 0
24:28/0 = 0
25:28/0 = 0
26:28/0 = 0
27:28/0 = 0
28:28/0 = 0
29:28/0 = 0
30:28/0 = 0
31:28/0 = 0
32:28/0 = 0
33:28/0 = 0
34:28/0 = 0
35:28/0 = 0
36:28/0 = 0
37:28/0 = 0
38:28/0 = 0
39:28/0 = 0
40:28/0 = 0
41:28/0 = 0
42:28/0 = 0
43:28/0 = 0
44:28/0 = 0
45:28/0 = 0
46:28/0 = 0
47:28/0 = 0
48:28/0 = 0
49:28/0 = 0
50:28/0 = 0
51:28/0 = 0
52:28/0 = 0
53:28/0 = 0
54:28/0 = 0
55:28/0 = 0
56:28/0 = 0
0:29/0 = 0
1:29/0 = 0
2:29/0 = 0
3:29/0 = 0
4:29/0 = 0
5:29/0 = 0
6:29/0 = 0
7:29/0 = 0
8:29/0 = 0
9:29/0 = 0
10:29/0 = 0
11:29/0 = 0
12:29/0 = 0
13:29/0 = 0
14:29/0 = 0
15:29/0 = 0
16:29/0 = 0
17:29/0 = 0
18:29/0 = 0
19:29/0 = 0
20:29/0 = 0
21:29/0 = 0
22:29/0 = 0
23:29/0 = 0
24:29/0 = 0
25:29/0 = 0
26:29/0 = 0
27:29/0 = 0
28:29/0 = 0
29:29/0 = 0
30:29/0 = 0
31:29/0 = 0
32:29/0 = 0
33:29/0 = 0
34:29/0 = 0
35:29/0 = 0
36:29/0 = 0
37:29/0 = 0
38:29/0 = 0
39:29/0 = 0
40:29/0 = 0
41:29/0 = 0
42:29/0 = 0
43:29/0 = 0
44:29/0 = 0
45:29/0 = 0
46:29/0 = 0
47:29/0 = 0
48:29/0 = 0
49:29/0 = 0
50:29/0 = 0
51:29/0 = 0
52:29/0 = 0
53:29/0 = 0
54:29/0 = 0
55:29/0 = 0
56:29/0 = 0
0:30/0 = 0
1:30/0 = 0
2:30/0 = 0
3:30/0 = 0
4:30/0 = 0
5:30/0 = 0
6:30/0 = 0
7:30/0 = 0
8:30/0 = 0
9:30/0 = 0
10:30/0 = 0
11:30/0 = 0
12:30/0 = 0
13:30/0 = 0
14:30/0 = 0
15:30/0 = 0
16:30/0 = 0
17:30/0 = 0
18:30/0 = 0
19:30/0 = 0
20:30/0 = 0
21:30/0 = 0
22:30/0 = 0
23:30/0 = 0
24:30/0 = 0
25:30/0 = 0
26:30/0 = 0
27:30/0 = 0
28:30/0 = 0
29:30/0 = 0
30:30/0 = 0
31:30/0 = 0
32:30/0 = 0
33:30/0 = 0
34:30/0 = 0
35:30/0 = 0
36:30/0 = 0
37:30/0 = 0
38:30/0 = 0
39:30/0 = 0
40:30/0 = 0
41:30/0 = 0
42:30/0 = 0
43:30/0 = 0
44:30/0 = 0
45:30/0 = 0
46:30/0 = 0
47:30/0 = 0
48:30/0 = 0
49:30/0 = 0
50:30/0 = 0
51:30/0 = 0
52:30/0 = 0
53:30/0 = 0
54:30/0 = 0
55:30/0 = 0
56:30/0 = 0
1:18/0 = 0
0:18/0 = 0
38:9/0 = 0
29:8/0 = 0
1:25/0 = 0
0:25/0 = 0

[sub_resource type="TileSet" id="TileSet_4qq7b"]
sources/0 = SubResource("TileSetAtlasSource_c185m")
sources/1 = SubResource("TileSetAtlasSource_2465o")

[node name="TileMapLayer" type="TileMapLayer"]
texture_filter = 1
tile_map_data = PackedByteArray("")
tile_set = SubResource("TileSet_4qq7b")
 
==== H:\Game Creation\testing-environ\Scenes\Bosses\slime_king.tscn ==== 
[gd_scene load_steps=13 format=3 uid="uid://6uoro2ckjca6"]

[ext_resource type="PackedScene" uid="uid://dxa4b1piqkc7i" path="res://Scenes/BaseEnemy.tscn" id="1_akvpe"]
[ext_resource type="Script" uid="uid://dr6iqp0tyi2dl" path="res://Scripts/Enemies/slime_king.gd" id="2_nt008"]
[ext_resource type="Texture2D" uid="uid://dy6hnocqaith0" path="res://Assets/Enemy Animations/Slime Boss Animation 2.png" id="3_akvpe"]

[sub_resource type="AtlasTexture" id="AtlasTexture_nt008"]
atlas = ExtResource("3_akvpe")
region = Rect2(512, 0, 128, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_q4sm8"]
atlas = ExtResource("3_akvpe")
region = Rect2(0, 0, 128, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_u3dms"]
atlas = ExtResource("3_akvpe")
region = Rect2(0, 0, 128, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_p1kad"]
atlas = ExtResource("3_akvpe")
region = Rect2(128, 0, 128, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_pc0cn"]
atlas = ExtResource("3_akvpe")
region = Rect2(256, 0, 128, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_vx6xv"]
atlas = ExtResource("3_akvpe")
region = Rect2(384, 0, 128, 128)

[sub_resource type="SpriteFrames" id="SpriteFrames_1omo3"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_nt008")
}],
"loop": false,
"name": &"attack",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_q4sm8")
}],
"loop": false,
"name": &"idle",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_u3dms")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_p1kad")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_pc0cn")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_vx6xv")
}],
"loop": true,
"name": &"walk",
"speed": 8.0
}]

[sub_resource type="CircleShape2D" id="CircleShape2D_1c5xl"]
radius = 67.0

[sub_resource type="CircleShape2D" id="CircleShape2D_pe0ab"]
radius = 49.163

[node name="BaseEnemy" instance=ExtResource("1_akvpe")]
script = ExtResource("2_nt008")

[node name="AnimatedSprite2D" parent="." index="0"]
sprite_frames = SubResource("SpriteFrames_1omo3")
animation = &"attack"
autoplay = "walk"

[node name="CollisionShape2D" parent="." index="1"]
position = Vector2(-1, 3)
shape = SubResource("CircleShape2D_1c5xl")

[node name="CollisionShape2D" parent="DamageArea" index="0"]
position = Vector2(0, 13)
shape = SubResource("CircleShape2D_pe0ab")

[node name="CollisionShape2D" parent="SeparationDetector" index="0"]
position = Vector2(1.04904e-05, 16)
 
==== H:\Game Creation\testing-environ\Scenes\Enemies\slime_blue.tscn ==== 
[gd_scene load_steps=14 format=3 uid="uid://cgd0awfevuue1"]

[ext_resource type="PackedScene" uid="uid://dxa4b1piqkc7i" path="res://Scenes/BaseEnemy.tscn" id="1_wp0q5"]
[ext_resource type="Script" uid="uid://2mgwrvn71kma" path="res://Scripts/Enemies/slime_blue.gd" id="2_wp0q5"]
[ext_resource type="Texture2D" uid="uid://cdf45s0cmw4s1" path="res://Assets/Enemy Animations/Blue Slime Animation.png" id="3_wp0q5"]

[sub_resource type="AtlasTexture" id="AtlasTexture_wgo4f"]
atlas = ExtResource("3_wp0q5")
region = Rect2(640, 0, 128, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_bulha"]
atlas = ExtResource("3_wp0q5")
region = Rect2(1152, 0, 128, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_60j4j"]
atlas = ExtResource("3_wp0q5")
region = Rect2(128, 0, 128, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_id5qn"]
atlas = ExtResource("3_wp0q5")
region = Rect2(256, 0, 128, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_awoka"]
atlas = ExtResource("3_wp0q5")
region = Rect2(512, 0, 128, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_dsqsp"]
atlas = ExtResource("3_wp0q5")
region = Rect2(768, 0, 128, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_ts06b"]
atlas = ExtResource("3_wp0q5")
region = Rect2(896, 0, 128, 128)

[sub_resource type="SpriteFrames" id="SpriteFrames_rfp5d"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_wgo4f")
}],
"loop": false,
"name": &"attack",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_bulha")
}],
"loop": false,
"name": &"idle",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_60j4j")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_id5qn")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_awoka")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_dsqsp")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ts06b")
}],
"loop": true,
"name": &"walk",
"speed": 8.0
}]

[sub_resource type="CircleShape2D" id="CircleShape2D_tlpub"]
radius = 83.3333

[sub_resource type="CircleShape2D" id="CircleShape2D_dttn4"]
radius = 50.0

[node name="slime_blue" instance=ExtResource("1_wp0q5")]
scale = Vector2(0.18, 0.18)
script = ExtResource("2_wp0q5")

[node name="AnimatedSprite2D" parent="." index="0"]
sprite_frames = SubResource("SpriteFrames_rfp5d")
animation = &"walk"
autoplay = "walk"

[node name="CollisionShape2D" parent="." index="1"]
shape = SubResource("CircleShape2D_tlpub")

[node name="CollisionShape2D" parent="DamageArea" index="0"]
shape = SubResource("CircleShape2D_dttn4")

[node name="HealthBar" parent="." index="4"]
offset_left = -83.0
offset_top = -102.0
offset_right = 9.0
offset_bottom = -85.0
scale = Vector2(1.8, 1.8)

[node name="CollisionShape2D" parent="SeparationDetector" index="0"]
position = Vector2(7.62939e-06, 0)
 
==== H:\Game Creation\testing-environ\Scenes\Enemies\slime_red.tscn ==== 
[gd_scene load_steps=13 format=3 uid="uid://dw568ttd3u7rt"]

[ext_resource type="PackedScene" uid="uid://dxa4b1piqkc7i" path="res://Scenes/BaseEnemy.tscn" id="1_nm3h8"]
[ext_resource type="Script" uid="uid://daogk4yvq2byj" path="res://Scripts/Enemies/slime_red.gd" id="2_tlpub"]
[ext_resource type="Texture2D" uid="uid://cnyi38k21d23d" path="res://Assets/Enemy Animations/Red Slime Animations.png" id="3_tlpub"]

[sub_resource type="AtlasTexture" id="AtlasTexture_dttn4"]
atlas = ExtResource("3_tlpub")
region = Rect2(640, 0, 128, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_co3oa"]
atlas = ExtResource("3_tlpub")
region = Rect2(0, 0, 128, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_p0ry0"]
atlas = ExtResource("3_tlpub")
region = Rect2(128, 0, 128, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_yqnhc"]
atlas = ExtResource("3_tlpub")
region = Rect2(256, 0, 128, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_e7ggx"]
atlas = ExtResource("3_tlpub")
region = Rect2(384, 0, 128, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_5qrh0"]
atlas = ExtResource("3_tlpub")
region = Rect2(512, 0, 128, 128)

[sub_resource type="SpriteFrames" id="SpriteFrames_047j0"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_dttn4")
}],
"loop": false,
"name": &"attack",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_co3oa")
}],
"loop": false,
"name": &"idle",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_p0ry0")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_yqnhc")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_e7ggx")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_5qrh0")
}],
"loop": true,
"name": &"walk",
"speed": 8.0
}]

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_4rivg"]
radius = 46.1538
height = 123.077

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_xkgff"]
radius = 23.0769
height = 92.3077

[node name="BaseEnemy" instance=ExtResource("1_nm3h8")]
scale = Vector2(0.2, 0.2)
script = ExtResource("2_tlpub")

[node name="AnimatedSprite2D" parent="." index="0"]
sprite_frames = SubResource("SpriteFrames_047j0")
animation = &"walk"
autoplay = "walk"
frame_progress = 0.040788

[node name="CollisionShape2D" parent="." index="1"]
position = Vector2(0, 15.3846)
rotation = 1.57079
shape = SubResource("CapsuleShape2D_4rivg")

[node name="CollisionShape2D" parent="DamageArea" index="0"]
position = Vector2(-7.69231, 15.3846)
rotation = -1.57079
shape = SubResource("CapsuleShape2D_xkgff")

[node name="HealthBar" parent="." index="4"]
offset_top = -44.0
offset_bottom = -27.0

[node name="CollisionShape2D" parent="SeparationDetector" index="0"]
position = Vector2(7.69231, 15.3846)
 
==== H:\Game Creation\testing-environ\Scenes\Enemies\slime_tall_light_blue.tscn ==== 
[gd_scene load_steps=12 format=3 uid="uid://dbxmf5av5r4dy"]

[ext_resource type="PackedScene" uid="uid://dxa4b1piqkc7i" path="res://Scenes/BaseEnemy.tscn" id="1_xha8g"]
[ext_resource type="Script" uid="uid://doxx0lbfyivsm" path="res://Scripts/Enemies/slime_tall_light_blue.gd" id="2_vpvde"]
[ext_resource type="Texture2D" uid="uid://dfg4r8c5a15qc" path="res://Assets/Enemy Animations/Tall Light Blue Slime Animation.png" id="3_pd3n3"]

[sub_resource type="AtlasTexture" id="AtlasTexture_vpvde"]
atlas = ExtResource("3_pd3n3")
region = Rect2(384, 0, 128, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_tqmco"]
atlas = ExtResource("3_pd3n3")
region = Rect2(0, 0, 128, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_yxjny"]
atlas = ExtResource("3_pd3n3")
region = Rect2(0, 0, 128, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_btr4i"]
atlas = ExtResource("3_pd3n3")
region = Rect2(128, 0, 128, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_lhw7u"]
atlas = ExtResource("3_pd3n3")
region = Rect2(256, 0, 128, 128)

[sub_resource type="SpriteFrames" id="SpriteFrames_37anh"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_vpvde")
}],
"loop": false,
"name": &"attack",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_tqmco")
}],
"loop": false,
"name": &"idle",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_yxjny")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_btr4i")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_lhw7u")
}],
"loop": true,
"name": &"walk",
"speed": 6.0
}]

[sub_resource type="CircleShape2D" id="CircleShape2D_6ok8a"]
radius = 65.0

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_jnhlo"]
radius = 30.0
height = 80.0

[node name="BaseEnemy" instance=ExtResource("1_xha8g")]
scale = Vector2(0.22, 0.22)
script = ExtResource("2_vpvde")

[node name="AnimatedSprite2D" parent="." index="0"]
sprite_frames = SubResource("SpriteFrames_37anh")
animation = &"walk"
autoplay = "walk"

[node name="CollisionShape2D" parent="." index="1"]
shape = SubResource("CircleShape2D_6ok8a")

[node name="CollisionShape2D" parent="DamageArea" index="0"]
shape = SubResource("CapsuleShape2D_jnhlo")

[node name="HealthBar" parent="." index="4"]
offset_left = -32.6667
offset_top = -76.6667
offset_right = 40.3333
offset_bottom = -59.6667
 
==== H:\Game Creation\testing-environ\Scenes\Enemies\Minions\basic_minion.tscn ==== 
[gd_scene load_steps=3 format=3 uid="uid://vo7lxr21baeg"]

[ext_resource type="PackedScene" uid="uid://dxa4b1piqkc7i" path="res://Scenes/BaseEnemy.tscn" id="1_hgli2"]
[ext_resource type="Script" uid="uid://cixinu53tmf2w" path="res://Scripts/Enemies/basic_minion.gd" id="2_65c7e"]

[node name="BaseEnemy" instance=ExtResource("1_hgli2")]
script = ExtResource("2_65c7e")
 
==== H:\Game Creation\testing-environ\Scenes\Pickups\exp_tier_1_large.tscn ==== 
[gd_scene load_steps=4 format=3 uid="uid://bv8tn08a7rq77"]

[ext_resource type="Script" uid="uid://bu2l05s10uh8b" path="res://Scripts/exp_drop.gd" id="1_dyq46"]
[ext_resource type="Texture2D" uid="uid://dpgvfcx687kxo" path="res://Assets/Drops/Experience/Exp Drop Medium.png" id="2_0mkv5"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_fmbg5"]
size = Vector2(2, 2)

[node name="ExpDrop" type="Area2D"]
collision_layer = 64
collision_mask = 0
script = ExtResource("1_dyq46")
experience_value = 7
magnet_speed = 100.0
magnet_activation_distance = 50.0

[node name="Sprite2D" type="Sprite2D" parent="."]
position = Vector2(0, -3.8147e-06)
scale = Vector2(0.18, 0.13)
texture = ExtResource("2_0mkv5")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_fmbg5")
 
==== H:\Game Creation\testing-environ\Scenes\Pickups\exp_tier_1_medium.tscn ==== 
[gd_scene load_steps=4 format=3 uid="uid://dc6mglm205eba"]

[ext_resource type="Script" uid="uid://bu2l05s10uh8b" path="res://Scripts/exp_drop.gd" id="1_i8c68"]
[ext_resource type="Texture2D" uid="uid://67sbqmxqrpgo" path="res://Assets/Low Exp Drop.png" id="2_hdscf"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_fmbg5"]
size = Vector2(2, 2)

[node name="ExpDrop" type="Area2D"]
collision_layer = 64
collision_mask = 0
script = ExtResource("1_i8c68")
experience_value = 4
magnet_speed = 100.0
magnet_activation_distance = 50.0

[node name="Sprite2D" type="Sprite2D" parent="."]
position = Vector2(0, -3.8147e-06)
scale = Vector2(0.18, 0.13)
texture = ExtResource("2_hdscf")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_fmbg5")
 
==== H:\Game Creation\testing-environ\Scenes\Pickups\exp_tier_1_small.tscn ==== 
[gd_scene load_steps=4 format=3 uid="uid://d2vu71lcbvmo1"]

[ext_resource type="Script" uid="uid://bu2l05s10uh8b" path="res://Scripts/exp_drop.gd" id="1_megfd"]
[ext_resource type="Texture2D" uid="uid://67sbqmxqrpgo" path="res://Assets/Low Exp Drop.png" id="2_ouo6t"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_fmbg5"]
size = Vector2(2, 2)

[node name="ExpDrop" type="Area2D"]
collision_layer = 64
collision_mask = 0
script = ExtResource("1_megfd")
magnet_speed = 100.0
magnet_activation_distance = 50.0

[node name="Sprite2D" type="Sprite2D" parent="."]
modulate = Color(0.171875, 1, 0, 1)
position = Vector2(0, -3.8147e-06)
scale = Vector2(0.18, 0.13)
texture = ExtResource("2_ouo6t")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_fmbg5")
 
==== H:\Game Creation\testing-environ\Scenes\Pickups\exp_tier_2_large.tscn ==== 
[gd_scene load_steps=4 format=3 uid="uid://cub0dkjb1b5ju"]

[ext_resource type="Script" uid="uid://bu2l05s10uh8b" path="res://Scripts/exp_drop.gd" id="1_icj2s"]
[ext_resource type="Texture2D" uid="uid://dw53wqe7c7b60" path="res://Assets/Drops/Experience/Exp Tier 2 Red.png" id="2_icj2s"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_fmbg5"]
size = Vector2(2, 2)

[node name="ExpDrop" type="Area2D"]
collision_layer = 64
collision_mask = 0
script = ExtResource("1_icj2s")
experience_value = 21
magnet_speed = 100.0
magnet_activation_distance = 50.0

[node name="Sprite2D" type="Sprite2D" parent="."]
position = Vector2(0, -3.8147e-06)
scale = Vector2(0.2, 0.143)
texture = ExtResource("2_icj2s")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_fmbg5")
 
==== H:\Game Creation\testing-environ\Scenes\Pickups\exp_tier_2_medium.tscn ==== 
[gd_scene load_steps=4 format=3 uid="uid://clkiyut3512hv"]

[ext_resource type="Script" uid="uid://bu2l05s10uh8b" path="res://Scripts/exp_drop.gd" id="1_cdad7"]
[ext_resource type="Texture2D" uid="uid://cj02lxxfgnk8e" path="res://Assets/Drops/Experience/Exp Tier 2 Blue.png" id="2_hklmq"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_fmbg5"]
size = Vector2(2, 2)

[node name="ExpDrop" type="Area2D"]
collision_layer = 64
collision_mask = 0
script = ExtResource("1_cdad7")
experience_value = 16
magnet_speed = 100.0
magnet_activation_distance = 50.0

[node name="Sprite2D" type="Sprite2D" parent="."]
modulate = Color(0.171875, 1, 0, 1)
position = Vector2(0, -3.8147e-06)
scale = Vector2(0.18, 0.129)
texture = ExtResource("2_hklmq")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_fmbg5")
 
==== H:\Game Creation\testing-environ\Scenes\Pickups\exp_tier_2_small.tscn ==== 
[gd_scene load_steps=4 format=3 uid="uid://dcvcwoxeugnko"]

[ext_resource type="Script" uid="uid://bu2l05s10uh8b" path="res://Scripts/exp_drop.gd" id="1_0qm24"]
[ext_resource type="Texture2D" uid="uid://cj02lxxfgnk8e" path="res://Assets/Drops/Experience/Exp Tier 2 Blue.png" id="2_0qm24"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_fmbg5"]
size = Vector2(2, 2)

[node name="ExpDrop" type="Area2D"]
collision_layer = 64
collision_mask = 0
script = ExtResource("1_0qm24")
experience_value = 12
magnet_speed = 100.0
magnet_activation_distance = 50.0

[node name="Sprite2D" type="Sprite2D" parent="."]
position = Vector2(0, -3.8147e-06)
scale = Vector2(0.18, 0.129)
texture = ExtResource("2_0qm24")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_fmbg5")
 
==== H:\Game Creation\testing-environ\Scenes\Pickups\exp_tier_3_large.tscn ==== 
[gd_scene load_steps=4 format=3 uid="uid://4qr15fyet5ep"]

[ext_resource type="Script" uid="uid://bu2l05s10uh8b" path="res://Scripts/exp_drop.gd" id="1_67cja"]
[ext_resource type="Texture2D" uid="uid://bf6k1sm8h8570" path="res://Assets/Drops/Experience/Exp Tier 3 Red.png" id="2_67cja"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_fmbg5"]
size = Vector2(2, 2)

[node name="ExpDrop" type="Area2D"]
collision_layer = 64
collision_mask = 0
script = ExtResource("1_67cja")
experience_value = 42
magnet_speed = 100.0
magnet_activation_distance = 50.0

[node name="Sprite2D" type="Sprite2D" parent="."]
position = Vector2(0, -3.8147e-06)
scale = Vector2(0.16, 0.115)
texture = ExtResource("2_67cja")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_fmbg5")
 
==== H:\Game Creation\testing-environ\Scenes\Pickups\exp_tier_3_medium.tscn ==== 
[gd_scene load_steps=4 format=3 uid="uid://b56tuf0plfiwk"]

[ext_resource type="Script" uid="uid://bu2l05s10uh8b" path="res://Scripts/exp_drop.gd" id="1_sj4n8"]
[ext_resource type="Texture2D" uid="uid://cjty4eglemg0o" path="res://Assets/Drops/Experience/Exp Tier 3 Blue.png" id="2_sj4n8"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_fmbg5"]
size = Vector2(2, 2)

[node name="ExpDrop" type="Area2D"]
collision_layer = 64
collision_mask = 0
script = ExtResource("1_sj4n8")
experience_value = 35
magnet_speed = 100.0
magnet_activation_distance = 50.0

[node name="Sprite2D" type="Sprite2D" parent="."]
modulate = Color(0.171875, 1, 0, 1)
position = Vector2(0, -3.8147e-06)
scale = Vector2(0.17, 0.122)
texture = ExtResource("2_sj4n8")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_fmbg5")
 
==== H:\Game Creation\testing-environ\Scenes\Pickups\exp_tier_3_small.tscn ==== 
[gd_scene load_steps=4 format=3 uid="uid://cqowipbk5vx62"]

[ext_resource type="Script" uid="uid://bu2l05s10uh8b" path="res://Scripts/exp_drop.gd" id="1_mj30i"]
[ext_resource type="Texture2D" uid="uid://cjty4eglemg0o" path="res://Assets/Drops/Experience/Exp Tier 3 Blue.png" id="2_mj30i"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_fmbg5"]
size = Vector2(2, 2)

[node name="ExpDrop" type="Area2D"]
collision_layer = 64
collision_mask = 0
script = ExtResource("1_mj30i")
experience_value = 28
magnet_speed = 100.0
magnet_activation_distance = 50.0

[node name="Sprite2D" type="Sprite2D" parent="."]
position = Vector2(0, -3.8147e-06)
scale = Vector2(0.17, 0.123)
texture = ExtResource("2_mj30i")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_fmbg5")
 
==== H:\Game Creation\testing-environ\Scenes\Pickups\exp_tier_4_large.tscn ==== 
[gd_scene load_steps=4 format=3 uid="uid://5erjfyhiymdm"]

[ext_resource type="Script" uid="uid://bu2l05s10uh8b" path="res://Scripts/exp_drop.gd" id="1_nvg3t"]
[ext_resource type="Texture2D" uid="uid://ppsjohttjifb" path="res://Assets/Drops/Experience/Exp Tier 4 Red.png" id="2_nvg3t"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_fmbg5"]
size = Vector2(2, 2)

[node name="ExpDrop" type="Area2D"]
collision_layer = 64
collision_mask = 0
script = ExtResource("1_nvg3t")
experience_value = 82
magnet_speed = 100.0
magnet_activation_distance = 50.0

[node name="Sprite2D" type="Sprite2D" parent="."]
position = Vector2(0, -3.8147e-06)
scale = Vector2(0.08, 0.059)
texture = ExtResource("2_nvg3t")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_fmbg5")
 
==== H:\Game Creation\testing-environ\Scenes\Pickups\exp_tier_4_medium.tscn ==== 
[gd_scene load_steps=4 format=3 uid="uid://c1kivnkuyr02c"]

[ext_resource type="Script" uid="uid://bu2l05s10uh8b" path="res://Scripts/exp_drop.gd" id="1_apmue"]
[ext_resource type="Texture2D" uid="uid://dyxtgae1sgssr" path="res://Assets/Drops/Experience/Exp Tier 4 Green.png" id="2_apmue"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_fmbg5"]
size = Vector2(2, 2)

[node name="ExpDrop" type="Area2D"]
collision_layer = 64
collision_mask = 0
script = ExtResource("1_apmue")
experience_value = 67
magnet_speed = 100.0
magnet_activation_distance = 50.0

[node name="Sprite2D" type="Sprite2D" parent="."]
position = Vector2(0, -3.8147e-06)
scale = Vector2(0.08, 0.059)
texture = ExtResource("2_apmue")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_fmbg5")
 
==== H:\Game Creation\testing-environ\Scenes\Pickups\exp_tier_4_small.tscn ==== 
[gd_scene load_steps=4 format=3 uid="uid://3ghrujy6rjti"]

[ext_resource type="Script" uid="uid://bu2l05s10uh8b" path="res://Scripts/exp_drop.gd" id="1_osjiy"]
[ext_resource type="Texture2D" uid="uid://ce4ypcuj171ay" path="res://Assets/Drops/Experience/Exp Tier 4 Blue.png" id="2_osjiy"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_fmbg5"]
size = Vector2(2, 2)

[node name="ExpDrop" type="Area2D"]
collision_layer = 64
collision_mask = 0
script = ExtResource("1_osjiy")
experience_value = 54
magnet_speed = 100.0
magnet_activation_distance = 50.0

[node name="Sprite2D" type="Sprite2D" parent="."]
position = Vector2(0, -3.8147e-06)
scale = Vector2(0.08, 0.058)
texture = ExtResource("2_osjiy")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_fmbg5")
 
==== H:\Game Creation\testing-environ\Scenes\Pickups\exp_tier_5_large.tscn ==== 
[gd_scene load_steps=4 format=3 uid="uid://byqf4gbboeygk"]

[ext_resource type="Script" uid="uid://bu2l05s10uh8b" path="res://Scripts/exp_drop.gd" id="1_glkmd"]
[ext_resource type="Texture2D" uid="uid://bcxgccs7j6uib" path="res://Assets/Drops/Experience/Exp Tier 5 Red.png" id="2_glkmd"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_fmbg5"]
size = Vector2(2, 2)

[node name="ExpDrop" type="Area2D"]
collision_layer = 64
collision_mask = 0
script = ExtResource("1_glkmd")
experience_value = 180
magnet_speed = 100.0
magnet_activation_distance = 50.0

[node name="Sprite2D" type="Sprite2D" parent="."]
position = Vector2(0, -3.8147e-06)
scale = Vector2(0.12, 0.089)
texture = ExtResource("2_glkmd")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_fmbg5")
 
==== H:\Game Creation\testing-environ\Scenes\Pickups\exp_tier_5_medium.tscn ==== 
[gd_scene load_steps=4 format=3 uid="uid://cfk474bi6kate"]

[ext_resource type="Script" uid="uid://bu2l05s10uh8b" path="res://Scripts/exp_drop.gd" id="1_hjo4s"]
[ext_resource type="Texture2D" uid="uid://dpeawmt5wod7n" path="res://Assets/Drops/Experience/Exp Tier 5 Green.png" id="2_hjo4s"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_fmbg5"]
size = Vector2(2, 2)

[node name="ExpDrop" type="Area2D"]
collision_layer = 64
collision_mask = 0
script = ExtResource("1_hjo4s")
experience_value = 140
magnet_speed = 100.0
magnet_activation_distance = 50.0

[node name="Sprite2D" type="Sprite2D" parent="."]
position = Vector2(0, -3.8147e-06)
scale = Vector2(0.11, 0.081)
texture = ExtResource("2_hjo4s")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_fmbg5")
 
==== H:\Game Creation\testing-environ\Scenes\Pickups\exp_tier_5_small.tscn ==== 
[gd_scene load_steps=4 format=3 uid="uid://bomhmi5nrqr0o"]

[ext_resource type="Script" uid="uid://bu2l05s10uh8b" path="res://Scripts/exp_drop.gd" id="1_rrdpc"]
[ext_resource type="Texture2D" uid="uid://b8stk6rcwordy" path="res://Assets/Drops/Experience/Exp Tier 5 Blue.png" id="2_rrdpc"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_fmbg5"]
size = Vector2(2, 2)

[node name="ExpDrop" type="Area2D"]
collision_layer = 64
collision_mask = 0
script = ExtResource("1_rrdpc")
experience_value = 105
magnet_speed = 100.0
magnet_activation_distance = 50.0

[node name="Sprite2D" type="Sprite2D" parent="."]
position = Vector2(0, -3.8147e-06)
scale = Vector2(0.11, 0.081)
texture = ExtResource("2_rrdpc")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_fmbg5")
 
==== H:\Game Creation\testing-environ\Scenes\Pickups\exp_tier_6_large.tscn ==== 
[gd_scene load_steps=4 format=3 uid="uid://bfpxqgb4o774y"]

[ext_resource type="Script" uid="uid://bu2l05s10uh8b" path="res://Scripts/exp_drop.gd" id="1_oevp5"]
[ext_resource type="Texture2D" uid="uid://cxcgajc021mcd" path="res://Assets/Drops/Experience/Exp Tier 6 Red.png" id="2_oevp5"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_fmbg5"]
size = Vector2(2, 2)

[node name="ExpDrop" type="Area2D"]
collision_layer = 64
collision_mask = 0
script = ExtResource("1_oevp5")
experience_value = 360
magnet_speed = 100.0
magnet_activation_distance = 50.0

[node name="Sprite2D" type="Sprite2D" parent="."]
position = Vector2(0, -3.8147e-06)
scale = Vector2(0.11, 0.081)
texture = ExtResource("2_oevp5")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_fmbg5")
 
==== H:\Game Creation\testing-environ\Scenes\Pickups\exp_tier_6_medium.tscn ==== 
[gd_scene load_steps=4 format=3 uid="uid://cutb5ou2fgdi"]

[ext_resource type="Script" uid="uid://bu2l05s10uh8b" path="res://Scripts/exp_drop.gd" id="1_dck7k"]
[ext_resource type="Texture2D" uid="uid://dqcctcqafrsp5" path="res://Assets/Drops/Experience/Exp Tier 6 Green.png" id="2_dck7k"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_fmbg5"]
size = Vector2(2, 2)

[node name="ExpDrop" type="Area2D"]
collision_layer = 64
collision_mask = 0
script = ExtResource("1_dck7k")
experience_value = 280
magnet_speed = 100.0
magnet_activation_distance = 50.0

[node name="Sprite2D" type="Sprite2D" parent="."]
position = Vector2(0, -3.8147e-06)
scale = Vector2(0.11, 0.081)
texture = ExtResource("2_dck7k")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_fmbg5")
 
==== H:\Game Creation\testing-environ\Scenes\Pickups\exp_tier_6_small.tscn ==== 
[gd_scene load_steps=4 format=3 uid="uid://d0togekvjalf5"]

[ext_resource type="Script" uid="uid://bu2l05s10uh8b" path="res://Scripts/exp_drop.gd" id="1_tt28s"]
[ext_resource type="Texture2D" uid="uid://dk2lux4k18s2s" path="res://Assets/Drops/Experience/Exp Tier 6 Blue.png" id="2_tt28s"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_fmbg5"]
size = Vector2(2, 2)

[node name="ExpDrop" type="Area2D"]
collision_layer = 64
collision_mask = 0
script = ExtResource("1_tt28s")
experience_value = 220
magnet_speed = 100.0
magnet_activation_distance = 50.0

[node name="Sprite2D" type="Sprite2D" parent="."]
position = Vector2(0, -3.8147e-06)
scale = Vector2(0.11, 0.081)
texture = ExtResource("2_tt28s")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_fmbg5")
 
==== H:\Game Creation\testing-environ\Scenes\Pickups\exp_tier_6_special.tscn ==== 
[gd_scene load_steps=4 format=3 uid="uid://745o75mmknb0"]

[ext_resource type="Script" uid="uid://bu2l05s10uh8b" path="res://Scripts/exp_drop.gd" id="1_d3ebo"]
[ext_resource type="Texture2D" uid="uid://c8uteuxmtylbj" path="res://Assets/Drops/Experience/Exp Tier 6 Purple.png" id="2_drco5"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_fmbg5"]
size = Vector2(2, 2)

[node name="ExpDrop" type="Area2D"]
collision_layer = 64
collision_mask = 0
script = ExtResource("1_d3ebo")
experience_value = 500
magnet_speed = 100.0
magnet_activation_distance = 50.0

[node name="Sprite2D" type="Sprite2D" parent="."]
position = Vector2(0, -3.8147e-06)
scale = Vector2(0.125, 0.092)
texture = ExtResource("2_drco5")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_fmbg5")
 
==== H:\Game Creation\testing-environ\Scenes\Player\MeleeAimingDot.tscn ==== 
[gd_scene load_steps=3 format=3 uid="uid://b61cokdldirn3"]

[ext_resource type="Script" uid="uid://bwat8ks6yp56o" path="res://Scenes/MeleeAimingDot.gd" id="1_8nnd5"]
[ext_resource type="Texture2D" uid="uid://ccbl0mtkxtnkt" path="res://Assets/Targeting Dot for Melee.png" id="2_aq82y"]

[node name="MeleeAimingDot" type="Node2D"]
script = ExtResource("1_8nnd5")

[node name="DotVisual" type="Sprite2D" parent="."]
scale = Vector2(0.5, 0.5)
texture = ExtResource("2_aq82y")
 
==== H:\Game Creation\testing-environ\Scenes\Player\Components\WeaponManager.tscn ==== 
[gd_scene load_steps=2 format=3 uid="uid://cjnf0osd35xn1"]

[ext_resource type="Script" uid="uid://dxe5g1kytk11u" path="res://Scripts/WeaponManager.gd" id="1_apnv1"]

[node name="WeaponManager" type="Node"]
script = ExtResource("1_apnv1")
 
==== H:\Game Creation\testing-environ\Scenes\UI\TestStartMenu.gd ==== 
# TestStartMenu.gd
# Attach this script to the root Control node of your TestStartMenu.tscn scene.
extends Control

# --- Node References (Ensure these paths match your TestStartMenu.tscn structure) ---
@onready var class_option_button: OptionButton = $MarginContainer/VBoxContainer/ClassOptionButton
@onready var weapon_option_button: OptionButton = $MarginContainer/VBoxContainer/WeaponOptionButton
@onready var start_game_button: Button = $MarginContainer/VBoxContainer/StartGameButton

# --- Data ---
var class_weapon_options: Dictionary = {
	PlayerCharacter.BasicClass.WARRIOR: [
		{"id": "warrior_scythe", "title": "Scythe"},
		{"id": "warrior_crossbow", "title": "Crossbow"},
	],
	PlayerCharacter.BasicClass.KNIGHT: [ 
		{"id": "knight_longsword", "title": "Longsword"},
		{"id": "knight_shield_bash", "title": "Shield Bash"},
	],
	PlayerCharacter.BasicClass.ROGUE: [ 
		{"id": "rogue_bow", "title": "Shortbow"},
		{"id": "rogue_dagger", "title": "Dagger Strike"},
	],
	PlayerCharacter.BasicClass.WIZARD: [
		{"id": "wizard_spark", "title": "Spark"},
		{"id": "wizard_frozen_territory", "title": "Frozen Territory"},
	],
	PlayerCharacter.BasicClass.DRUID: [ 
		{"id": "druid_vine_whip", "title": "Vine Whip"},
		{"id": "druid_torrent", "title": "Torrent"},
	],
	PlayerCharacter.BasicClass.CONJURER: [ # NEW
		{"id": "conjurer_lesser_spirit", "title": "Lesser Spirit"},
		{"id": "conjurer_moth_golem", "title": "Moth Golem"},
	]
}

var selected_class_enum_val: PlayerCharacter.BasicClass = PlayerCharacter.BasicClass.NONE
var selected_weapon_id: String = ""

const MAIN_GAME_SCENE_PATH = "res://Scenes/game.tscn" # ADJUST THIS PATH if needed

func _ready():
	if not class_option_button or not weapon_option_button or not start_game_button:
		print("ERROR (TestStartMenu): UI nodes not found. Check paths.")
		return

	_populate_class_options()
	if not class_option_button.is_connected("item_selected", Callable(self, "_on_class_option_button_item_selected")):
		class_option_button.item_selected.connect(self._on_class_option_button_item_selected)
	
	if not weapon_option_button.is_connected("item_selected", Callable(self, "_on_weapon_option_button_item_selected")):
		weapon_option_button.item_selected.connect(self._on_weapon_option_button_item_selected)

	if not start_game_button.is_connected("pressed", Callable(self, "_on_start_game_button_pressed")):
		start_game_button.pressed.connect(self._on_start_game_button_pressed)
	
	# Select the first available actual class by default if "None" is the first item
	if class_option_button.get_item_count() > 0:
		var initial_selection_index = 0
		if class_option_button.get_item_id(0) == PlayerCharacter.BasicClass.NONE and class_option_button.get_item_count() > 1:
			initial_selection_index = 1 # Select the first actual class (e.g., Warrior)
		
		class_option_button.select(initial_selection_index)
		_on_class_option_button_item_selected(initial_selection_index) # Trigger weapon list update


func _populate_class_options():
	if not class_option_button: return
	class_option_button.clear()
	
	# Add "None" option first if you want a true default without a specific class
	# class_option_button.add_item("Default (No Specific Class)", PlayerCharacter.BasicClass.NONE) 

	var basic_class_keys = PlayerCharacter.BasicClass.keys()
	for i in range(basic_class_keys.size()):
		var class_name_str = basic_class_keys[i]
		var class_enum_val_int = PlayerCharacter.BasicClass.values()[i]
		
		if class_enum_val_int == PlayerCharacter.BasicClass.NONE: # Skip adding "NONE" as a selectable class here
			continue 
			
		class_option_button.add_item(class_name_str.capitalize(), class_enum_val_int)


func _on_class_option_button_item_selected(index: int):
	if not class_option_button or not weapon_option_button: return
	
	selected_class_enum_val = class_option_button.get_item_id(index) as PlayerCharacter.BasicClass
	# print("DEBUG (TestStartMenu): Class selected - Index: ", index, " Enum Value: ", selected_class_enum_val, " (Name: ", PlayerCharacter.BasicClass.keys()[selected_class_enum_val], ")")
	
	weapon_option_button.clear()
	selected_weapon_id = "" 
	
	if class_weapon_options.has(selected_class_enum_val) and not class_weapon_options[selected_class_enum_val].is_empty():
		var weapons_for_class = class_weapon_options[selected_class_enum_val]
		weapon_option_button.disabled = false
		for i in range(weapons_for_class.size()):
			var weapon_info = weapons_for_class[i]
			weapon_option_button.add_item(weapon_info.title, i) # Use weapon_info.id as metadata if needed later
		if weapon_option_button.get_item_count() > 0:
			weapon_option_button.select(0) 
			_on_weapon_option_button_item_selected(0) # Ensure first weapon is selected by default
	else:
		weapon_option_button.add_item("No Weapons Defined", -1) # -1 or some other invalid ID
		weapon_option_button.disabled = true


func _on_weapon_option_button_item_selected(index: int):
	if not weapon_option_button: return
	if index < 0 or index >= weapon_option_button.get_item_count(): # Guard against invalid index
		selected_weapon_id = ""
		return

	var item_id_in_optionbutton = weapon_option_button.get_item_id(index) # This is the index in the current list
	
	if class_weapon_options.has(selected_class_enum_val):
		var weapons_for_class = class_weapon_options[selected_class_enum_val]
		if item_id_in_optionbutton >= 0 and item_id_in_optionbutton < weapons_for_class.size():
			selected_weapon_id = weapons_for_class[item_id_in_optionbutton].id
			# print("DEBUG (TestStartMenu): Weapon selected - Weapon ID: '", selected_weapon_id, "'")
		else:
			selected_weapon_id = "" # Should not happen if list is populated correctly
	else:
		selected_weapon_id = ""


func _on_start_game_button_pressed():
	# Ensure a valid weapon is selected if a class with weapons is chosen
	if selected_class_enum_val != PlayerCharacter.BasicClass.NONE and \
	   class_weapon_options.has(selected_class_enum_val) and \
	   not class_weapon_options[selected_class_enum_val].is_empty() and \
	   selected_weapon_id.is_empty():
		
		if weapon_option_button.get_item_count() > 0 and weapon_option_button.get_item_id(0) != -1 :
			weapon_option_button.select(0) 
			_on_weapon_option_button_item_selected(0) 
	
	TestStartSettings.set_test_start_conditions(selected_class_enum_val, selected_weapon_id)
	
	var error = get_tree().change_scene_to_file(MAIN_GAME_SCENE_PATH)
	if error != OK:
		print("ERROR (TestStartMenu): Failed to change scene to '", MAIN_GAME_SCENE_PATH, "'. Error code: ", error)
 
==== H:\Game Creation\testing-environ\Scenes\UI\DebugPanel.tscn ==== 
[gd_scene load_steps=2 format=3 uid="uid://bwu3a6bg3dhq7"]

[ext_resource type="Script" uid="uid://whv67jud4ii7" path="res://Scripts/UI/DebugPanel.gd" id="1_vrwrv"]

[node name="DebugPanel" type="CanvasLayer"]
script = ExtResource("1_vrwrv")

[node name="MainPanel" type="Panel" parent="."]
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -250.0
offset_top = -263.0
offset_right = 237.0
offset_bottom = 289.0
grow_horizontal = 2
grow_vertical = 2

[node name="TabContainer" type="TabContainer" parent="MainPanel"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="MarginContainer" type="MarginContainer" parent="."]
visible = false
offset_top = 243.0
offset_right = 154.0
offset_bottom = 243.0

[node name="VBoxContainer" type="VBoxContainer" parent="MarginContainer"]
layout_mode = 2

[node name="CurrentDDSLabel" type="Label" parent="MarginContainer/VBoxContainer"]
layout_mode = 2
text = "DDS: 0"

[node name="ElapsedTimeLabel" type="Label" parent="MarginContainer/VBoxContainer"]
layout_mode = 2
text = "Time: 00:00:00"

[node name="HardcoreStatusLabel" type="Label" parent="MarginContainer/VBoxContainer"]
layout_mode = 2
text = "Hardcore: No"

[node name="SpawnIntervalLabel" type="Label" parent="MarginContainer/VBoxContainer"]
layout_mode = 2
text = "Spawn Int: 0.0s"

[node name="TargetEnemyCountLabel" type="Label" parent="MarginContainer/VBoxContainer"]
layout_mode = 2
text = "Target Enemies: 0"

[node name="ActiveEnemyCountLabel" type="Label" parent="MarginContainer/VBoxContainer"]
layout_mode = 2
text = "Avtive Enemies: 0"

[node name="ThreatPoolLabel" type="Label" parent="MarginContainer/VBoxContainer"]
layout_mode = 2
text = "Threat Pool: 0"

[node name="ActivePoolLabel" type="Label" parent="MarginContainer/VBoxContainer"]
layout_mode = 2
text = "Active Pool: [empty]"

[node name="PlayerLevelLabel" type="Label" parent="MarginContainer/VBoxContainer"]
layout_mode = 2
text = "Player Lvl: 1"

[node name="SetDDSLineEdit" type="LineEdit" parent="MarginContainer/VBoxContainer"]
layout_mode = 2
placeholder_text = "Enter DDS"

[node name="SetDDSButton" type="Button" parent="MarginContainer/VBoxContainer"]
layout_mode = 2
text = "Set
"
 
==== H:\Game Creation\testing-environ\Scenes\UI\GameOverScreen.tscn ==== 
[gd_scene load_steps=2 format=3 uid="uid://dk74ntd1fcan8"]

[ext_resource type="Script" uid="uid://blqx4sfg7ema" path="res://Scripts/GameOverScreen.gd" id="1_d4r0f"]

[node name="GameOverScreen" type="CanvasLayer"]
script = ExtResource("1_d4r0f")

[node name="BackgroundRect" type="ColorRect" parent="."]
z_index = 7
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0, 0, 0, 0.686275)

[node name="MessageLabel" type="Label" parent="."]
z_index = 7
anchors_preset = 14
anchor_top = 0.5
anchor_right = 1.0
anchor_bottom = 0.5
offset_top = -304.0
offset_bottom = 44.0
grow_horizontal = 2
grow_vertical = 2
theme_override_colors/font_color = Color(0.443137, 0, 0, 1)
theme_override_colors/font_shadow_color = Color(0.85098, 0, 0, 0.890196)
theme_override_font_sizes/font_size = 64
text = "YOU DIED"
horizontal_alignment = 1
vertical_alignment = 1

[node name="RestartButton" type="Button" parent="."]
z_index = 7
anchors_preset = 14
anchor_top = 0.5
anchor_right = 1.0
anchor_bottom = 0.5
offset_left = 450.0
offset_top = -24.0
offset_right = -446.0
offset_bottom = 29.0
grow_horizontal = 2
grow_vertical = 2
theme_override_font_sizes/font_size = 32
text = "Restart"
 
==== H:\Game Creation\testing-environ\Scenes\UI\LevelUpScreen.tscn ==== 
[gd_scene load_steps=3 format=3 uid="uid://b1yspb86yds2u"]

[ext_resource type="Script" uid="uid://bg8m2as17y6sb" path="res://Scripts/UI/LevelUpScreen.gd" id="1_gjcfp"]
[ext_resource type="PackedScene" uid="uid://iyt206rb01yj" path="res://Scenes/UI/UpgradeCard.tscn" id="2_t6rig"]

[node name="LevelUpScreen" type="CanvasLayer"]
layer = 11
script = ExtResource("1_gjcfp")

[node name="DimBackground" type="ColorRect" parent="."]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0, 0, 0, 0.196078)

[node name="CardsContainer" type="HBoxContainer" parent="."]
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -375.0
offset_top = -175.0
offset_right = 375.0
offset_bottom = 175.0
grow_horizontal = 2
grow_vertical = 2
alignment = 1

[node name="UpgradeCard" parent="CardsContainer" instance=ExtResource("2_t6rig")]
layout_mode = 2

[node name="UpgradeCard2" parent="CardsContainer" instance=ExtResource("2_t6rig")]
layout_mode = 2

[node name="UpgradeCard3" parent="CardsContainer" instance=ExtResource("2_t6rig")]
layout_mode = 2
 
==== H:\Game Creation\testing-environ\Scenes\UI\NewLevelUpScreen.tscn ==== 
[gd_scene load_steps=2 format=3 uid="uid://c6r1ot6xo36kd"]

[ext_resource type="Script" uid="uid://cponlx207pav8" path="res://Scripts/UI/NewLevelUpScreen.gd" id="1_arucj"]

[node name="NewLevelUpScreen" type="CanvasLayer"]
script = ExtResource("1_arucj")

[node name="DimBackground" type="ColorRect" parent="."]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0.08, 0.08, 0.08, 0.501961)

[node name="CardsContainer" type="HBoxContainer" parent="."]
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -20.0
offset_top = -20.0
offset_right = 20.0
offset_bottom = 20.0
grow_horizontal = 2
grow_vertical = 2
alignment = 1
 
==== H:\Game Creation\testing-environ\Scenes\UI\NewUpgradeCard.tscn ==== 
[gd_scene load_steps=2 format=3 uid="uid://n68ynnic24d0"]

[ext_resource type="Script" uid="uid://c361ou22tttj2" path="res://Scripts/UI/NewUpgradeCard.gd" id="1_e78r6"]

[node name="NewUpgradeCard" type="PanelContainer"]
custom_minimum_size = Vector2(220, 400)
script = ExtResource("1_e78r6")

[node name="CardLayout" type="VBoxContainer" parent="."]
custom_minimum_size = Vector2(220, 440)
layout_mode = 2

[node name="TitleLabel" type="Label" parent="CardLayout"]
custom_minimum_size = Vector2(0, 24)
layout_mode = 2
horizontal_alignment = 1

[node name="IconTextureRect" type="TextureRect" parent="CardLayout"]
custom_minimum_size = Vector2(64, 64)
layout_mode = 2
expand_mode = 5
stretch_mode = 3

[node name="DescriptionLabel" type="Label" parent="CardLayout"]
custom_minimum_size = Vector2(0, 80)
layout_mode = 2
theme_override_font_sizes/font_size = 12
autowrap_mode = 2

[node name="SelectButton" type="Button" parent="CardLayout"]
custom_minimum_size = Vector2(0, 32)
layout_mode = 2
size_flags_vertical = 8
text = "Choose"
 
==== H:\Game Creation\testing-environ\Scenes\UI\TestStartMenu.tscn ==== 
[gd_scene load_steps=2 format=3 uid="uid://fi2525215vcf"]

[ext_resource type="Script" uid="uid://cy0pphpo42xmb" path="res://Scenes/UI/TestStartMenu.gd" id="1_xpprq"]

[node name="TestStartMenu" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_xpprq")

[node name="MarginContainer" type="MarginContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/margin_left = 20
theme_override_constants/margin_top = 20
theme_override_constants/margin_right = 20
theme_override_constants/margin_bottom = 20

[node name="VBoxContainer" type="VBoxContainer" parent="MarginContainer"]
layout_mode = 2
theme_override_constants/separation = 10

[node name="ClassLabel" type="Label" parent="MarginContainer/VBoxContainer"]
custom_minimum_size = Vector2(0, 20)
layout_mode = 2
text = "Starting Class:"

[node name="ClassOptionButton" type="OptionButton" parent="MarginContainer/VBoxContainer"]
layout_mode = 2

[node name="WeaponLabel" type="Label" parent="MarginContainer/VBoxContainer"]
custom_minimum_size = Vector2(0, 20)
layout_mode = 2
text = "Choose Starting Weapon:"

[node name="WeaponOptionButton" type="OptionButton" parent="MarginContainer/VBoxContainer"]
layout_mode = 2

[node name="StartGameButton" type="Button" parent="MarginContainer/VBoxContainer"]
layout_mode = 2
text = "Start Game"
 
==== H:\Game Creation\testing-environ\Scenes\UI\UpgradeCard.tscn ==== 
[gd_scene load_steps=2 format=3 uid="uid://iyt206rb01yj"]

[ext_resource type="Script" uid="uid://c5ipyb574afvt" path="res://Scripts/UpgradeCard.gd" id="1_bh2l2"]

[node name="UpgradeCard" type="PanelContainer"]
custom_minimum_size = Vector2(150, 100)
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -75.0
offset_top = -125.0
offset_right = 75.0
offset_bottom = 125.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_bh2l2")

[node name="CardLayout" type="VBoxContainer" parent="."]
custom_minimum_size = Vector2(64, 64)
layout_mode = 2
mouse_filter = 0

[node name="TitleLabel" type="Label" parent="CardLayout"]
custom_minimum_size = Vector2(32, 32)
layout_mode = 2
size_flags_vertical = 0
mouse_filter = 0
text = "Title"
horizontal_alignment = 1

[node name="DescriptionLabel" type="Label" parent="CardLayout"]
custom_minimum_size = Vector2(32, 32)
layout_mode = 2
mouse_filter = 0
text = "Description"
horizontal_alignment = 1
autowrap_mode = 3

[node name="IconTextureRect" type="TextureRect" parent="CardLayout"]
custom_minimum_size = Vector2(32, 32)
layout_mode = 2
mouse_filter = 0
stretch_mode = 5

[node name="SelectButton" type="Button" parent="CardLayout"]
custom_minimum_size = Vector2(32, 32)
layout_mode = 2
text = "Choose"
 
==== H:\Game Creation\testing-environ\Scenes\Weapons\TorrentAttack.gd ==== 
extends Area2D

var final_damage_amount: int = 18
var final_applied_aoe_scale: Vector2 = Vector2(1.0, 1.0) 

@onready var animated_sprite: AnimatedSprite2D = get_node_or_null("AnimatedSprite") as AnimatedSprite2D
@onready var effect_lifetime_timer: Timer = get_node_or_null("EffectLifetimeTimer") as Timer 
@onready var collision_shape: CollisionShape2D = get_node_or_null("CollisionShape2D") as CollisionShape2D 

const TORRENT_ANIMATION_NAME = "erupt" 
const MAX_EFFECT_DURATION: float = 2.0 
var actual_effect_duration: float = MAX_EFFECT_DURATION

var _enemies_hit_this_attack: Array[Node2D] = [] 
var _stats_have_been_set: bool = false
var _received_stats: Dictionary = {}

func _ready():
	if not self.is_connected("body_entered", Callable(self, "_on_body_entered")):
		self.body_entered.connect(self._on_body_entered)

	if not is_instance_valid(animated_sprite): print("WARNING (TorrentAttack): AnimatedSprite missing.")
	if not is_instance_valid(collision_shape): print("WARNING (TorrentAttack): CollisionShape2D missing.")
	
	if not is_instance_valid(effect_lifetime_timer): print("ERROR (TorrentAttack): EffectLifetimeTimer missing!"); call_deferred("queue_free"); return
	else:
		effect_lifetime_timer.process_mode = Node.PROCESS_MODE_ALWAYS
		effect_lifetime_timer.one_shot = true 
		if not effect_lifetime_timer.is_connected("timeout", Callable(self, "queue_free")):
			effect_lifetime_timer.timeout.connect(self.queue_free)
	
	if _stats_have_been_set: _apply_all_stats_and_start_timers()
	else: _apply_visual_scale() 

	if is_instance_valid(animated_sprite):
		if animated_sprite.sprite_frames and animated_sprite.sprite_frames.has_animation(TORRENT_ANIMATION_NAME):
			animated_sprite.play(TORRENT_ANIMATION_NAME) 
		else: print("WARNING (TorrentAttack): Animation '", TORRENT_ANIMATION_NAME, "' not found.")


func set_attack_properties(p_attack_stats: Dictionary): 
	_received_stats = p_attack_stats.duplicate(true)
	_stats_have_been_set = true
	if is_inside_tree(): _apply_all_stats_and_start_timers()

func _apply_all_stats_and_start_timers():
	if not _stats_have_been_set: return
	if not is_instance_valid(effect_lifetime_timer):
		print("ERROR (TorrentAttack): EffectLifetimeTimer not valid in _apply_all_stats_and_start_timers.")
		return

	var base_w_damage = _received_stats.get("damage", 18)
	var p_dmg_mult = _received_stats.get("damage_multiplier", 1.0)
	var p_flat_dmg = _received_stats.get("base_damage_bonus", 0.0)
	final_damage_amount = int(round(base_w_damage * p_dmg_mult + p_flat_dmg))
	
	var weapon_inherent_scl_val = _received_stats.get("inherent_visual_scale", Vector2(1.0, 1.0))
	var weapon_inherent_base_scale: Vector2
	if weapon_inherent_scl_val is Vector2: weapon_inherent_base_scale = weapon_inherent_scl_val
	elif weapon_inherent_scl_val is float: weapon_inherent_base_scale = Vector2(weapon_inherent_scl_val, weapon_inherent_scl_val)
	else: weapon_inherent_base_scale = Vector2(1.0, 1.0)
	
	var p_aoe_mult = _received_stats.get("aoe_area_multiplier", 1.0) 
	final_applied_aoe_scale.x = weapon_inherent_base_scale.x * p_aoe_mult
	final_applied_aoe_scale.y = weapon_inherent_base_scale.y * p_aoe_mult
	
	var p_effect_dur_mult = _received_stats.get("effect_duration_multiplier", 1.0)
	var base_effect_duration = _received_stats.get("base_effect_duration", MAX_EFFECT_DURATION) 
	actual_effect_duration = base_effect_duration * p_effect_dur_mult 
	
	effect_lifetime_timer.wait_time = actual_effect_duration 
	if not effect_lifetime_timer.is_stopped(): effect_lifetime_timer.stop()
	effect_lifetime_timer.start()

	var attack_speed_multiplier = _received_stats.get("attack_speed_multiplier", 1.0) 
	if attack_speed_multiplier <= 0: attack_speed_multiplier = 0.01
	if is_instance_valid(animated_sprite): 
		animated_sprite.speed_scale = attack_speed_multiplier
		if not animated_sprite.is_playing() and animated_sprite.sprite_frames and animated_sprite.sprite_frames.has_animation(TORRENT_ANIMATION_NAME):
			animated_sprite.play(TORRENT_ANIMATION_NAME)
	
	_apply_visual_scale()

func _apply_visual_scale():
	if is_instance_valid(animated_sprite): animated_sprite.scale = final_applied_aoe_scale
	if is_instance_valid(collision_shape): collision_shape.scale = final_applied_aoe_scale

func _on_body_entered(body: Node2D):
	if is_instance_valid(effect_lifetime_timer) and effect_lifetime_timer.is_stopped(): return 
	if body.is_in_group("enemies") and not _enemies_hit_this_attack.has(body): 
		if body.has_method("take_damage"): body.take_damage(final_damage_amount)
		_enemies_hit_this_attack.append(body) 
 
==== H:\Game Creation\testing-environ\Scenes\Weapons\VineWhipAttack.gd ==== 
extends Node2D

var final_damage_amount: int = 15
var final_aoe_scale: Vector2 = Vector2(1.0, 1.0) 
var facing_direction: Vector2 = Vector2.RIGHT 

@onready var animated_sprite: AnimatedSprite2D = get_node_or_null("AnimatedSprite") as AnimatedSprite2D
@onready var damage_area: Area2D = get_node_or_null("DamageArea") as Area2D
@onready var duration_timer: Timer = get_node_or_null("DurationTimer") as Timer
# @onready var collision_shape: CollisionShape2D = get_node_or_null("DamageArea/CollisionShape2D") as CollisionShape2D # If scaling directly

const WHIP_ANIMATION_NAME = "whip" 
const BASE_ATTACK_DURATION: float = 0.3 
var actual_attack_duration: float = BASE_ATTACK_DURATION
var current_attack_speed_multiplier: float = 1.0

var _enemies_hit_this_attack: Array[Node2D] = [] 
var _stats_have_been_set: bool = false
var _received_stats: Dictionary = {}

func _ready():
	if not is_instance_valid(animated_sprite): print("ERROR (VineWhip): AnimatedSprite missing."); call_deferred("queue_free"); return
	if not is_instance_valid(damage_area): print("ERROR (VineWhip): DamageArea missing."); call_deferred("queue_free"); return
	else:
		if not damage_area.is_connected("body_entered", Callable(self, "_on_damage_area_body_entered")):
			damage_area.body_entered.connect(self._on_damage_area_body_entered)
	if not is_instance_valid(duration_timer): print("ERROR (VineWhip): DurationTimer missing!"); call_deferred("queue_free"); return
	else:
		duration_timer.process_mode = Node.PROCESS_MODE_ALWAYS
		duration_timer.one_shot = true
		if not duration_timer.is_connected("timeout", Callable(self, "queue_free")):
			duration_timer.timeout.connect(self.queue_free)
	
	if _stats_have_been_set: _apply_received_stats_and_start()

# Updated to match the expected signature from WeaponManager for non-ShieldBash melee
func set_attack_properties(p_direction: Vector2, p_attack_stats: Dictionary):
	_received_stats = p_attack_stats.duplicate(true)
	_stats_have_been_set = true
	facing_direction = p_direction.normalized() if p_direction.length_squared() > 0 else Vector2.RIGHT
	
	if is_inside_tree(): 
		_apply_received_stats_and_start()

func _apply_received_stats_and_start():
	if not _stats_have_been_set: return
	if not (is_instance_valid(animated_sprite) and is_instance_valid(damage_area) and is_instance_valid(duration_timer)):
		call_deferred("queue_free"); return

	var base_w_damage = _received_stats.get("damage", 15)
	var p_dmg_mult = _received_stats.get("damage_multiplier", 1.0)
	var p_flat_dmg = _received_stats.get("base_damage_bonus", 0.0)
	final_damage_amount = int(round(base_w_damage * p_dmg_mult + p_flat_dmg))
	
	var weapon_inherent_scl_val = _received_stats.get("inherent_visual_scale", Vector2(1.0, 1.0))
	var weapon_inherent_base_scale: Vector2
	if weapon_inherent_scl_val is Vector2: weapon_inherent_base_scale = weapon_inherent_scl_val
	elif weapon_inherent_scl_val is float: weapon_inherent_base_scale = Vector2(weapon_inherent_scl_val, weapon_inherent_scl_val)
	else: weapon_inherent_base_scale = Vector2(1.0, 1.0)
		
	var p_aoe_mult = _received_stats.get("aoe_area_multiplier", 1.0)
	final_aoe_scale.x = weapon_inherent_base_scale.x * p_aoe_mult
	final_aoe_scale.y = weapon_inherent_base_scale.y * p_aoe_mult
	
	_apply_visual_scale()

	current_attack_speed_multiplier = _received_stats.get("attack_speed_multiplier", 1.0)
	if current_attack_speed_multiplier <= 0: current_attack_speed_multiplier = 0.01
	
	actual_attack_duration = BASE_ATTACK_DURATION / current_attack_speed_multiplier
	duration_timer.wait_time = actual_attack_duration
	if not duration_timer.is_stopped(): duration_timer.stop()
	duration_timer.start()

	if facing_direction != Vector2.ZERO: self.rotation = facing_direction.angle() # Assumes sprite drawn RIGHT
	
	animated_sprite.speed_scale = current_attack_speed_multiplier
	if animated_sprite.sprite_frames and animated_sprite.sprite_frames.has_animation(WHIP_ANIMATION_NAME):
		animated_sprite.play(WHIP_ANIMATION_NAME)

func _apply_visual_scale():
	# For a whip, you might only scale one axis for length (e.g., final_aoe_scale.x)
	# and the other for thickness (e.g., final_aoe_scale.y), or uniformly.
	# This example scales the entire node, which scales children.
	self.scale = final_aoe_scale 
	# If scaling sprite and damage_area individually:
	# if is_instance_valid(animated_sprite): animated_sprite.scale = final_aoe_scale
	# if is_instance_valid(damage_area): damage_area.scale = final_aoe_scale

func _on_damage_area_body_entered(body: Node2D):
	if _enemies_hit_this_attack.has(body): return
	if body.is_in_group("enemies") and body.has_method("take_damage"):
		body.take_damage(final_damage_amount); _enemies_hit_this_attack.append(body)
 
==== H:\Game Creation\testing-environ\Scenes\Weapons\crossbow_bolt_attack.tscn ==== 
[gd_scene load_steps=6 format=3 uid="uid://bf8qkgjsfh4vs"]

[ext_resource type="Script" uid="uid://ct2kx7k3hw4u2" path="res://Scripts/Weapons/CrossbowBoltAttack.gd" id="1_y44gb"]
[ext_resource type="Texture2D" uid="uid://8i35v1dfn385" path="res://Assets/Weapons/Crossbow Animation.png" id="2_ama71"]

[sub_resource type="AtlasTexture" id="AtlasTexture_tox6d"]
atlas = ExtResource("2_ama71")
region = Rect2(0, 0, 128, 32)

[sub_resource type="SpriteFrames" id="SpriteFrames_dij0s"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_tox6d")
}],
"loop": true,
"name": &"fly",
"speed": 5.0
}]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_sjc5q"]
size = Vector2(7.2, 4)

[node name="CrossbowBoltAttack" type="Area2D"]
scale = Vector2(3, 3)
collision_layer = 4
collision_mask = 136
script = ExtResource("1_y44gb")

[node name="AnimatedSprite" type="AnimatedSprite2D" parent="."]
scale = Vector2(0.05, 0.05)
sprite_frames = SubResource("SpriteFrames_dij0s")
animation = &"fly"

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(-2.38419e-08, -3.97364e-08)
shape = SubResource("RectangleShape2D_sjc5q")

[node name="LifetimeTimer" type="Timer" parent="."]
wait_time = 4.0
one_shot = true

[connection signal="body_entered" from="." to="." method="_on_body_entered"]
[connection signal="timeout" from="LifetimeTimer" to="." method="_on_lifetime_timer_timeout"]
 
==== H:\Game Creation\testing-environ\Scenes\Weapons\DaggerAttack.tscn ==== 
[gd_scene load_steps=7 format=3 uid="uid://byqjo2laxv1oh"]

[ext_resource type="Script" uid="uid://d3cmcqt7fg6me" path="res://Scripts/Weapons/DaggerAttack.gd" id="1_jxjxr"]
[ext_resource type="Texture2D" uid="uid://bisow2wldljxc" path="res://Assets/Weapons/Dagger Animation.png" id="2_v5pq4"]

[sub_resource type="AtlasTexture" id="AtlasTexture_jxjxr"]
atlas = ExtResource("2_v5pq4")
region = Rect2(0, 0, 64, 256)

[sub_resource type="AtlasTexture" id="AtlasTexture_6q4x5"]
atlas = ExtResource("2_v5pq4")
region = Rect2(64, 0, 64, 256)

[sub_resource type="SpriteFrames" id="SpriteFrames_bhuf5"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_jxjxr")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_6q4x5")
}],
"loop": true,
"name": &"slash",
"speed": 4.0
}]

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_jxjxr"]
radius = 23.0486
height = 92.1946

[node name="Node2D" type="Node2D"]
script = ExtResource("1_jxjxr")

[node name="AnimatedSprite" type="AnimatedSprite2D" parent="."]
rotation = 0.5342
scale = Vector2(0.4, 0.4)
sprite_frames = SubResource("SpriteFrames_bhuf5")
animation = &"slash"
frame_progress = 0.491885

[node name="DamageArea" type="Area2D" parent="."]
position = Vector2(-8.34465e-07, 2.5)
rotation = 0.598097
scale = Vector2(0.4, 0.4)
collision_layer = 4
collision_mask = 8

[node name="CollisionPolygon2D" type="CollisionShape2D" parent="DamageArea"]
position = Vector2(-6.99288, -5.8234)
rotation = -0.383687
shape = SubResource("CapsuleShape2D_jxjxr")

[node name="DisplayDurationTimer" type="Timer" parent="."]
one_shot = true

[connection signal="body_entered" from="DamageArea" to="." method="_on_damage_area_body_entered"]
 
==== H:\Game Creation\testing-environ\Scenes\Weapons\frozen_territory_attack.tscn ==== 
[gd_scene load_steps=5 format=3 uid="uid://xk4tacgmap5"]

[ext_resource type="Script" uid="uid://bjn846tlbs617" path="res://Scripts/Weapons/frozen_territory_attack.gd" id="1_7wmhh"]
[ext_resource type="Texture2D" uid="uid://cmosmboy0jya7" path="res://Assets/Weapons/Frozen Territory Animation.png" id="1_vbbhc"]

[sub_resource type="SpriteFrames" id="SpriteFrames_7wmhh"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": ExtResource("1_vbbhc")
}],
"loop": true,
"name": &"frozen_territory_attack_frames",
"speed": 5.0
}]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_2bew8"]
size = Vector2(14, 18)

[node name="FrozenTerritoryAttack" type="Node2D"]
scale = Vector2(1.3, 1.3)
script = ExtResource("1_7wmhh")

[node name="AnimatedSprite" type="AnimatedSprite2D" parent="."]
scale = Vector2(0.25, 0.25)
sprite_frames = SubResource("SpriteFrames_7wmhh")
animation = &"frozen_territory_attack_frames"

[node name="DamageArea" type="Area2D" parent="."]
collision_layer = 4
collision_mask = 8

[node name="CollisionShape2D" type="CollisionShape2D" parent="DamageArea"]
shape = SubResource("RectangleShape2D_2bew8")

[node name="EffectDurationTimer" type="Timer" parent="."]
one_shot = true

[connection signal="body_entered" from="DamageArea" to="." method="_on_damage_area_body_entered"]
[connection signal="timeout" from="EffectDurationTimer" to="." method="_on_effect_duration_timer_timeout"]
 
==== H:\Game Creation\testing-environ\Scenes\Weapons\LesserSpirit.tscn ==== 
[gd_scene load_steps=5 format=3 uid="uid://dbo7ujspjy0n4"]

[ext_resource type="Texture2D" uid="uid://cl8otpb7g4h83" path="res://Assets/Pets and Summons/Lesser Spirit Animation.png" id="1_mw1nq"]
[ext_resource type="Script" uid="uid://d4iv1f3aqm2ba" path="res://Scripts/Weapons/LesserSpirit.gd" id="1_pcspa"]

[sub_resource type="AtlasTexture" id="AtlasTexture_pcspa"]
atlas = ExtResource("1_mw1nq")
region = Rect2(0, 0, 75, 75)

[sub_resource type="SpriteFrames" id="SpriteFrames_m3rpg"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_pcspa")
}],
"loop": true,
"name": &"orbit_loop",
"speed": 5.0
}]

[node name="LesserSpirit" type="Node2D"]
script = ExtResource("1_pcspa")

[node name="Visual" type="AnimatedSprite2D" parent="."]
scale = Vector2(0.05, 0.05)
sprite_frames = SubResource("SpriteFrames_m3rpg")
animation = &"orbit_loop"

[node name="FireTimer" type="Timer" parent="."]
autostart = true

[node name="ProjectileSpawnPoint" type="Node2D" parent="."]
position = Vector2(2, 0)
 
==== H:\Game Creation\testing-environ\Scenes\Weapons\LongswordAttack.tscn ==== 
[gd_scene load_steps=8 format=3 uid="uid://snbqkv5o3phl"]

[ext_resource type="Script" uid="uid://phkeqjoa4j1b" path="res://Scripts/Weapons/LongswordAttack.gd" id="1_wsuho"]
[ext_resource type="Texture2D" uid="uid://cfg47y1eojlv" path="res://Assets/Weapons/Longsword Animation.png" id="2_a401v"]

[sub_resource type="AtlasTexture" id="AtlasTexture_h0wsy"]
atlas = ExtResource("2_a401v")
region = Rect2(0, 0, 100, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_f15vq"]
atlas = ExtResource("2_a401v")
region = Rect2(100, 0, 100, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_1upwa"]
atlas = ExtResource("2_a401v")
region = Rect2(200, 0, 100, 150)

[sub_resource type="AtlasTexture" id="AtlasTexture_pa1e5"]
atlas = ExtResource("2_a401v")
region = Rect2(300, 0, 100, 150)

[sub_resource type="SpriteFrames" id="SpriteFrames_akcy4"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_h0wsy")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_f15vq")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_1upwa")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_pa1e5")
}],
"loop": false,
"name": &"slash",
"speed": 12.0
}]

[node name="Node2D" type="Node2D"]
scale = Vector2(0.6, 0.6)
script = ExtResource("1_wsuho")

[node name="AnimatedSprite" type="AnimatedSprite2D" parent="."]
position = Vector2(-16.7722, 0.228758)
rotation = -0.449063
scale = Vector2(0.6, 0.6)
sprite_frames = SubResource("SpriteFrames_akcy4")
animation = &"slash"
frame = 3
frame_progress = 1.0

[node name="DamageArea" type="Area2D" parent="."]
position = Vector2(-16.7722, 0.228758)
rotation = -0.449063
scale = Vector2(0.6, 0.6)
collision_layer = 4
collision_mask = 8

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="DamageArea"]
polygon = PackedVector2Array(53, -59, 40, -67, 11, -35, -27, 30, -32, 73, -8, 78, 7, 62, 25, 23, 63, -54, 63, -54)

[node name="DurationTimer" type="Timer" parent="."]
one_shot = true

[connection signal="body_entered" from="DamageArea" to="." method="_on_damage_area_body_entered"]
 
==== H:\Game Creation\testing-environ\Scenes\Weapons\MothGolem.tscn ==== 
[gd_scene load_steps=12 format=3 uid="uid://7vxk6mtpfyup"]

[ext_resource type="Script" uid="uid://cgtro22i5akue" path="res://Scripts/Weapons/MothGolem.gd" id="1_nd37c"]
[ext_resource type="Texture2D" uid="uid://dpxqhwu642lum" path="res://Assets/Pets and Summons/Moth Golem Attack Animation.png" id="2_qa362"]
[ext_resource type="Texture2D" uid="uid://cf1tweoyqgii1" path="res://Assets/Pets and Summons/Moth Golem Animation.png" id="3_w4not"]

[sub_resource type="AtlasTexture" id="AtlasTexture_22v6j"]
atlas = ExtResource("2_qa362")
region = Rect2(0, 0, 256, 300)

[sub_resource type="AtlasTexture" id="AtlasTexture_5he47"]
atlas = ExtResource("2_qa362")
region = Rect2(256, 0, 256, 300)

[sub_resource type="AtlasTexture" id="AtlasTexture_22jhq"]
atlas = ExtResource("3_w4not")
region = Rect2(0, 0, 256, 300)

[sub_resource type="AtlasTexture" id="AtlasTexture_jctgs"]
atlas = ExtResource("3_w4not")
region = Rect2(0, 0, 256, 300)

[sub_resource type="AtlasTexture" id="AtlasTexture_xg78q"]
atlas = ExtResource("3_w4not")
region = Rect2(256, 0, 256, 300)

[sub_resource type="SpriteFrames" id="SpriteFrames_vf4dy"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_22v6j")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_5he47")
}],
"loop": false,
"name": &"attack_stagger",
"speed": 4.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_22jhq")
}],
"loop": true,
"name": &"idle",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_jctgs")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_xg78q")
}],
"loop": true,
"name": &"move",
"speed": 5.0
}]

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_771e2"]
radius = 75.0
height = 150.0

[sub_resource type="CircleShape2D" id="CircleShape2D_ux4fk"]
radius = 3876.21

[node name="MothGolem" type="CharacterBody2D"]
collision_layer = 512
collision_mask = 128
script = ExtResource("1_nd37c")

[node name="Visual" type="AnimatedSprite2D" parent="."]
scale = Vector2(0.06, 0.06)
sprite_frames = SubResource("SpriteFrames_vf4dy")
animation = &"attack_stagger"
frame = 1
frame_progress = 1.0

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(0, 1)
scale = Vector2(0.04, 0.04)
shape = SubResource("CapsuleShape2D_771e2")

[node name="NavigationAgent" type="NavigationAgent2D" parent="."]

[node name="AttackRangeArea" type="Area2D" parent="."]
scale = Vector2(0.04, 0.04)
collision_layer = 0
collision_mask = 8

[node name="CollisionShape2D" type="CollisionShape2D" parent="AttackRangeArea"]
position = Vector2(0, 25)
scale = Vector2(0.04, 0.04)
shape = SubResource("CircleShape2D_ux4fk")

[node name="AttackTimer" type="Timer" parent="."]

[node name="LeashCheckTimer" type="Timer" parent="."]
autostart = true
 
==== H:\Game Creation\testing-environ\Scenes\Weapons\scythe_attack.tscn ==== 
[gd_scene load_steps=16 format=3 uid="uid://byd28ph0dd8dr"]

[ext_resource type="Script" uid="uid://cbvud11dfiaab" path="res://Scripts/scythe_attack.gd" id="1_1fbax"]
[ext_resource type="Texture2D" uid="uid://dhb326y5k81q3" path="res://Assets/Weapons/Scythe Effects Complete Animation 2.png" id="2_kmys0"]

[sub_resource type="AtlasTexture" id="AtlasTexture_x1yv5"]
atlas = ExtResource("2_kmys0")
region = Rect2(128, 0, 128, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_fu3qg"]
atlas = ExtResource("2_kmys0")
region = Rect2(256, 0, 128, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_476go"]
atlas = ExtResource("2_kmys0")
region = Rect2(384, 0, 128, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_fmuxd"]
atlas = ExtResource("2_kmys0")
region = Rect2(512, 0, 128, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_n1qno"]
atlas = ExtResource("2_kmys0")
region = Rect2(640, 0, 128, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_kj5bs"]
atlas = ExtResource("2_kmys0")
region = Rect2(768, 0, 128, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_upvk4"]
atlas = ExtResource("2_kmys0")
region = Rect2(896, 0, 128, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_w738p"]
atlas = ExtResource("2_kmys0")
region = Rect2(1024, 0, 128, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_xlwbm"]
atlas = ExtResource("2_kmys0")
region = Rect2(1152, 0, 128, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_ikcs1"]
atlas = ExtResource("2_kmys0")
region = Rect2(1280, 0, 128, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_maand"]
atlas = ExtResource("2_kmys0")
region = Rect2(0, 0, 128, 128)

[sub_resource type="SpriteFrames" id="SpriteFrames_xlwbm"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_x1yv5")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_fu3qg")
}, {
"duration": 0.6,
"texture": SubResource("AtlasTexture_476go")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_fmuxd")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_n1qno")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_kj5bs")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_upvk4")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_w738p")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_xlwbm")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ikcs1")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_maand")
}],
"loop": true,
"name": &"slash",
"speed": 30.0
}]

[sub_resource type="CircleShape2D" id="CircleShape2D_x1yv5"]
radius = 58.0086

[node name="ScytheAttack" type="Node2D"]
script = ExtResource("1_1fbax")

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
sprite_frames = SubResource("SpriteFrames_xlwbm")
animation = &"slash"
frame = 1
frame_progress = 0.528847

[node name="DamageArea" type="Area2D" parent="."]
collision_layer = 4
collision_mask = 8

[node name="CollisionShape2D" type="CollisionShape2D" parent="DamageArea"]
shape = SubResource("CircleShape2D_x1yv5")

[node name="DurationTimer" type="Timer" parent="."]

[connection signal="body_entered" from="DamageArea" to="." method="_on_damage_area_body_entered"]
 
==== H:\Game Creation\testing-environ\Scenes\Weapons\ShieldBashAttack.tscn ==== 
[gd_scene load_steps=8 format=3 uid="uid://lqt6ivh044gn"]

[ext_resource type="Script" uid="uid://d33riv0p3vt2h" path="res://Scripts/Weapons/ShieldBashAttack.gd" id="1_0vt6x"]
[ext_resource type="Texture2D" uid="uid://dqd5102sgdtj6" path="res://Assets/Weapons/Shield Bash Animation.png" id="2_41alt"]

[sub_resource type="AtlasTexture" id="AtlasTexture_0ndsp"]
atlas = ExtResource("2_41alt")
region = Rect2(384, 0, 128, 256)

[sub_resource type="AtlasTexture" id="AtlasTexture_m83sn"]
atlas = ExtResource("2_41alt")
region = Rect2(256, 0, 128, 256)

[sub_resource type="AtlasTexture" id="AtlasTexture_iiuje"]
atlas = ExtResource("2_41alt")
region = Rect2(128, 0, 128, 256)

[sub_resource type="AtlasTexture" id="AtlasTexture_4s18h"]
atlas = ExtResource("2_41alt")
region = Rect2(0, 0, 128, 256)

[sub_resource type="SpriteFrames" id="SpriteFrames_h1xe8"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_0ndsp")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_m83sn")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_iiuje")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_4s18h")
}],
"loop": false,
"name": &"bash",
"speed": 20.0
}]

[node name="Node2D" type="Node2D"]
rotation = -0.126996
scale = Vector2(0.45, 0.45)
script = ExtResource("1_0vt6x")

[node name="AnimatedSprite" type="AnimatedSprite2D" parent="."]
position = Vector2(-25.9644, -4.76532)
scale = Vector2(0.45, 0.45)
sprite_frames = SubResource("SpriteFrames_h1xe8")
animation = &"bash"
frame = 3
frame_progress = 1.0

[node name="DamageArea" type="Area2D" parent="."]
position = Vector2(-25.9644, -4.76532)
scale = Vector2(0.45, 0.45)
collision_layer = 4
collision_mask = 136

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="DamageArea"]
polygon = PackedVector2Array(-32, -126, 61, -20, 52, 43, -52, 123, -61, 80, -59, 7, -51, -59, -41, -104)

[node name="DurationTimer" type="Timer" parent="."]

[connection signal="body_entered" from="DamageArea" to="." method="_on_damage_area_body_entered"]
 
==== H:\Game Creation\testing-environ\Scenes\Weapons\spark_attack.tscn ==== 
[gd_scene load_steps=11 format=3 uid="uid://blj6u880sernr"]

[ext_resource type="Texture2D" uid="uid://c63lk6v6id3sl" path="res://Assets/Weapons/Unstable Heat Animation.png" id="1_7l403"]
[ext_resource type="Script" uid="uid://j2dweybyn1fj" path="res://Scripts/Weapons/spark_attack.gd" id="1_vfvrx"]

[sub_resource type="AtlasTexture" id="AtlasTexture_vfvrx"]
atlas = ExtResource("1_7l403")
region = Rect2(0, 0, 128, 154)

[sub_resource type="AtlasTexture" id="AtlasTexture_8nife"]
atlas = ExtResource("1_7l403")
region = Rect2(128, 0, 128, 154)

[sub_resource type="AtlasTexture" id="AtlasTexture_1hp83"]
atlas = ExtResource("1_7l403")
region = Rect2(256, 0, 128, 154)

[sub_resource type="AtlasTexture" id="AtlasTexture_cg2tk"]
atlas = ExtResource("1_7l403")
region = Rect2(384, 0, 128, 154)

[sub_resource type="AtlasTexture" id="AtlasTexture_ehopq"]
atlas = ExtResource("1_7l403")
region = Rect2(512, 0, 128, 154)

[sub_resource type="AtlasTexture" id="AtlasTexture_w5h3o"]
atlas = ExtResource("1_7l403")
region = Rect2(640, 0, 128, 154)

[sub_resource type="SpriteFrames" id="SpriteFrames_jqf3h"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_vfvrx")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_8nife")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_1hp83")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_cg2tk")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ehopq")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_w5h3o")
}],
"loop": true,
"name": &"spark_attack_frames",
"speed": 12.0
}]

[sub_resource type="CircleShape2D" id="CircleShape2D_5naj1"]
radius = 16.0

[node name="Area2D" type="Area2D"]
scale = Vector2(0.55, 0.55)
collision_layer = 4
collision_mask = 136
script = ExtResource("1_vfvrx")

[node name="spark_animation" type="AnimatedSprite2D" parent="."]
position = Vector2(-2, -3)
scale = Vector2(0.5, 0.5)
sprite_frames = SubResource("SpriteFrames_jqf3h")
animation = &"spark_attack_frames"

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("CircleShape2D_5naj1")

[node name="LifetimeTimer" type="Timer" parent="."]
wait_time = 3.0
one_shot = true

[connection signal="body_entered" from="." to="." method="_on_body_entered"]
 
==== H:\Game Creation\testing-environ\Scenes\Weapons\TorrentAttack.tscn ==== 
[gd_scene load_steps=10 format=3 uid="uid://d32yo3kvx4gy2"]

[ext_resource type="Script" uid="uid://ds3ld4vrgqu5u" path="res://Scenes/Weapons/TorrentAttack.gd" id="1_ayg11"]
[ext_resource type="Texture2D" uid="uid://dvyprtolug8vy" path="res://Assets/Weapons/Torrent Animation.png" id="1_gwbwu"]

[sub_resource type="AtlasTexture" id="AtlasTexture_ayg11"]
atlas = ExtResource("1_gwbwu")
region = Rect2(0, 0, 128, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_mrt03"]
atlas = ExtResource("1_gwbwu")
region = Rect2(128, 0, 128, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_ehaww"]
atlas = ExtResource("1_gwbwu")
region = Rect2(256, 0, 128, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_kobxq"]
atlas = ExtResource("1_gwbwu")
region = Rect2(384, 0, 128, 128)

[sub_resource type="AtlasTexture" id="AtlasTexture_mgxui"]
atlas = ExtResource("1_gwbwu")
region = Rect2(512, 0, 128, 128)

[sub_resource type="SpriteFrames" id="SpriteFrames_o06hr"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_ayg11")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_mrt03")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ehaww")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_kobxq")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_mgxui")
}],
"loop": true,
"name": &"erupt",
"speed": 8.0
}]

[sub_resource type="CircleShape2D" id="CircleShape2D_vjoe0"]
radius = 45.596

[node name="TorrentAttack" type="Area2D"]
collision_layer = 4
collision_mask = 8
script = ExtResource("1_ayg11")

[node name="AnimatedSprite" type="AnimatedSprite2D" parent="."]
position = Vector2(2.50379, -14.5161)
scale = Vector2(0.460997, 0.50756)
sprite_frames = SubResource("SpriteFrames_o06hr")
animation = &"erupt"
frame = 4
frame_progress = 1.0

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(1, -9)
scale = Vector2(0.460997, 0.50756)
shape = SubResource("CircleShape2D_vjoe0")

[node name="EffectLifetimeTimer" type="Timer" parent="."]
one_shot = true

[connection signal="body_entered" from="." to="." method="_on_body_entered"]
 
==== H:\Game Creation\testing-environ\Scenes\Weapons\VineWhipAttack.tscn ==== 
[gd_scene load_steps=10 format=3 uid="uid://dxxeed4wbmrld"]

[ext_resource type="Script" uid="uid://coof1whvxciaj" path="res://Scenes/Weapons/VineWhipAttack.gd" id="1_x4jnd"]
[ext_resource type="Texture2D" uid="uid://djjlfs8jtnhwf" path="res://Assets/Weapons/Vine Whip Animation.png" id="1_ys0es"]

[sub_resource type="AtlasTexture" id="AtlasTexture_x4jnd"]
atlas = ExtResource("1_ys0es")
region = Rect2(0, 0, 600, 300)

[sub_resource type="AtlasTexture" id="AtlasTexture_3lj7w"]
atlas = ExtResource("1_ys0es")
region = Rect2(600, 0, 600, 300)

[sub_resource type="AtlasTexture" id="AtlasTexture_41skl"]
atlas = ExtResource("1_ys0es")
region = Rect2(1200, 0, 600, 300)

[sub_resource type="AtlasTexture" id="AtlasTexture_5j7ug"]
atlas = ExtResource("1_ys0es")
region = Rect2(1800, 0, 600, 300)

[sub_resource type="AtlasTexture" id="AtlasTexture_mt5tl"]
atlas = ExtResource("1_ys0es")
region = Rect2(2400, 0, 600, 300)

[sub_resource type="SpriteFrames" id="SpriteFrames_2v61d"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_x4jnd")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_3lj7w")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_41skl")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_5j7ug")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_mt5tl")
}],
"loop": true,
"name": &"whip",
"speed": 12.0
}]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_3lj7w"]
size = Vector2(65, 10)

[node name="Node2D" type="Node2D"]
script = ExtResource("1_x4jnd")

[node name="AnimatedSprite" type="AnimatedSprite2D" parent="."]
position = Vector2(33.8358, 0.234278)
scale = Vector2(0.136692, -0.0552764)
sprite_frames = SubResource("SpriteFrames_2v61d")
animation = &"whip"
frame_progress = 0.107435

[node name="DamageArea" type="Area2D" parent="."]
position = Vector2(33.8358, 0.234278)
scale = Vector2(1.35336, 1.58407)
collision_layer = 4
collision_mask = 136

[node name="CollisionShape2D" type="CollisionShape2D" parent="DamageArea"]
position = Vector2(-1.5, 0)
shape = SubResource("RectangleShape2D_3lj7w")

[node name="DurationTimer" type="Timer" parent="."]

[connection signal="body_entered" from="DamageArea" to="." method="_on_damage_area_body_entered"]
 
==== H:\Game Creation\testing-environ\Scenes\Weapons\Managers\BowShotManager.tscn ==== 
[gd_scene load_steps=2 format=3 uid="uid://dpu7dcscl3gqn"]

[ext_resource type="Script" uid="uid://bcrp2gkwl54ts" path="res://Scripts/Weapons/BowShotManager.gd" id="1_5o27r"]

[node name="Node2D" type="Node2D"]
script = ExtResource("1_5o27r")
 
==== H:\Game Creation\testing-environ\Scenes\Weapons\Projectiles\ArrowProjectile.tscn ==== 
[gd_scene load_steps=6 format=3 uid="uid://df8rkxp6uqu5g"]

[ext_resource type="Script" uid="uid://fqp2v5qsbeix" path="res://Scripts/Weapons/ArrowProjectile.gd" id="1_eqav1"]
[ext_resource type="Texture2D" uid="uid://51u0uu2qw5d7" path="res://Assets/Weapons/Arrow from Bow Animation.png" id="2_7s8px"]

[sub_resource type="AtlasTexture" id="AtlasTexture_qod6k"]
atlas = ExtResource("2_7s8px")
region = Rect2(0, 0, 256, 32)

[sub_resource type="SpriteFrames" id="SpriteFrames_tl2ce"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_qod6k")
}],
"loop": true,
"name": &"fly",
"speed": 5.0
}]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_2i2l1"]
size = Vector2(24, 6)

[node name="Area2D" type="Area2D"]
collision_layer = 4
collision_mask = 136
script = ExtResource("1_eqav1")

[node name="AnimatedSprite" type="AnimatedSprite2D" parent="."]
scale = Vector2(0.08, 0.08)
sprite_frames = SubResource("SpriteFrames_tl2ce")
animation = &"fly"
flip_h = true

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_2i2l1")

[node name="LifetimeTimer" type="Timer" parent="."]

[connection signal="body_entered" from="." to="." method="_on_body_entered"]
 
==== H:\Game Creation\testing-environ\Scenes\Weapons\Summons\LesserSpiritProjectile.tscn ==== 
[gd_scene load_steps=6 format=3 uid="uid://ddbs7d3prtk3y"]

[ext_resource type="Script" uid="uid://bsynunu45jib1" path="res://Scripts/Weapons/Projectiles/LesserSpiritProjectile.gd" id="1_fu31k"]
[ext_resource type="Texture2D" uid="uid://be625j4xar4ss" path="res://Assets/Pets and Summons/Lesser Spirit Projectile.png" id="2_6uqle"]

[sub_resource type="AtlasTexture" id="AtlasTexture_vg2sr"]
atlas = ExtResource("2_6uqle")
region = Rect2(0, 0, 45, 40)

[sub_resource type="SpriteFrames" id="SpriteFrames_8cvlq"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_vg2sr")
}],
"loop": true,
"name": &"fly",
"speed": 5.0
}]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_ppjx5"]
size = Vector2(2, 2)

[node name="LesserSpiritProjectile" type="Area2D"]
collision_layer = 256
collision_mask = 136
script = ExtResource("1_fu31k")

[node name="Visual" type="AnimatedSprite2D" parent="."]
scale = Vector2(0.05, 0.05)
sprite_frames = SubResource("SpriteFrames_8cvlq")
animation = &"fly"

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_ppjx5")

[node name="LifetimeTimer" type="Timer" parent="."]
wait_time = 2.0
one_shot = true

[connection signal="body_entered" from="." to="." method="_on_body_entered"]
 
==== H:\Game Creation\testing-environ\Scripts\BaseEnemy.gd ==== 
# BaseEnemy.gd
# Corrected take_damage to properly apply damage multipliers from StatusEffectComponent.
# Includes debug prints for verification.
class_name BaseEnemy
extends CharacterBody2D

signal killed_by_attacker(attacker_node: Node, killed_enemy_node: Node)

@export var max_health: int = 10 
@export var contact_damage: int = 1 
@export var speed: float = 30.0 
@export var experience_to_drop: int = 1 
@export var armor: int = 0 

var current_health: int
var is_dead_flag: bool = false

var _player_in_contact_area: bool = false
var _can_deal_contact_damage_again: bool = true # Retained for potential future logic, but not strictly needed for this timer fix

# --- Node References (Ensure these paths match your BaseEnemy.tscn structure) ---
@onready var animated_sprite: AnimatedSprite2D = get_node_or_null("AnimatedSprite2D") as AnimatedSprite2D
@onready var contact_damage_cooldown_timer: Timer = get_node_or_null("ContactDamageTimer") as Timer
@onready var damage_area: Area2D = get_node_or_null("DamageArea") as Area2D
@onready var health_bar: ProgressBar = get_node_or_null("HealthBar") as ProgressBar
@onready var separation_detector: Area2D = get_node_or_null("SeparationDetector") as Area2D
@onready var status_effect_component: StatusEffectComponent = get_node_or_null("StatusEffectComponent") as StatusEffectComponent

const FLASH_COLOR: Color = Color(1.0, 0.3, 0.3, 1.0)
var original_modulate_color: Color = Color(1.0, 1.0, 1.0, 1.0)
const FLASH_DURATION: float = 0.2

var player_node: PlayerCharacter = null
const SEPARATION_FORCE_STRENGTH: float = 50.0

var is_elite: bool = false
var elite_type_tag: StringName = &"" 
var base_scene_root_scale: Vector2 = Vector2.ONE 
var _sprite_initially_faces_left: bool = false
var is_elite_immovable: bool = false
var phaser_teleport_timer: Timer = null
var summoner_spawn_timer: Timer = null
var _active_minions_by_summoner: Array[Node] = [] 
var shaman_aura: Area2D = null
var shaman_heal_pulse_timer: Timer = null

var enemy_data_resource: EnemyData 
var game_node_ref 

enum EnemyAnimState { IDLE, WALK, ATTACK, DEATH }
var current_anim_state: EnemyAnimState = EnemyAnimState.IDLE
const MIN_SPEED_FOR_WALK_ANIM: float = 5.0
var _is_contact_attacking: bool = false


func _ready():
	base_scene_root_scale = self.scale
	var players = get_tree().get_nodes_in_group("player_char_group")
	if players.size() > 0: player_node = players[0] as PlayerCharacter
	var main_scene_root = get_tree().current_scene
	if main_scene_root and main_scene_root.has_method("increment_active_enemy_count"):
		game_node_ref = main_scene_root
	elif get_tree().root.get_child_count() > 0:
		var potential_game_node = get_tree().root.get_child(get_tree().root.get_child_count() - 1)
		if potential_game_node and potential_game_node.has_method("increment_active_enemy_count"):
			game_node_ref = potential_game_node
	if is_instance_valid(game_node_ref): game_node_ref.increment_active_enemy_count()
	if is_instance_valid(animated_sprite):
		original_modulate_color = animated_sprite.modulate
		if animated_sprite.sprite_frames and animated_sprite.sprite_frames.has_animation("attack"):
			if not animated_sprite.is_connected("animation_finished", Callable(self, "_on_animated_sprite_animation_finished")):
				animated_sprite.animation_finished.connect(Callable(self, "_on_animated_sprite_animation_finished"))
	if not is_instance_valid(enemy_data_resource):
		current_health = max_health
		update_health_bar()
	if not is_instance_valid(contact_damage_cooldown_timer): print("ERROR (BaseEnemy '", name, "'): ContactDamageTimer node not found.")
	else:
		contact_damage_cooldown_timer.wait_time = 1.0; contact_damage_cooldown_timer.one_shot = false
		if not contact_damage_cooldown_timer.is_connected("timeout", Callable(self, "_on_contact_damage_timer_timeout")):
			contact_damage_cooldown_timer.timeout.connect(Callable(self, "_on_contact_damage_timer_timeout"))
	if not is_instance_valid(damage_area): print("ERROR (BaseEnemy '", name, "'): DamageArea node not found.")
	else:
		if not damage_area.is_connected("body_entered", Callable(self, "_on_damage_area_body_entered")):
			damage_area.body_entered.connect(Callable(self, "_on_damage_area_body_entered"))
		if not damage_area.is_connected("body_exited", Callable(self, "_on_damage_area_body_exited")):
			damage_area.body_exited.connect(Callable(self, "_on_damage_area_body_exited"))
	if is_instance_valid(status_effect_component) and status_effect_component.has_signal("status_effects_changed"):
		if not status_effect_component.is_connected("status_effects_changed", Callable(self, "on_status_effects_changed")):
			status_effect_component.status_effects_changed.connect(Callable(self, "on_status_effects_changed"))
	if speed > 0 and is_instance_valid(player_node): _update_animation_state()
	else: _set_animation_state(EnemyAnimState.IDLE)


func _physics_process(delta: float):
	if is_dead_flag or _is_contact_attacking: return
	var direction_to_player = Vector2.ZERO
	if is_instance_valid(player_node):
		direction_to_player = (player_node.global_position - global_position).normalized()
	var separation_vec = _calculate_separation_force()
	var final_direction = (direction_to_player + separation_vec).normalized()
	var current_move_speed = speed
	if is_instance_valid(status_effect_component):
		var speed_mult_add = status_effect_component.get_sum_of_additive_modifiers("movement_speed_multiplier")
		var speed_mult_direct = status_effect_component.get_product_of_multiplicative_modifiers("movement_speed_direct_multiplier")
		current_move_speed *= (1.0 + speed_mult_add); current_move_speed *= speed_mult_direct
		current_move_speed = max(0, current_move_speed)
	velocity = final_direction * current_move_speed
	if is_instance_valid(animated_sprite):
		if velocity.x != 0:
			if _sprite_initially_faces_left: animated_sprite.flip_h = (velocity.x > 0.01)
			else: animated_sprite.flip_h = (velocity.x < -0.01)
	move_and_slide()
	_update_animation_state()


func take_damage(amount: int, attacker_node: Node = null, p_attack_stats: Dictionary = {}):
	if current_health <= 0 or is_dead_flag: return
	
	var final_damage_taken = float(amount)
	var current_armor_stat = armor
	var armor_penetration_value = 0.0
	if p_attack_stats.has("armor_pierce"):
		armor_penetration_value = p_attack_stats.get("armor_pierce", 0.0)
		
	var effective_armor = max(0, current_armor_stat * (1.0 - armor_penetration_value))
	final_damage_taken = max(1.0, final_damage_taken - effective_armor)
	print_debug(" Damage after armor: ", final_damage_taken) # DEBUG
	
	if is_instance_valid(status_effect_component):
		var additive_damage_taken_mod = status_effect_component.get_sum_of_additive_modifiers("damage_taken_multiplier")
		if additive_damage_taken_mod != 0.0:
			print_debug(" Vulnerability mod value: ", additive_damage_taken_mod) # DEBUG
		final_damage_taken *= (1.0 + additive_damage_taken_mod)
	
	print_debug(name, " is taking ", final_damage_taken, " damage. Health was: ", current_health)
	current_health -= int(round(final_damage_taken))
	print_debug(" -> Health is now: ", current_health)
	update_health_bar()
	_flash_on_hit()
	
	if current_health <= 0:
		print_debug(" -> Health <= 0. Calling _die().")
		_die(attacker_node)

func initialize_from_data(data: EnemyData):
	if not data is EnemyData:
		print("ERROR (BaseEnemy '", name, "'): Invalid EnemyData provided. Using scene defaults.")
		current_health = max_health; update_health_bar(); return
	enemy_data_resource = data
	max_health = data.base_health; contact_damage = data.base_contact_damage
	speed = data.base_speed; armor = data.base_armor
	experience_to_drop = data.base_exp_drop
	_sprite_initially_faces_left = data.sprite_faces_left_by_default
	current_health = max_health
	if is_instance_valid(animated_sprite):
		animated_sprite.modulate = data.sprite_modulate_color
		original_modulate_color = animated_sprite.modulate
	update_health_bar(); _update_animation_state()

func _update_animation_state():
	if is_dead_flag or _is_contact_attacking or current_anim_state == EnemyAnimState.ATTACK: return
	if velocity.length_squared() > MIN_SPEED_FOR_WALK_ANIM * MIN_SPEED_FOR_WALK_ANIM:
		_set_animation_state(EnemyAnimState.WALK)
	else: _set_animation_state(EnemyAnimState.IDLE)

func _set_animation_state(new_state: EnemyAnimState):
	if new_state == current_anim_state and is_instance_valid(animated_sprite) and animated_sprite.is_playing():
		if new_state == EnemyAnimState.IDLE and animated_sprite.animation == "idle" and not animated_sprite.is_playing(): pass
		else: return
	current_anim_state = new_state
	match current_anim_state:
		EnemyAnimState.IDLE: _play_animation("idle")
		EnemyAnimState.WALK: _play_animation("walk")
		EnemyAnimState.ATTACK: _play_animation("attack")
		EnemyAnimState.DEATH: _play_animation("death")

func _play_animation(anim_name: StringName):
	if is_instance_valid(animated_sprite) and animated_sprite.sprite_frames:
		if animated_sprite.sprite_frames.has_animation(anim_name):
			if animated_sprite.animation != anim_name or not animated_sprite.is_playing():
				animated_sprite.play(anim_name)

func _on_animated_sprite_animation_finished():
	if _is_contact_attacking and animated_sprite.animation == "attack":
		_is_contact_attacking = false; _update_animation_state()
	elif current_anim_state == EnemyAnimState.DEATH and animated_sprite.animation == "death": pass

func _die(killer_node: Node = null):
	if is_dead_flag: return
	print_debug(name, " is entering _die(). Setting is_dead_flag = true.")
	is_dead_flag = true
	_is_contact_attacking = false; _set_animation_state(EnemyAnimState.DEATH)
	if is_instance_valid(phaser_teleport_timer): phaser_teleport_timer.stop()
	if is_instance_valid(summoner_spawn_timer): summoner_spawn_timer.stop()
	if is_instance_valid(shaman_aura): shaman_aura.monitoring = false; shaman_aura.monitorable = false
	if is_instance_valid(shaman_heal_pulse_timer): shaman_heal_pulse_timer.stop()
	if is_instance_valid(game_node_ref) and game_node_ref.has_method("decrement_active_enemy_count"):
		game_node_ref.decrement_active_enemy_count()
	emit_signal("killed_by_attacker", killer_node, self); set_physics_process(false)
	if is_instance_valid(contact_damage_cooldown_timer): contact_damage_cooldown_timer.stop()
	var col_shape = get_node_or_null("CollisionShape2D") as CollisionShape2D
	if is_instance_valid(col_shape): col_shape.call_deferred("set_disabled", true)
	if is_instance_valid(damage_area):
		var da_col_shape = damage_area.get_node_or_null("CollisionShape2D") as CollisionShape2D
		if is_instance_valid(da_col_shape): da_col_shape.call_deferred("set_disabled", true)
		damage_area.call_deferred("set_monitoring", false)
	if is_instance_valid(separation_detector):
		var sd_col_shape = separation_detector.get_node_or_null("CollisionShape2D") as CollisionShape2D
		if is_instance_valid(sd_col_shape): sd_col_shape.call_deferred("set_disabled", true)
		separation_detector.call_deferred("set_monitoring", false)
	var death_anim_duration = 0.0
	if is_instance_valid(animated_sprite) and animated_sprite.sprite_frames and animated_sprite.sprite_frames.has_animation("death"):
		var frame_count = animated_sprite.sprite_frames.get_frame_count("death")
		var anim_speed = animated_sprite.sprite_frames.get_animation_speed("death")
		if anim_speed > 0: death_anim_duration = float(frame_count) / anim_speed
		if animated_sprite.sprite_frames.get_animation_loop("death"): death_anim_duration = 0.5
	emit_signal("killed_by_attacker", killer_node, self)
	set_physics_process(false)
	var death_timer = get_tree().create_timer(1.0) # Example duration
	death_timer.timeout.connect(Callable(self, "_finish_dying_and_drop_exp"))
	

func _finish_dying_and_drop_exp():
	var final_exp_to_give = self.experience_to_drop; var actual_exp_scene_path = ""
	if is_instance_valid(enemy_data_resource) and not enemy_data_resource.exp_drop_scene_path.is_empty():
		actual_exp_scene_path = enemy_data_resource.exp_drop_scene_path
	else: print_debug("BaseEnemy '", name, "': Missing exp_drop_scene_path. Skipping EXP drop.")
	if not actual_exp_scene_path.is_empty():
		var exp_scene_to_load = load(actual_exp_scene_path) as PackedScene
		if exp_scene_to_load:
			var exp_drop_instance = exp_scene_to_load.instantiate()
			var drops_container_node = get_tree().current_scene.get_node_or_null("DropsContainer")
			if is_instance_valid(drops_container_node): drops_container_node.add_child(exp_drop_instance)
			elif get_parent(): get_parent().add_child(exp_drop_instance)
			else: get_tree().current_scene.add_child(exp_drop_instance)
			exp_drop_instance.global_position = global_position
			if exp_drop_instance.has_method("set_experience_value"):
				exp_drop_instance.set_experience_value(final_exp_to_give, self.is_elite)
			elif "experience_value" in exp_drop_instance:
				exp_drop_instance.experience_value = final_exp_to_give
		else: print("ERROR (BaseEnemy): Could not load EXP drop scene: ", actual_exp_scene_path)
	call_deferred("queue_free")

func _notification(what: int):
	if what == NOTIFICATION_PREDELETE:
		if not is_dead_flag:
			if is_instance_valid(game_node_ref) and game_node_ref.has_method("decrement_active_enemy_count"):
				game_node_ref.decrement_active_enemy_count()
		if is_instance_valid(phaser_teleport_timer): phaser_teleport_timer.queue_free()
		if is_instance_valid(summoner_spawn_timer): summoner_spawn_timer.queue_free()
		if is_instance_valid(shaman_aura): shaman_aura.queue_free()
		if is_instance_valid(shaman_heal_pulse_timer): shaman_heal_pulse_timer.queue_free()

func cull_self_and_report_threat():
	if is_dead_flag: return
	if is_instance_valid(game_node_ref) and is_instance_valid(enemy_data_resource):
		if game_node_ref.has_method("add_to_global_threat_pool"):
			game_node_ref.add_to_global_threat_pool(enemy_data_resource.threat_value_when_culled)
	if is_instance_valid(game_node_ref) and game_node_ref.has_method("decrement_active_enemy_count"):
		game_node_ref.decrement_active_enemy_count()
	is_dead_flag = true; queue_free()

func _flash_on_hit():
	if not is_instance_valid(animated_sprite): return
	animated_sprite.modulate = FLASH_COLOR
	var flash_timer = get_tree().create_timer(FLASH_DURATION, true, false, true)
	await flash_timer.timeout
	if is_instance_valid(self) and is_instance_valid(animated_sprite):
		animated_sprite.modulate = original_modulate_color

func update_health_bar():
	if is_instance_valid(health_bar):
		health_bar.max_value = max(1, max_health); health_bar.value = current_health
		health_bar.visible = (current_health < max_health and current_health > 0)

func _on_contact_damage_timer_timeout():
	print_debug(name, ": Contact damage timer timeout. Player in area: ", _player_in_contact_area, ", Dead: ", is_dead_flag)
	if is_dead_flag: return
	if _player_in_contact_area:
		_try_deal_contact_damage()
	else:
		if is_instance_valid(contact_damage_cooldown_timer):
			contact_damage_cooldown_timer.stop()


func _on_damage_area_body_entered(body: Node2D):
	if body.is_in_group("player_char_group"):
		print_debug(name, ": Player entered damage area. Initial hit attempt.")
		_player_in_contact_area = true; _try_deal_contact_damage()
		if is_instance_valid(contact_damage_cooldown_timer) and contact_damage_cooldown_timer.is_stopped():
			contact_damage_cooldown_timer.start()

func _on_damage_area_body_exited(body: Node2D):
	if body.is_in_group("player_char_group"):
		print_debug(name, ": Player exited damage area. Stopping timer.")
		_player_in_contact_area = false
		if is_instance_valid(contact_damage_cooldown_timer):
			contact_damage_cooldown_timer.stop()


func _try_deal_contact_damage():
	if not _player_in_contact_area or is_dead_flag or _is_contact_attacking:
		print_debug(name, ": _try_deal_contact_damage aborted. Player in area: ", _player_in_contact_area, ", Dead: ", is_dead_flag, ", Attacking: ", _is_contact_attacking)
		return
	if is_instance_valid(player_node) and player_node.has_method("take_damage"):
		print_debug(name, ": Dealing contact damage to player for ", contact_damage, ".")
		player_node.take_damage(contact_damage, self); _can_deal_contact_damage_again = false
		if is_instance_valid(animated_sprite) and animated_sprite.sprite_frames and animated_sprite.sprite_frames.has_animation("attack"):
			_is_contact_attacking = true; _set_animation_state(EnemyAnimState.ATTACK)
		if is_instance_valid(contact_damage_cooldown_timer): contact_damage_cooldown_timer.start()

func _calculate_separation_force() -> Vector2:
	var separation_vector = Vector2.ZERO
	if not is_instance_valid(separation_detector): return separation_vector
	var neighbors = separation_detector.get_overlapping_bodies()
	if neighbors.size() > 0:
		for neighbor in neighbors:
			if neighbor != self and neighbor.is_in_group("enemies"):
				var away_from_neighbor = (global_position - neighbor.global_position).normalized()
				separation_vector += away_from_neighbor
		if separation_vector.length_squared() > 0.0001: separation_vector = separation_vector.normalized()
	return separation_vector * SEPARATION_FORCE_STRENGTH

func make_elite(p_elite_type: StringName, p_elite_DDS_contribution: float = 0.0, p_base_data_for_elite: EnemyData = null):
	is_elite = true
	elite_type_tag = p_elite_type
	if is_instance_valid(self):
		name = name + "_Elite_" + str(elite_type_tag)

	var true_base_hp = max_health
	var true_base_speed = speed
	var true_base_damage = contact_damage
	var true_base_exp = experience_to_drop
	var true_base_armor = armor
	var true_base_modulate = original_modulate_color
	var true_base_scale = base_scene_root_scale

	if is_instance_valid(p_base_data_for_elite):
		true_base_hp = p_base_data_for_elite.base_health
		true_base_speed = p_base_data_for_elite.base_speed
		true_base_damage = p_base_data_for_elite.base_contact_damage
		true_base_exp = p_base_data_for_elite.base_exp_drop
		true_base_armor = p_base_data_for_elite.base_armor
		if is_instance_valid(animated_sprite):
			true_base_modulate = p_base_data_for_elite.sprite_modulate_color
	elif is_instance_valid(enemy_data_resource):
		true_base_hp = enemy_data_resource.base_health
		true_base_speed = enemy_data_resource.base_speed
		true_base_damage = enemy_data_resource.base_contact_damage
		true_base_exp = enemy_data_resource.base_exp_drop
		true_base_armor = enemy_data_resource.base_armor
		if is_instance_valid(animated_sprite):
			true_base_modulate = enemy_data_resource.sprite_modulate_color
	
	var health_percent_increase: float = 4.00
	var damage_percent_increase: float = 0.20
	var speed_percent_increase: float = 0.0
	var additional_flat_armor: int = 0
	
	var exp_multiplier: float = 2.0 + (p_elite_DDS_contribution * 0.01)
	var scale_multiplier: float = 2.0

	if is_instance_valid(animated_sprite):
		animated_sprite.modulate = true_base_modulate

	var elite_tint_overlay = Color(1,1,1,1)

	match elite_type_tag:
		&"brute":
			damage_percent_increase += 0.30
			elite_tint_overlay = Color(1.0, 0.8, 0.8, 1.0)
		&"tank":
			health_percent_increase += 4.00; additional_flat_armor += 5
			elite_tint_overlay = Color(0.8, 1.0, 0.8, 1.0)
		&"swift":
			speed_percent_increase += 0.30
			elite_tint_overlay = Color(0.8, 0.8, 1.0, 1.0)
		&"immovable":
			is_elite_immovable = true
			elite_tint_overlay = Color(0.9, 0.9, 0.9, 1.0)
		&"phaser":
			elite_tint_overlay = Color(0.8, 0.5, 1.0, 1.0)
		&"summoner":
			elite_tint_overlay = Color(1.0, 1.0, 0.5, 1.0)
		&"shaman":
			elite_tint_overlay = Color(0.5, 1.0, 0.8, 1.0)
		&"time_warper":
			elite_tint_overlay = Color(0.6, 0.4, 0.8, 1.0)
		_:
			elite_tint_overlay = Color(1.0, 0.9, 0.7, 1.0)

	max_health = int(true_base_hp * (1.0 + health_percent_increase))
	current_health = max_health
	contact_damage = int(true_base_damage * (1.0 + damage_percent_increase))
	speed = true_base_speed * (1.0 + speed_percent_increase)
	armor = true_base_armor + additional_flat_armor
	experience_to_drop = int(true_base_exp * exp_multiplier)
	
	if is_instance_valid(animated_sprite):
		animated_sprite.scale = true_base_scale * scale_multiplier
		animated_sprite.modulate *= elite_tint_overlay
		original_modulate_color = animated_sprite.modulate
		base_scene_root_scale = animated_sprite.scale
	
	update_health_bar()

func on_status_effects_changed(_owner_node: Node): pass
func is_dead() -> bool: return is_dead_flag
func get_current_health() -> int: return current_health
func get_is_elite_immovable() -> bool: return is_elite_immovable
 
==== H:\Game Creation\testing-environ\Scripts\enemy_slime_green.gd ==== 
# --- enemy_slime_green.gd ---
# File Path: H:\Game Creation\testing-environ\Scripts\enemy_slime_green.gd
extends BaseEnemy

func _ready():
	# --- Static Stats for Green Slime (as per user specification) ---
	#max_health = 22
	#contact_damage = 5
	#speed = 38.0
	#experience_to_drop = 2
	#armor = 0
	# --- End Static Stats ---

	super() # Calls BaseEnemy's _ready AFTER stats are set for this specific type
	# BaseEnemy's _ready will now correctly initialize current_health and health_bar
	
	# If you have specific animations for slime different from "move" or "idle"
	# _play_animation("slime_move")
 
==== H:\Game Creation\testing-environ\Scripts\exp_drop.gd ==== 
# exp_drop.gd
extends Area2D

@export var experience_value: int = 2 
@export var magnet_speed: float = 150.0 
@export var magnet_activation_distance: float = 80.0 

var _magnet_activation_distance_sq: float
var player_node 
var physics_frames_active: int = 0 

var is_elite_drop: bool = false

const ELITE_DROP_COLOR_A: Color = Color(1.0, 0.9, 0.3, 1.0) # Bright Yellow/Gold
const ELITE_DROP_COLOR_B: Color = Color(1.0, 0.6, 0.0, 1.0) # Orange
const ELITE_FLASH_CYCLE_DURATION: float = 0.8 
const ELITE_SCALE_PULSE_AMOUNT: float = 1.15 
const ELITE_SCALE_PULSE_DURATION: float = 0.4 # Should be ELITE_FLASH_CYCLE_DURATION / 2.0 for sync

@onready var sprite: Sprite2D = $Sprite2D # Ensure your visual node is named "Sprite2D"

var _color_tween: Tween = null
var _scale_tween: Tween = null

func _ready():
	set_physics_process(true) 
	add_to_group("exp_drops")
	_magnet_activation_distance_sq = magnet_activation_distance * magnet_activation_distance
	process_mode = Node.PROCESS_MODE_ALWAYS 
	if magnet_speed > 0.0:
		_find_player_node() 
	
	if is_elite_drop: # If set_experience_value was called before _ready
		# is_node_ready() will be false here, so deferring is correct
		call_deferred("_start_elite_visual_effects") 

func _notification(what: int):
	if what == NOTIFICATION_PREDELETE: 
		_kill_tweens() 
	# if what == NOTIFICATION_PARENTED:
		# var parent_node = get_parent()
	# if what == NOTIFICATION_EXIT_TREE:
		# pass

func _kill_tweens():
	if is_instance_valid(_color_tween):
		_color_tween.kill()
		_color_tween = null
	if is_instance_valid(_scale_tween):
		_scale_tween.kill()
		_scale_tween = null

func _find_player_node():
	if is_instance_valid(player_node): return 
	var players = get_tree().get_nodes_in_group("player_char_group")
	if players.size() > 0: player_node = players[0]

func _physics_process(delta: float):
	physics_frames_active += 1
	if not is_instance_valid(player_node):
		if magnet_speed > 0.0: _find_player_node() 
		if not is_instance_valid(player_node): 
			return 
	if magnet_speed <= 0.0: 
		return

	var direction_to_player = player_node.global_position - global_position
	var distance_sq_to_player = direction_to_player.length_squared()

	if distance_sq_to_player < _magnet_activation_distance_sq:
		var movement_vector = direction_to_player.normalized() * magnet_speed * delta
		global_position += movement_vector

func set_experience_value(value: int, p_is_elite: bool = false):
	experience_value = value
	is_elite_drop = p_is_elite

	if is_elite_drop:
		# Use is_node_ready() to check if _ready() has completed
		if is_node_ready() and is_instance_valid(sprite): 
			_start_elite_visual_effects()
		else: 
			call_deferred("_start_elite_visual_effects")

func _start_elite_visual_effects():
	if not is_instance_valid(self) or not is_inside_tree(): return 
	if not is_instance_valid(sprite): return
	
	_kill_tweens() 

	var original_scale = sprite.scale 
	if original_scale == Vector2.ZERO: original_scale = Vector2.ONE

	_color_tween = create_tween().set_loops()
	_color_tween.set_trans(Tween.TRANS_SINE)
	_color_tween.set_ease(Tween.EASE_IN_OUT)
	sprite.modulate = ELITE_DROP_COLOR_A # Set initial color for the tween
	_color_tween.tween_property(sprite, "modulate", ELITE_DROP_COLOR_B, ELITE_FLASH_CYCLE_DURATION / 2.0)
	_color_tween.tween_property(sprite, "modulate", ELITE_DROP_COLOR_A, ELITE_FLASH_CYCLE_DURATION / 2.0)

	_scale_tween = create_tween().set_loops().set_parallel(true)
	_scale_tween.set_trans(Tween.TRANS_SINE)
	_scale_tween.set_ease(Tween.EASE_IN_OUT)
	_scale_tween.tween_property(sprite, "scale", original_scale * ELITE_SCALE_PULSE_AMOUNT, ELITE_FLASH_CYCLE_DURATION / 2.0)
	_scale_tween.tween_property(sprite, "scale", original_scale, ELITE_FLASH_CYCLE_DURATION / 2.0)


func collected():
	_kill_tweens() 
	queue_free()
 
==== H:\Game Creation\testing-environ\Scripts\game.gd ==== 
# game.gd
# Main game logic.
# Corrected LEVEL_UP_SCREEN_SCENE preload to point to NewLevelUpScreen.tscn
# _get_upgrade_options_for_player is still simplified for this test.
extends Node2D

# --- Preloads ---
const GAME_OVER_SCREEN_SCENE = preload("res://Scenes/UI/GameOverScreen.tscn")
const LEVEL_UP_SCREEN_SCENE = preload("res://Scenes/UI/NewLevelUpScreen.tscn") # CORRECTED PATH)

@onready var enemy_spawn_timer: Timer = $EnemySpawnTimer
@onready var enemies_container: Node2D = $EnemiesContainer
@onready var drops_container: Node2D = $DropsContainer
@onready var boss_container: Node2D = $BossContainer 
var camera: Camera2D
var game_ui_node
var game_over_screen_instance
var level_up_screen_instance
var player_node: PlayerCharacter

# --- Spawn Configuration (Tunable) ---
@export var spawn_margin: float = 100.0
@export var player_movement_threshold: float = 20.0 
@export var forward_spawn_bias_chance: float = 0.75 
var base_spawn_interval: float = 3.5 
var min_spawn_interval: float = 0.25 
var current_spawn_interval: float
var enemies_per_batch: int = 3 

const ORIGINAL_SPAWN_MARGIN: float = 100.0
const ORIGINAL_PLAYER_MOVEMENT_THRESHOLD: float = 20.0
const ORIGINAL_FORWARD_SPAWN_BIAS_CHANCE: float = 0.75
const ORIGINAL_BASE_SPAWN_INTERVAL: float = 3.5
const ORIGINAL_MIN_SPAWN_INTERVAL: float = 0.25
const ORIGINAL_ENEMIES_PER_BATCH: int = 3

# --- DDS & Difficulty Scaling (Tunable) ---
var current_dds: float = 0.0
var is_currently_hardcore_phase: bool = false
var dds_spawn_rate_factor: float = 0.0020 
var hardcore_spawn_rate_multiplier: float = 1.75 

const ORIGINAL_DDS_SPAWN_RATE_FACTOR: float = 0.0020
const ORIGINAL_HARDCORE_SPAWN_RATE_MULTIPLIER: float = 1.75

# --- Enemy Definitions & Active Pool (Tunable) ---
@export var enemy_data_files: Array[String] = [
	"res://DataResources/Enemies/slime_green_data.tres",
	"res://DataResources/Enemies/slime_blue_data.tres", 
	"res://DataResources/Enemies/slime_red_data.tres",   
	"res://DataResources/Enemies/slime_tall_light_blue_data.tres" 
]
var loaded_enemy_definitions: Array[EnemyData] = []

var max_active_enemy_types: int = 7 
var current_active_enemy_pool: Array[EnemyData] = []
var last_active_pool_refresh_dds: float = -200.0 
var active_pool_refresh_dds_interval: float = 20.0 

const ORIGINAL_MAX_ACTIVE_ENEMY_TYPES: int = 7
const ORIGINAL_ACTIVE_POOL_REFRESH_DDS_INTERVAL: float = 20.0

# --- Enemy Count Management (Tunable) ---
var current_active_enemy_count: int = 0
var target_on_screen_enemies: int = 15 
var enemy_count_update_dds_interval: float = 35.0 
var last_enemy_count_update_dds: float = -100.0 
var debug_override_target_enemies: bool = false
var debug_target_enemies_value: int = 15

const ORIGINAL_ENEMY_COUNT_UPDATE_DDS_INTERVAL: float = 35.0

# --- Global Threat Pool (Tunable) ---
var global_unspent_threat_pool: int = 0
var threat_pool_spawn_threshold: int = 25 
var threat_pool_batch_multiplier: float = 1.5 
var culling_check_timer: Timer 
var culling_timer_wait_time: float = 3.0

const ORIGINAL_THREAT_POOL_SPAWN_THRESHOLD: int = 25
const ORIGINAL_THREAT_POOL_BATCH_MULTIPLIER: float = 1.5
const ORIGINAL_CULLING_TIMER_WAIT_TIME: float = 3.0

# --- Boss & Event Management (Tunable Random Event Interval) ---
var boss_encounters: Array[Dictionary] = [
	{"id": "slime_king", "dds_trigger": 700, "scene_path": "res://Scenes/Bosses/slime_king_boss.tscn", "cleared": false, "reward_dds_bonus": 150},
	{"id": "hardcore_challenger_1", "dds_trigger": 4500, "scene_path": "res://Scenes/Bosses/hardcore_boss_1.tscn", "cleared": false, "reward_dds_bonus": 300, "is_hardcore_boss": true},
]
var current_boss_active: bool = false
var current_boss_node: Node2D = null

var random_event_definitions: Array[Dictionary] = [
	{"id": "altered_slime_king_event", "display_name": "A Familiar Ooze Returns!", "min_dds": 1000, "max_dds": 2000, "weight": 10, "type": "altered_boss", "original_boss_id": "slime_king", "alteration_level": 1},
	{"id": "elite_ambush_event", "display_name": "Elite Ambush!", "min_dds": 500, "max_dds": -1, "weight": 15, "type": "elite_wave", "duration": 25.0, "spawn_interval_multiplier": 0.5, "num_elites_to_spawn": 5},
	{"id": "hardcore_onslaught", "display_name": "Hardcore Onslaught!", "min_dds": 4200, "max_dds": -1, "weight": 30, "type": "special_wave", "duration": 45.0, "spawn_interval_multiplier": 0.2, "only_hardcore_enemies": true}
]
var time_since_last_random_event_check: float = 0.0
var random_event_check_interval: float = 35.0 
var random_event_miss_streak: int = 0
var current_event_active: bool = false
var current_event_id: String = ""
var current_event_end_timer: Timer = null

const ORIGINAL_RANDOM_EVENT_CHECK_INTERVAL: float = 35.0

# --- Weapon Blueprint Loading (NEW SYSTEM) ---
@export var weapon_blueprint_files: Array[String] = [
	"res://DataResources/Weapons/Scythe/scythe_blueprint.tres" 
]
var all_loaded_weapon_blueprints: Array[WeaponBlueprintData] = [] 
var weapon_blueprints_by_id: Dictionary = {} 

# --- General Upgrades (To be replaced by GeneralUpgradeCardData resources later) ---
@export var general_upgrade_card_paths: Array[String] = [] 
var loaded_general_upgrades: Array[GeneralUpgradeCardData] = [] 
var _temp_old_general_stat_upgrades: Array[Dictionary] = [ 
	{"id": "gen_max_health_1", "title": "Vitality", "description": "Increases Max Health by 20.", "type": "stat_boost_flat", "stat_key_target": "max_health", "value": 20.0, "modification_type": "flat_add", "target_scope": "player_stats"},
	{"id": "gen_speed_1", "title": "Swiftness", "description": "Increases Movement Speed by 7%.", "type": "stat_boost_percent", "stat_key_target": "movement_speed", "value": 0.07, "modification_type": "percent_add_to_base", "target_scope": "player_stats"},
	{"id": "gen_might_1", "title": "Might", "description": "Increases global flat damage by 3.", "type": "stat_boost_flat", "stat_key_target": "global_flat_damage_add", "value": 3.0, "modification_type": "flat_add", "target_scope": "player_stats"}
]

signal weapon_blueprints_ready


func _ready():
	_load_all_weapon_blueprints() 
	_test_print_loaded_weapon_blueprints() 
	_load_all_general_upgrades()
	emit_signal("weapon_blueprints_ready") 

	current_spawn_interval = base_spawn_interval 
	camera = get_viewport().get_camera_2d()

	for path in enemy_data_files:
		var enemy_data_res = load(path) as EnemyData
		if enemy_data_res: loaded_enemy_definitions.append(enemy_data_res)
		else: print("ERROR (game.gd): Failed to load EnemyData resource at: ", path)
	if not loaded_enemy_definitions.is_empty():
		loaded_enemy_definitions.sort_custom(func(a,b): return a.min_DDS_to_spawn < b.min_DDS_to_spawn)

	game_ui_node = get_node_or_null("GameUI")
	if is_instance_valid(game_ui_node):
		if game_ui_node.has_signal("dds_changed"):
			if not game_ui_node.is_connected("dds_changed", Callable(self, "_on_dds_changed")):
				game_ui_node.dds_changed.connect(Callable(self, "_on_dds_changed"))
		if game_ui_node.has_method("get_dynamic_difficulty_score"): current_dds = game_ui_node.get_dynamic_difficulty_score()
		if game_ui_node.has_method("is_in_hardcore_phase"): is_currently_hardcore_phase = game_ui_node.is_in_hardcore_phase()
		
		_update_target_on_screen_enemies(); last_enemy_count_update_dds = current_dds
		_refresh_active_enemy_pool(); last_active_pool_refresh_dds = current_dds
		if game_ui_node.has_method("update_culled_enemies_display"): game_ui_node.update_culled_enemies_display(current_active_enemy_count)
		if game_ui_node.has_method("update_threat_pool_display"): game_ui_node.update_threat_pool_display(global_unspent_threat_pool)
	else: print("ERROR (game.gd): GameUI node not found.")

	if not is_instance_valid(camera):
		if is_instance_valid(enemy_spawn_timer): enemy_spawn_timer.stop()
	else:
		if is_instance_valid(enemy_spawn_timer):
			enemy_spawn_timer.wait_time = current_spawn_interval
			if not enemy_spawn_timer.is_connected("timeout", Callable(self, "_on_enemy_spawn_timer_timeout")):
				enemy_spawn_timer.timeout.connect(Callable(self, "_on_enemy_spawn_timer_timeout"))
			enemy_spawn_timer.start()

	var players = get_tree().get_nodes_in_group("player_char_group")
	if players.size() > 0:
		player_node = players[0] as PlayerCharacter
		if player_node.has_signal("player_has_died"): player_node.player_has_died.connect(Callable(self, "_on_player_has_died"))
		if player_node.has_signal("player_level_up"): player_node.player_level_up.connect(Callable(self, "_on_player_level_up"))
		if player_node.has_signal("player_class_tier_upgraded"): player_node.player_class_tier_upgraded.connect(Callable(self, "_on_player_class_tier_upgraded"))
	
	_update_spawn_interval_from_dds()

	culling_check_timer = Timer.new(); culling_check_timer.name = "EnemyCullingTimer"
	culling_check_timer.wait_time = culling_timer_wait_time 
	culling_check_timer.one_shot = false
	culling_check_timer.timeout.connect(Callable(self, "_on_culling_check_timer_timeout"))
	add_child(culling_check_timer); culling_check_timer.start()

func _load_all_weapon_blueprints():
	all_loaded_weapon_blueprints.clear()
	weapon_blueprints_by_id.clear()
	for path in weapon_blueprint_files:
		var bp_res = load(path) as WeaponBlueprintData
		if is_instance_valid(bp_res):
			all_loaded_weapon_blueprints.append(bp_res)
			if bp_res.id != &"":
				weapon_blueprints_by_id[bp_res.id] = bp_res
			else:
				print_debug("ERROR (game.gd): WeaponBlueprintData at '", path, "' has an empty ID.")
		else:
			print_debug("ERROR (game.gd): Failed to load WeaponBlueprintData from path: ", path)

func _load_all_general_upgrades(): 
	loaded_general_upgrades.clear()
	for path in general_upgrade_card_paths:
		var card_res = load(path) as GeneralUpgradeCardData
		if is_instance_valid(card_res):
			loaded_general_upgrades.append(card_res)
		else:
			print_debug("ERROR (game.gd): Failed to load GeneralUpgradeCardData from path: ", path)


func _test_print_loaded_weapon_blueprints():
	print_debug("--- Loaded Weapon Blueprints Test ---")
	if all_loaded_weapon_blueprints.is_empty():
		print_debug("No weapon blueprints were loaded or found in 'weapon_blueprint_files' array.")
		return

	for bp_data in all_loaded_weapon_blueprints:
		if not is_instance_valid(bp_data):
			print_debug("  Found an invalid blueprint in the loaded list.")
			continue
		
		print_debug("Weapon ID: '", bp_data.id, "', Title: '", bp_data.title, "'")
		var scene_path_str = "N/A"
		if is_instance_valid(bp_data.weapon_scene) and bp_data.weapon_scene.resource_path != "":
			scene_path_str = bp_data.weapon_scene.resource_path
		print_debug("  Scene: ", scene_path_str)
		print_debug("  Cooldown: ", bp_data.cooldown, ", Max Level: ", bp_data.max_level)
		print_debug("  Initial Specific Stats: ", bp_data.initial_specific_stats)
		print_debug("  Available Upgrades (%s):" % bp_data.available_upgrades.size())
		for upgrade_res_idx in range(bp_data.available_upgrades.size()):
			var upgrade_res = bp_data.available_upgrades[upgrade_res_idx]
			if upgrade_res is WeaponUpgradeData:
				var upg_data = upgrade_res as WeaponUpgradeData
				print_debug("    - Upgrade [", upgrade_res_idx, "] ID: '", upg_data.upgrade_id, "', Title: '", upg_data.title, "'")
				print_debug("      Effects (%s):" % upg_data.effects.size())
				for effect_res_idx in range(upg_data.effects.size()):
					var effect_res = upg_data.effects[effect_res_idx]
					if not is_instance_valid(effect_res):
						print_debug("        Effect [", effect_res_idx, "]: Invalid resource.")
						continue
					print_debug("        Effect [", effect_res_idx, "] TypeID: '", effect_res.effect_type_id, "' (Class: '", effect_res.get_class(),"')")
					
					if effect_res is StatModificationEffectData:
						var stat_mod = effect_res as StatModificationEffectData
						# CORRECTED: Use get_value() instead of .value
						var effect_val = stat_mod.get_value() 
						print_debug("          StatMod: Scope='", stat_mod.target_scope, "', Key='", stat_mod.stat_key, "', Type='", stat_mod.modification_type, "', Val=", effect_val)
					
					elif effect_res is CustomFlagEffectData:
						var flag_mod = effect_res as CustomFlagEffectData
						# Corrected to use target_scope from base class
						print_debug("          FlagMod: Scope='", flag_mod.target_scope, "', Key='", flag_mod.flag_key, "', Val=", flag_mod.flag_value)
					
					elif effect_res is TriggerAbilityEffectData:
						var trigger_mod = effect_res as TriggerAbilityEffectData
						# Corrected to use target_scope from base class
						print_debug("          TriggerAbility: Scope='", trigger_mod.target_scope, "', ID='", trigger_mod.ability_id, "', Params=", trigger_mod.ability_params)
					
					elif effect_res is StatusEffectApplicationData:
						var status_app_mod = effect_res as StatusEffectApplicationData
						# Corrected to use target_scope from base class
						print_debug("          StatusApp: Scope='", status_app_mod.target_scope, "', Path='", status_app_mod.status_effect_resource_path, "', Chance=", status_app_mod.application_chance, ", DurationOvr=", status_app_mod.duration_override)
					
					else:
						print_debug("          Unknown/Base EffectData: DevNote='", effect_res.developer_note, "'")
			else:
				print_debug("    - Invalid upgrade resource found at index ", upgrade_res_idx, " in blueprint's available_upgrades array. Type: ", typeof(upgrade_res))
		print_debug("---")

func _physics_process(delta: float):
	if current_boss_active or current_event_active: return
	if not current_boss_active and not current_event_active:
		time_since_last_random_event_check += delta

func increment_active_enemy_count():
	current_active_enemy_count += 1
	if is_instance_valid(game_ui_node) and game_ui_node.has_method("update_culled_enemies_display"):
		game_ui_node.update_culled_enemies_display(current_active_enemy_count)

func decrement_active_enemy_count():
	current_active_enemy_count = max(0, current_active_enemy_count - 1)
	if is_instance_valid(game_ui_node) and game_ui_node.has_method("update_culled_enemies_display"):
		game_ui_node.update_culled_enemies_display(current_active_enemy_count)

func add_to_global_threat_pool(amount: int):
	global_unspent_threat_pool += amount
	if is_instance_valid(game_ui_node) and game_ui_node.has_method("update_threat_pool_display"):
		game_ui_node.update_threat_pool_display(global_unspent_threat_pool)

func _on_dds_changed(new_dds_score: float):
	var previous_dds_for_bucketing = current_dds 
	current_dds = new_dds_score 
	if is_instance_valid(game_ui_node) and game_ui_node.has_method("is_in_hardcore_phase"):
		is_currently_hardcore_phase = game_ui_node.is_in_hardcore_phase()
	_update_spawn_interval_from_dds()
	var old_enemy_count_bucket = floor(previous_dds_for_bucketing / enemy_count_update_dds_interval)
	var new_enemy_count_bucket = floor(new_dds_score / enemy_count_update_dds_interval)
	if new_enemy_count_bucket > old_enemy_count_bucket or last_enemy_count_update_dds < 0: 
		_update_target_on_screen_enemies(); last_enemy_count_update_dds = new_dds_score
	var old_dds_bucket_pool = floor(previous_dds_for_bucketing / active_pool_refresh_dds_interval)
	var new_dds_bucket_pool = floor(new_dds_score / active_pool_refresh_dds_interval)
	if new_dds_bucket_pool > old_dds_bucket_pool or last_active_pool_refresh_dds < 0: 
		_refresh_active_enemy_pool(); last_active_pool_refresh_dds = new_dds_score

func _update_target_on_screen_enemies():
	if debug_override_target_enemies:
		target_on_screen_enemies = debug_target_enemies_value
		return 
	var time_elapsed_minutes = 0.0
	if is_instance_valid(game_ui_node) and game_ui_node.has_method("get_elapsed_seconds"):
		time_elapsed_minutes = float(game_ui_node.get_elapsed_seconds()) / 60.0
	var calculated_target: int
	if time_elapsed_minutes < 6.0: calculated_target = int(lerpf(10.0, 30.0, time_elapsed_minutes / 6.0))
	elif time_elapsed_minutes < 8.0: calculated_target = int(lerpf(30.0, 40.0, (time_elapsed_minutes - 6.0) / 2.0))
	elif current_dds < 800: calculated_target = int(lerpf(40.0, 80.0, current_dds / 800.0))
	elif current_dds < 2500: calculated_target = int(lerpf(80.0, 150.0, (current_dds - 800.0) / 1700.0))
	elif current_dds < 4000: calculated_target = int(lerpf(150.0, 200.0, (current_dds - 2500.0) / 1500.0))
	else: calculated_target = 200
	if is_currently_hardcore_phase:
		target_on_screen_enemies = int(calculated_target * 1.35); target_on_screen_enemies = min(target_on_screen_enemies, 275)
	else: target_on_screen_enemies = clamp(calculated_target, 10, 200)

func _update_spawn_interval_from_dds():
	if is_instance_valid(enemy_spawn_timer):
		var interval_divisor = 1.0 + (dds_spawn_rate_factor * current_dds)
		if is_currently_hardcore_phase: interval_divisor *= hardcore_spawn_rate_multiplier
		current_spawn_interval = base_spawn_interval / interval_divisor
		current_spawn_interval = max(min_spawn_interval, current_spawn_interval)
		enemy_spawn_timer.wait_time = current_spawn_interval
		if enemy_spawn_timer.is_stopped() and not current_boss_active and not current_event_active : enemy_spawn_timer.start()
		elif not enemy_spawn_timer.is_stopped(): enemy_spawn_timer.start()

func _refresh_active_enemy_pool():
	if loaded_enemy_definitions.is_empty(): return
	print_debug("--- Refreshing Active Enemy Pool (DDS: %.1f) ---" % current_dds)
	var dds_eligible_enemies: Array[EnemyData] = []
	for enemy_data_res in loaded_enemy_definitions:
		if not is_instance_valid(enemy_data_res): continue 
		var max_dds = enemy_data_res.max_DDS_to_spawn
		if current_dds >= enemy_data_res.min_DDS_to_spawn and \
		   (current_dds < max_dds or max_dds < 0.0): 
			dds_eligible_enemies.append(enemy_data_res)
	current_active_enemy_pool.clear()
	if dds_eligible_enemies.is_empty(): 
		print_debug("No DDS eligible enemies found for active pool.")
		print_debug("---------------------------------------------------")
		return
	dds_eligible_enemies.sort_custom(func(a,b): 
		var relevance_a = abs(current_dds - a.min_DDS_to_spawn)
		var relevance_b = abs(current_dds - b.min_DDS_to_spawn)
		if abs(relevance_a - relevance_b) < 0.01 : return a.spawn_weight > b.spawn_weight 
		return relevance_a < relevance_b
	)
	var temp_pool: Array[EnemyData] = []; var current_slot_cost_filled = 0
	var added_enemy_ids: Dictionary = {}
	for enemy_data in dds_eligible_enemies:
		if added_enemy_ids.has(enemy_data.id): continue
		if current_slot_cost_filled + enemy_data.ideal_active_pool_slot_cost <= max_active_enemy_types:
			temp_pool.append(enemy_data); added_enemy_ids[enemy_data.id] = true
			current_slot_cost_filled += enemy_data.ideal_active_pool_slot_cost
		if current_slot_cost_filled >= max_active_enemy_types: break
	if current_slot_cost_filled < max_active_enemy_types and dds_eligible_enemies.size() > temp_pool.size():
		var remaining_eligible_shuffled = dds_eligible_enemies.filter(func(ed): return not added_enemy_ids.has(ed.id))
		remaining_eligible_shuffled.shuffle()
		for enemy_data in remaining_eligible_shuffled:
			if added_enemy_ids.has(enemy_data.id): continue
			if current_slot_cost_filled + enemy_data.ideal_active_pool_slot_cost <= max_active_enemy_types:
				temp_pool.append(enemy_data); added_enemy_ids[enemy_data.id] = true
				current_slot_cost_filled += enemy_data.ideal_active_pool_slot_cost
			if current_slot_cost_filled >= max_active_enemy_types: break
	current_active_enemy_pool = temp_pool

func _select_enemy_from_active_pool() -> EnemyData:
	if current_active_enemy_pool.is_empty(): return null
	var total_weight: float = 0.0
	for edr in current_active_enemy_pool: total_weight += edr.spawn_weight
	if total_weight <= 0.0: return current_active_enemy_pool.pick_random() if not current_active_enemy_pool.is_empty() else null
	var rand_w = randf() * total_weight; var current_w_sum: float = 0.0
	for edrc in current_active_enemy_pool:
		current_w_sum += edrc.spawn_weight
		if rand_w <= current_w_sum: return edrc
	return current_active_enemy_pool.pick_random() if not current_active_enemy_pool.is_empty() else null

func _calculate_spawn_position_for_enemy(near_player: bool = false, offset_vector: Vector2 = Vector2.ZERO) -> Vector2:
	if not is_instance_valid(camera) or not is_instance_valid(player_node): return Vector2.ZERO
	if near_player:
		var random_angle = randf_range(0, TAU)
		var random_distance = randf_range(75, 125) 
		return player_node.global_position + Vector2.RIGHT.rotated(random_angle) * random_distance + offset_vector
	var spawn_position = Vector2.ZERO
	var viewport_pixel_size = get_viewport().get_visible_rect().size; var camera_current_zoom = camera.zoom
	var world_view_width = viewport_pixel_size.x / camera_current_zoom.x; var world_view_height = viewport_pixel_size.y / camera_current_zoom.y
	var top_left_global = camera.global_position - Vector2(world_view_width / 2.0, world_view_height / 2.0)
	var min_x_visible = top_left_global.x; var max_x_visible = top_left_global.x + world_view_width
	var min_y_visible = top_left_global.y; var max_y_visible = top_left_global.y + world_view_height
	var side = randi() % 4
	if player_node.get_velocity().length_squared() > (player_movement_threshold * player_movement_threshold):
		var player_velocity = player_node.get_velocity(); var forward_side = -1
		if abs(player_velocity.x) > abs(player_velocity.y): forward_side = 3 if player_velocity.x > 0 else 2
		else: forward_side = 1 if player_velocity.y > 0 else 0
		if randf() < forward_spawn_bias_chance: side = forward_side
	match side:
		0: spawn_position = Vector2(randf_range(min_x_visible, max_x_visible), min_y_visible - spawn_margin)
		1: spawn_position = Vector2(randf_range(min_x_visible, max_x_visible), max_y_visible + spawn_margin)
		2: spawn_position = Vector2(min_x_visible - spawn_margin, randf_range(min_y_visible, max_y_visible))
		3: spawn_position = Vector2(max_x_visible + spawn_margin, randf_range(min_y_visible, max_y_visible))
	return spawn_position + offset_vector

func _spawn_actual_enemy(enemy_data: EnemyData, position: Vector2, force_elite_type: StringName = &""):
	if not is_instance_valid(enemy_data) or enemy_data.scene_path.is_empty(): 
		print_debug("ERROR (_spawn_actual_enemy): Invalid enemy_data or empty scene_path for ID: ", enemy_data.id if is_instance_valid(enemy_data) else "UNKNOWN")
		return
	var enemy_scene = load(enemy_data.scene_path) as PackedScene
	if not enemy_scene: print_debug("ERROR (_spawn_actual_enemy): Could not load scene: ", enemy_data.scene_path); return
	
	var enemy_instance = enemy_scene.instantiate() as BaseEnemy
	if not is_instance_valid(enemy_instance): 
		print_debug("ERROR (_spawn_actual_enemy): Failed to instance: ", enemy_data.scene_path)
		return

	enemy_instance.global_position = position
	enemies_container.add_child(enemy_instance) 

	if enemy_instance.has_method("initialize_from_data"): 
		enemy_instance.initialize_from_data(enemy_data)
	
	var dds_contrib_elite = current_dds - enemy_data.min_DDS_to_spawn
	
	if force_elite_type != &"": 
		var can_be_this_elite = enemy_data.elite_types_available.has(force_elite_type)
		if can_be_this_elite or force_elite_type == &"debug_generic_elite":
			if enemy_instance.has_method("make_elite"):
				enemy_instance.make_elite(force_elite_type, dds_contrib_elite, enemy_data)
	else: 
		var elite_c = 0.0
		if current_dds >= enemy_data.min_DDS_for_elites_to_appear:
			elite_c = 0.05 + (dds_contrib_elite * 0.0002); elite_c = clamp(elite_c, 0.0, 0.60)
		if is_currently_hardcore_phase: elite_c = min(0.85, elite_c * 1.5)
		if randf() < elite_c and not enemy_data.elite_types_available.is_empty():
			var chosen_tag = enemy_data.elite_types_available.pick_random()
			if enemy_instance.has_method("make_elite"): 
				enemy_instance.make_elite(chosen_tag, dds_contrib_elite, enemy_data)
	
	if not enemy_instance.is_elite and "experience_to_drop" in enemy_instance:
		enemy_instance.experience_to_drop = enemy_data.base_exp_drop
	
func _on_enemy_spawn_timer_timeout():
	if not is_instance_valid(camera) or not is_instance_valid(player_node): return
	if current_boss_active or current_event_active: return
	var spawned_from_threat = false
	if global_unspent_threat_pool >= threat_pool_spawn_threshold:
		var num_threat_spawn = int(ceil(enemies_per_batch * threat_pool_batch_multiplier))
		for _i in range(num_threat_spawn):
			if current_active_enemy_count >= target_on_screen_enemies + enemies_per_batch: break
			var enemy_data = _select_enemy_from_active_pool()
			if is_instance_valid(enemy_data): _spawn_actual_enemy(enemy_data, _calculate_spawn_position_for_enemy())
		global_unspent_threat_pool = max(0, global_unspent_threat_pool - threat_pool_spawn_threshold)
		if is_instance_valid(game_ui_node) and game_ui_node.has_method("update_threat_pool_display"):
			game_ui_node.update_threat_pool_display(global_unspent_threat_pool)
		spawned_from_threat = true
	if current_active_enemy_count < target_on_screen_enemies or spawned_from_threat:
		var num_regular_spawn = enemies_per_batch
		if spawned_from_threat and enemies_per_batch > 1 : num_regular_spawn = max(1, enemies_per_batch / 2)
		for _i in range(num_regular_spawn):
			if current_active_enemy_count >= target_on_screen_enemies + (enemies_per_batch / 2): break
			var enemy_data = _select_enemy_from_active_pool()
			if is_instance_valid(enemy_data): _spawn_actual_enemy(enemy_data, _calculate_spawn_position_for_enemy())

func _on_culling_check_timer_timeout():
	if not is_instance_valid(player_node) or not is_instance_valid(camera): return
	if current_boss_active or current_event_active: return
	var cull_dist_sq = pow(get_viewport().get_visible_rect().size.length() * 1.75, 2)
	for child_node in enemies_container.get_children().duplicate():
		if child_node is BaseEnemy:
			var enemy = child_node as BaseEnemy
			if is_instance_valid(enemy) and not enemy.is_dead_flag:
				if enemy.global_position.distance_squared_to(player_node.global_position) > cull_dist_sq:
					if enemy.has_method("cull_self_and_report_threat"): enemy.cull_self_and_report_threat()

func get_loaded_enemy_definitions_for_debug() -> Array[EnemyData]: return loaded_enemy_definitions
func get_enemy_data_by_id_for_debug(id: StringName) -> EnemyData:
	for enemy_data_res in loaded_enemy_definitions:
		if is_instance_valid(enemy_data_res) and enemy_data_res.id == id: return enemy_data_res
	return null
func get_current_dds_for_debug() -> float: return current_dds

func get_all_weapon_blueprints_for_debug() -> Array[WeaponBlueprintData]: 
	return all_loaded_weapon_blueprints 

func get_weapon_blueprint_by_id(weapon_id_to_find: StringName) -> WeaponBlueprintData:
	if weapon_blueprints_by_id.has(weapon_id_to_find):
		return weapon_blueprints_by_id[weapon_id_to_find]
	for bp_data in all_loaded_weapon_blueprints:
		if is_instance_valid(bp_data) and bp_data.id == weapon_id_to_find:
			return bp_data
	print_debug("WARNING (game.gd): get_weapon_blueprint_by_id: Blueprint '", weapon_id_to_find, "' not found.")
	return null

func get_weapon_next_level_upgrades(weapon_id_str: String, current_weapon_instance_data: Dictionary) -> Array[WeaponUpgradeData]: 
	var weapon_bp = get_weapon_blueprint_by_id(StringName(weapon_id_str))
	if not is_instance_valid(weapon_bp): 
		print_debug("get_weapon_next_level_upgrades: Blueprint not found for ID: ", weapon_id_str)
		return []
	var current_level = current_weapon_instance_data.get("weapon_level", 0)
	var specific_stats = current_weapon_instance_data.get("specific_stats", {})
	if current_level >= weapon_bp.max_level: return []
	var valid_next_upgrades: Array[WeaponUpgradeData] = []
	for upgrade_data_res in weapon_bp.available_upgrades:
		if not is_instance_valid(upgrade_data_res) or not upgrade_data_res is WeaponUpgradeData: continue
		var upgrade_data = upgrade_data_res as WeaponUpgradeData
		var acquired_flag_to_check = upgrade_data.set_acquired_flag_on_weapon 
		if acquired_flag_to_check == &"" and upgrade_data.max_stacks == 1: 
			acquired_flag_to_check = StringName(str(upgrade_data.upgrade_id) + "_acquired")
		if acquired_flag_to_check != &"" and specific_stats.get(acquired_flag_to_check, false) == true: continue 
		var prerequisites_met = true
		for prereq_id_sname in upgrade_data.prerequisites_on_this_weapon:
			var prereq_upgrade_def = weapon_bp.get_upgrade_by_id(prereq_id_sname) 
			var prereq_flag_key_to_check = prereq_id_sname 
			if is_instance_valid(prereq_upgrade_def) and prereq_upgrade_def.set_acquired_flag_on_weapon != &"":
				prereq_flag_key_to_check = prereq_upgrade_def.set_acquired_flag_on_weapon
			elif is_instance_valid(prereq_upgrade_def): 
				prereq_flag_key_to_check = StringName(str(prereq_upgrade_def.upgrade_id) + "_acquired")
			if not specific_stats.get(prereq_flag_key_to_check, false) == true:
				prerequisites_met = false; break
		if not prerequisites_met: continue
		valid_next_upgrades.append(upgrade_data)
	return valid_next_upgrades

func _on_player_level_up(new_level: int): 
	if not is_instance_valid(player_node): get_tree().paused = false; return
	get_tree().paused = true
	if is_instance_valid(level_up_screen_instance): level_up_screen_instance.queue_free(); level_up_screen_instance = null
	
	if not is_instance_valid(LEVEL_UP_SCREEN_SCENE): 
		get_tree().paused = false; 
		print_debug("ERROR (game.gd): LEVEL_UP_SCREEN_SCENE is not a valid scene. Check path.")
		return
	
	level_up_screen_instance = LEVEL_UP_SCREEN_SCENE.instantiate()
	if not is_instance_valid(level_up_screen_instance): 
		get_tree().paused = false; 
		print_debug("ERROR (game.gd): Failed to instance LevelUpScreen scene.")
		return
	
	var chosen_options: Array = _get_upgrade_options_for_player() 
	
	print_debug("game.gd: _on_player_level_up - chosen_options to display: ", chosen_options) 
	
	if chosen_options.is_empty():
		if is_instance_valid(level_up_screen_instance): level_up_screen_instance.queue_free()
		get_tree().paused = false; print_debug("No upgrade options available for level up."); return
		
	if level_up_screen_instance.has_method("display_options"):
		# Using call_deferred again, as the "Array to Array" issue was likely a type hint problem
		# which we solved by changing the signature in NewLevelUpScreen.gd
		level_up_screen_instance.call_deferred("display_options", chosen_options) 
	else: 
		get_tree().paused = false; 
		print_debug("ERROR (game.gd): The new LevelUpScreen instance is missing the 'display_options' method.")
		return
	
	add_child(level_up_screen_instance)
	if level_up_screen_instance.has_signal("upgrade_chosen"):
		if not level_up_screen_instance.is_connected("upgrade_chosen", Callable(self, "_on_upgrade_chosen")):
			level_up_screen_instance.upgrade_chosen.connect(Callable(self, "_on_upgrade_chosen"))
	level_up_screen_instance.process_mode = Node.PROCESS_MODE_ALWAYS

# The key function to modify is _get_upgrade_options_for_player
func _get_upgrade_options_for_player() -> Array: 
	print_debug("--- Getting Upgrade Options (With Full Resource Data) ---")
	var options_pool: Array = [] 

	# 1. Get General Upgrades (from loaded .tres files)
	for card_res in loaded_general_upgrades: 
		if is_instance_valid(card_res):
			# TODO: Add prerequisite and stack limit checks for general upgrades
			var card_presentation = {
				"id_for_card_selection": str(card_res.id),
				"title": card_res.title, "description": card_res.description,
				"icon_path": card_res.icon.resource_path if is_instance_valid(card_res.icon) else "",
				"type": "general_upgrade", 
				"resource_data": card_res # RESTORED
			}
			options_pool.append(card_presentation)
	# Fallback to old general upgrades if new system is empty (temporary during transition)
	if loaded_general_upgrades.is_empty() and not _temp_old_general_stat_upgrades.is_empty(): 
		for old_gen_upgrade_dict in _temp_old_general_stat_upgrades:
			var temp_card_dict = old_gen_upgrade_dict.duplicate(true)
			temp_card_dict["type"] = "general_stat_upgrade_OLD" 
			temp_card_dict["id_for_card_selection"] = old_gen_upgrade_dict.id
			options_pool.append(temp_card_dict)

	# 2. Get Weapon Upgrades
	if is_instance_valid(player_node) and player_node.has_method("get_active_weapons_data_for_level_up"):
		var player_active_weapons_instance_data: Array[Dictionary] = player_node.get_active_weapons_data_for_level_up()
		var offered_weapon_ids_for_upgrade_this_round : Array[StringName] = []
		for active_weapon_dict in player_active_weapons_instance_data:
			var weapon_id_sname = active_weapon_dict.get("id") as StringName
			if weapon_id_sname == null or weapon_id_sname == &"": continue
			var next_upgrades_for_this_weapon: Array[WeaponUpgradeData] = get_weapon_next_level_upgrades(str(weapon_id_sname), active_weapon_dict)
			if not next_upgrades_for_this_weapon.is_empty():
				var chosen_upgrade_res = next_upgrades_for_this_weapon.pick_random()
				var upgrade_card_presentation = {
					"id_for_card_selection": str(weapon_id_sname) + "_" + str(chosen_upgrade_res.upgrade_id),
					"title": chosen_upgrade_res.title, "description": chosen_upgrade_res.description,
					"icon_path": chosen_upgrade_res.icon.resource_path if is_instance_valid(chosen_upgrade_res.icon) else "",
					"type": "weapon_upgrade", "weapon_id_to_upgrade": str(weapon_id_sname), 
					"resource_data": chosen_upgrade_res # RESTORED
				}
				options_pool.append(upgrade_card_presentation)
				offered_weapon_ids_for_upgrade_this_round.append(weapon_id_sname)

	# 3. Offer New Weapons
	if is_instance_valid(player_node) and player_node.has_method("get_active_weapons_data_for_level_up"):
		var current_player_active_weapons = player_node.get_active_weapons_data_for_level_up()
		if current_player_active_weapons.size() < 6: 
			var potential_new_weapons_pool : Array = []
			for bp_data in all_loaded_weapon_blueprints:
				if not is_instance_valid(bp_data): continue
				var bp_id_sname = bp_data.id; var already_have_it = false
				for p_wep_dict in current_player_active_weapons:
					if p_wep_dict.get("id") == bp_id_sname: already_have_it = true; break
				if not already_have_it: 
					var can_offer_to_class = true
					if not bp_data.class_tag_restrictions.is_empty():
						if is_instance_valid(player_node) and player_node.has_method("get_current_basic_class_enum"):
							var player_class_enum = player_node.get_current_basic_class_enum()
							if not player_class_enum in bp_data.class_tag_restrictions: can_offer_to_class = false
						else: can_offer_to_class = false 
					if can_offer_to_class:
						var new_weapon_offer_presentation = {
							"id_for_card_selection": str(bp_id_sname), "type": "new_weapon", 
							"title": bp_data.title, "description": bp_data.description,
							"icon_path": bp_data.icon.resource_path if is_instance_valid(bp_data.icon) else "",
							"resource_data": bp_data # RESTORED
						}
						potential_new_weapons_pool.append(new_weapon_offer_presentation)
			if not potential_new_weapons_pool.is_empty():
				potential_new_weapons_pool.shuffle(); options_pool.append(potential_new_weapons_pool[0])

	options_pool.shuffle(); var final_chosen_options: Array = []; var offered_ids_this_selection: Array[StringName] = [] 
	for option_data_dict in options_pool:
		if final_chosen_options.size() >= 3: break
		var current_card_id_raw = option_data_dict.get("id_for_card_selection", option_data_dict.get("id"))
		var current_card_id = StringName(str(current_card_id_raw)) if current_card_id_raw != null else StringName(str(randi()))
		if not offered_ids_this_selection.has(current_card_id):
			final_chosen_options.append(option_data_dict); offered_ids_this_selection.append(current_card_id)
	if final_chosen_options.is_empty() and not _temp_old_general_stat_upgrades.is_empty(): 
		var fallback_option = _temp_old_general_stat_upgrades.pick_random().duplicate(true)
		fallback_option["id_for_card_selection"] = fallback_option.get("id") 
		fallback_option["type"] = "general_stat_upgrade_OLD"
		final_chosen_options.append(fallback_option)
	if final_chosen_options.is_empty():
		final_chosen_options.append({"title": "Continue", "description": "No new upgrades this level.", "type": "skip", "id_for_card_selection": "skip_level"})
	return final_chosen_options


func _on_upgrade_chosen(chosen_upgrade_data_wrapper: Dictionary): 
	if not is_instance_valid(player_node) or not player_node.has_method("apply_upgrade"):
		print_debug("ERROR: Player node or apply_upgrade method missing.")
		if is_instance_valid(level_up_screen_instance): level_up_screen_instance.queue_free(); level_up_screen_instance = null
		get_tree().paused = false; return
	
	# For this test, PlayerCharacter.apply_upgrade will need to know how to handle these simplified dicts
	# OR we restore resource_data if the simple dicts pass the call_deferred test.
	# var data_to_apply = chosen_upgrade_data_wrapper.get("resource_data", chosen_upgrade_data_wrapper) 
	var data_to_apply = chosen_upgrade_data_wrapper # Passing the simplified dictionary for now

	if chosen_upgrade_data_wrapper.get("type") != "skip": 
		player_node.apply_upgrade(data_to_apply) 
	if is_instance_valid(level_up_screen_instance):
		level_up_screen_instance.queue_free(); level_up_screen_instance = null
	get_tree().paused = false

func _on_player_has_died(): 
	if is_instance_valid(enemy_spawn_timer): enemy_spawn_timer.stop()
	if is_instance_valid(culling_check_timer): culling_check_timer.stop()
	if is_instance_valid(enemies_container):
		for enemy_child in enemies_container.get_children():
			if enemy_child.has_method("set_physics_process"): enemy_child.set_physics_process(false)
	var game_over_scene_res = load("res://Scenes/UI/GameOverScreen.tscn") as PackedScene 
	if game_over_scene_res:
		if is_instance_valid(game_over_screen_instance): game_over_screen_instance.queue_free()
		game_over_screen_instance = game_over_scene_res.instantiate(); add_child(game_over_screen_instance)
		if game_over_screen_instance.has_signal("restart_game_requested"):
			if not game_over_screen_instance.is_connected("restart_game_requested", Callable(self, "_on_restart_game_requested")):
				game_over_screen_instance.restart_game_requested.connect(Callable(self, "_on_restart_game_requested"))
		if game_over_screen_instance.has_method("set_process_mode"): game_over_screen_instance.process_mode = Node.PROCESS_MODE_ALWAYS
		get_tree().paused = true
func _on_restart_game_requested(): 
	if game_over_screen_instance and is_instance_valid(game_over_screen_instance):
		game_over_screen_instance.queue_free()
	get_tree().paused = false
	var error_code = get_tree().reload_current_scene()
	if error_code != OK: print("ERROR (Level): Failed to reload scene. Code: ", error_code)
func _on_player_class_tier_upgraded(new_class_id: String, _contributing_basic_classes: Array): 
	print("Level: Player class tier upgraded to ", new_class_id)
	pass
func _on_difficulty_tier_increased(new_tier: int): 
	pass

# --- DEBUG SETTERS for game.gd parameters ---
func debug_set_dds_spawn_rate_factor(value: float): dds_spawn_rate_factor = max(0.0001, value); _update_spawn_interval_from_dds(); print_debug("game.gd DEBUG: dds_spawn_rate_factor set to: ", dds_spawn_rate_factor)
func debug_set_hardcore_spawn_rate_multiplier(value: float): hardcore_spawn_rate_multiplier = max(0.1, value); _update_spawn_interval_from_dds(); print_debug("game.gd DEBUG: hardcore_spawn_rate_multiplier set to: ", hardcore_spawn_rate_multiplier)
func debug_set_base_spawn_interval(value: float): base_spawn_interval = max(0.05, value); _update_spawn_interval_from_dds(); print_debug("game.gd DEBUG: base_spawn_interval set to: ", base_spawn_interval)
func debug_set_min_spawn_interval(value: float): min_spawn_interval = max(0.01, value); _update_spawn_interval_from_dds(); print_debug("game.gd DEBUG: min_spawn_interval set to: ", min_spawn_interval)
func debug_set_enemies_per_batch(value: int): enemies_per_batch = max(1, value); print_debug("game.gd DEBUG: enemies_per_batch set to: ", enemies_per_batch)
func debug_set_active_pool_refresh_dds_interval(value: float): active_pool_refresh_dds_interval = max(5.0, value); print_debug("game.gd DEBUG: active_pool_refresh_dds_interval set to: ", active_pool_refresh_dds_interval)
func debug_set_max_active_enemy_types(value: int): max_active_enemy_types = max(1, value); _refresh_active_enemy_pool(); print_debug("game.gd DEBUG: max_active_enemy_types set to: ", max_active_enemy_types)
func debug_set_enemy_count_update_dds_interval(value: float): enemy_count_update_dds_interval = max(5.0, value); print_debug("game.gd DEBUG: enemy_count_update_dds_interval set to: ", enemy_count_update_dds_interval)
func debug_set_target_on_screen_enemies_override(enable: bool, value: int = -1):
	debug_override_target_enemies = enable
	if enable and value >= 0: debug_target_enemies_value = max(1, value); target_on_screen_enemies = debug_target_enemies_value; print_debug("game.gd DEBUG: Target enemies OVERRIDDEN to: ", target_on_screen_enemies)
	elif not enable: _update_target_on_screen_enemies(); print_debug("game.gd DEBUG: Target enemies override REMOVED. Current target: ", target_on_screen_enemies)
func debug_set_threat_pool_spawn_threshold(value: int): threat_pool_spawn_threshold = max(1, value); print_debug("game.gd DEBUG: threat_pool_spawn_threshold set to: ", threat_pool_spawn_threshold)
func debug_set_threat_pool_batch_multiplier(value: float): threat_pool_batch_multiplier = max(0.1, value); print_debug("game.gd DEBUG: threat_pool_batch_multiplier set to: ", threat_pool_batch_multiplier)
func debug_set_culling_timer_wait_time(value: float):
	culling_timer_wait_time = max(0.5, value)
	if is_instance_valid(culling_check_timer): culling_check_timer.wait_time = culling_timer_wait_time; if not culling_check_timer.is_stopped(): culling_check_timer.start() 
	print_debug("game.gd DEBUG: culling_timer_wait_time set to: ", culling_timer_wait_time)
func debug_set_random_event_check_interval(value: float): random_event_check_interval = max(1.0, value); print_debug("game.gd DEBUG: random_event_check_interval set to: ", random_event_check_interval)
func debug_set_forward_spawn_bias_chance(value: float): forward_spawn_bias_chance = clamp(value, 0.0, 1.0); print_debug("game.gd DEBUG: forward_spawn_bias_chance set to: ", forward_spawn_bias_chance)
func debug_set_spawn_margin(value: float): spawn_margin = max(10.0, value); print_debug("game.gd DEBUG: spawn_margin set to: ", spawn_margin)
func debug_reset_game_parameters_to_defaults():
	spawn_margin = ORIGINAL_SPAWN_MARGIN; player_movement_threshold = ORIGINAL_PLAYER_MOVEMENT_THRESHOLD; forward_spawn_bias_chance = ORIGINAL_FORWARD_SPAWN_BIAS_CHANCE
	base_spawn_interval = ORIGINAL_BASE_SPAWN_INTERVAL; min_spawn_interval = ORIGINAL_MIN_SPAWN_INTERVAL
	enemies_per_batch = ORIGINAL_ENEMIES_PER_BATCH; dds_spawn_rate_factor = ORIGINAL_DDS_SPAWN_RATE_FACTOR
	hardcore_spawn_rate_multiplier = ORIGINAL_HARDCORE_SPAWN_RATE_MULTIPLIER
	max_active_enemy_types = ORIGINAL_MAX_ACTIVE_ENEMY_TYPES
	active_pool_refresh_dds_interval = ORIGINAL_ACTIVE_POOL_REFRESH_DDS_INTERVAL
	enemy_count_update_dds_interval = ORIGINAL_ENEMY_COUNT_UPDATE_DDS_INTERVAL
	debug_override_target_enemies = false 
	threat_pool_spawn_threshold = ORIGINAL_THREAT_POOL_SPAWN_THRESHOLD
	threat_pool_batch_multiplier = ORIGINAL_THREAT_POOL_BATCH_MULTIPLIER
	culling_timer_wait_time = ORIGINAL_CULLING_TIMER_WAIT_TIME
	if is_instance_valid(culling_check_timer): culling_check_timer.wait_time = culling_timer_wait_time
	random_event_check_interval = ORIGINAL_RANDOM_EVENT_CHECK_INTERVAL
	_update_spawn_interval_from_dds(); _update_target_on_screen_enemies(); _refresh_active_enemy_pool()
	print_debug("game.gd DEBUG: All tunable game parameters reset to defaults.")
# Add this function to your game.gd script

func debug_spawn_specific_enemy(enemy_id: StringName, elite_type_override: StringName, count: int, near_player: bool):
	print_debug("game.gd: DEBUG SPAWN REQUEST - ID: ", enemy_id, ", Elite: ", elite_type_override, ", Count: ", count, ", Near Player: ", near_player)

	if not is_instance_valid(player_node):
		print_debug("game.gd ERROR: Player node is not valid. Cannot spawn enemies.")
		return
	if not is_instance_valid(enemies_container):
		print_debug("game.gd ERROR: Enemies container is not valid. Cannot spawn enemies.")
		return
	if not has_method("get_enemy_data_by_id_for_debug"):
		print_debug("game.gd ERROR: Missing 'get_enemy_data_by_id_for_debug' method.")
		return

	var enemy_data_to_spawn: EnemyData = get_enemy_data_by_id_for_debug(enemy_id)

	if not is_instance_valid(enemy_data_to_spawn):
		print_debug("game.gd ERROR: EnemyData not found for ID: ", enemy_id, ". Cannot spawn.")
		return

	for i in range(count):
		# Break if max target enemies is reached, plus a small buffer to avoid overspawning massively
		if current_active_enemy_count >= target_on_screen_enemies * 2:
			print_debug("game.gd: Aborting debug spawn, current_active_enemy_count (", current_active_enemy_count, ") exceeds target (", target_on_screen_enemies, ").")
			break

		var spawn_position = _calculate_spawn_position_for_enemy(near_player)
		_spawn_actual_enemy(enemy_data_to_spawn, spawn_position, elite_type_override)
		print_debug("game.gd: Spawned enemy: ", enemy_data_to_spawn.display_name, " (Elite: ", elite_type_override, ") at ", spawn_position)
 
==== H:\Game Creation\testing-environ\Scripts\GameOverScreen.gd ==== 
# GameOverScreen.gd
extends CanvasLayer # Changed from Control for better layering

# Signal to notify the main game that the player wants to restart
signal restart_game_requested

# Adjust path if your RestartButton is nested differently within GameOverScreen.tscn
@onready var restart_button: Button = $RestartButton 

func _ready():
	if restart_button:
		# Ensure connection is made only once
		if not restart_button.is_connected("pressed", Callable(self, "_on_restart_button_pressed")):
			restart_button.pressed.connect(self._on_restart_button_pressed)
	else:
		print("ERROR (GameOverScreen): RestartButton node not found! Path was: $RestartButton")

func _on_restart_button_pressed():
	# self.hide() # Hiding is optional as the scene will be reloaded
	emit_signal("restart_game_requested")
 
==== H:\Game Creation\testing-environ\Scripts\GameUI.gd ==== 
# GameUI.gd
# Path: res://Scripts/GameUI.gd
# Manages HUD elements and calculates the Dynamic Difficulty Score (DDS).
# Added tunable parameters and setters for debug panel.
extends Control

signal difficulty_tier_increased(new_tier) 
signal dds_changed(new_dds_score)          
signal hardcore_phase_activated() 

# --- Node References ---
@onready var player_health_bar: ProgressBar = $HUDLayer/PlayerHealthBar
@onready var gameplay_timer_label: Label = $HUDLayer/GameplayTimerLabel
@onready var one_second_tick_timer: Timer = $HUDLayer/OneSecondTickTimer
@onready var temp_exp_bar: ProgressBar = $HUDLayer/TempExpBar
@onready var temp_exp_bar_visibility_timer: Timer = $HUDLayer/TempExpBarVisibilityTimer
@onready var dds_label: Label = $HUDLayer/DDSLabel 
@onready var culled_enemies_label: Label = $HUDLayer/CulledEnemiesLabel 
@onready var threat_pool_label: Label = $HUDLayer/ThreatPoolLabel

# --- Gameplay Timer & Legacy Difficulty Variables ---
var elapsed_seconds: int = 0
var current_difficulty_tier: int = 0
var next_difficulty_increase_time: int = 30
const DIFFICULTY_INTERVAL: int = 30 # Original interval for legacy tier
const MAX_DIFFICULTY_TIERS_FOR_SPAWN_RATE: int = 20 

# --- Player Reference ---
var player_node: PlayerCharacter

# --- UI Positioning Constants ---
const HEALTH_BAR_Y_OFFSET: float = -40.0
const HEALTH_BAR_X_OFFSET: float = -5.0
const EXP_BAR_Y_OFFSET_FROM_HEALTH: float = 3.0

# --- DDS Variables (Now Tunable) ---
var dynamic_difficulty_score: float = 0.0
var base_dds_per_30_sec_tick: float = 10.0
var dds_bonus_per_level_up: float = 5.0
var dds_bonus_rapid_level_up: float = 15.0 # Additional
var rapid_level_up_threshold_seconds: float = 20.0
var time_of_last_level_up: float = 0.0

# Store original defaults for reset
const ORIGINAL_BASE_DDS_PER_30_SEC_TICK: float = 10.0
const ORIGINAL_DDS_BONUS_PER_LEVEL_UP: float = 5.0
const ORIGINAL_DDS_BONUS_RAPID_LEVEL_UP: float = 15.0
const ORIGINAL_RAPID_LEVEL_UP_THRESHOLD_SECONDS: float = 20.0

# --- Hardcore Ramp Variables (Now Tunable) ---
const HARDCORE_MODE_START_SECONDS: int = 9000 # This remains const as it's a fixed game event time
var is_hardcore_phase: bool = false
var hardcore_dds_extra_per_second: float = 0.75
var hardcore_level_up_dds_multiplier: float = 1.5

const ORIGINAL_HARDCORE_DDS_EXTRA_PER_SECOND: float = 0.75
const ORIGINAL_HARDCORE_LEVEL_UP_DDS_MULTIPLIER: float = 1.5

func _ready():
	if player_health_bar:
		player_health_bar.visible = true; player_health_bar.max_value = 100; player_health_bar.value = 100
	else: print("ERROR (GameUI): PlayerHealthBar node not found.")
	if temp_exp_bar: temp_exp_bar.visible = false
	else: print("ERROR (GameUI): TempExpBar node not found.")
	if gameplay_timer_label: gameplay_timer_label.text = format_time(elapsed_seconds)
	else: print("ERROR (GameUI): GameplayTimerLabel node not found.")
	if dds_label: _update_dds_label()
	else: print("ERROR (GameUI): DDSLabel node not found.")
	if culled_enemies_label: update_culled_enemies_display(0)
	else: print("ERROR (GameUI): CulledEnemiesLabel node not found.")
	if threat_pool_label: update_threat_pool_display(0)
	else: print("ERROR (GameUI): ThreatPoolLabel node not found.")

	call_deferred("_attempt_player_connections")

	if one_second_tick_timer:
		if not one_second_tick_timer.is_connected("timeout", Callable(self, "_on_one_second_tick_timer_timeout")):
			one_second_tick_timer.timeout.connect(self._on_one_second_tick_timer_timeout)
		if one_second_tick_timer.is_stopped() and not one_second_tick_timer.autostart:
			one_second_tick_timer.start()
	else: print("ERROR (GameUI): OneSecondTickTimer node not found.")
		
	if temp_exp_bar_visibility_timer:
		if not temp_exp_bar_visibility_timer.is_connected("timeout", Callable(self, "_on_temp_exp_bar_visibility_timer_timeout")):
			temp_exp_bar_visibility_timer.timeout.connect(self._on_temp_exp_bar_visibility_timer_timeout)
	else: print("ERROR (GameUI): TempExpBarVisibilityTimer node not found.")
	
	emit_signal("dds_changed", dynamic_difficulty_score)

func _attempt_player_connections():
	await get_tree().process_frame 
	var players = get_tree().get_nodes_in_group("player_char_group")
	if players.size() > 0:
		player_node = players[0] as PlayerCharacter
		if is_instance_valid(player_node):
			if player_node.has_signal("health_changed"): player_node.health_changed.connect(self._on_player_health_changed)
			if player_node.has_signal("experience_changed"): player_node.experience_changed.connect(self._on_player_experience_changed)
			if player_node.has_signal("player_level_up"): player_node.player_level_up.connect(self._on_player_level_up_for_dds)
			time_of_last_level_up = elapsed_seconds
		else: print_debug("CRITICAL ERROR (GameUI): Player node became invalid during connection setup.")
	else: print_debug("CRITICAL ERROR (GameUI): Player node not found in group 'player_char_group'.")

func _process(delta: float): # UI Positioning Logic
	if not is_instance_valid(player_node) or not is_instance_valid(player_health_bar): return 
	var current_cam: Camera2D = get_viewport().get_camera_2d()
	if not is_instance_valid(current_cam) or not current_cam is Camera2D: return

	if player_node.has_method("get_ui_anchor_global_position"):
		var anchor_world_pos: Vector2 = player_node.get_ui_anchor_global_position()
		var anchor_screen_pos: Vector2 = Vector2.ZERO
		if current_cam.has_method("unproject_position"):
			anchor_screen_pos = current_cam.unproject_position(anchor_world_pos)
		elif current_cam.has_method("get_camera_transform"): 
			var camera_transform_val: Transform2D = current_cam.get_camera_transform() 
			var canvas_transform_val: Transform2D = get_viewport().get_canvas_transform()
			var combined_transform: Transform2D = canvas_transform_val * camera_transform_val
			anchor_screen_pos = combined_transform * anchor_world_pos
		else: anchor_screen_pos = get_viewport().get_visible_rect().size / 2.0
		
		var health_bar_pos_x = anchor_screen_pos.x - (player_health_bar.size.x / 2.0) + HEALTH_BAR_X_OFFSET
		var health_bar_pos_y = anchor_screen_pos.y + HEALTH_BAR_Y_OFFSET - player_health_bar.size.y 
		player_health_bar.global_position = Vector2(health_bar_pos_x, health_bar_pos_y)
		if is_instance_valid(temp_exp_bar) and temp_exp_bar.visible:
			var exp_bar_pos_x = anchor_screen_pos.x - (temp_exp_bar.size.x / 2.0) + HEALTH_BAR_X_OFFSET
			var exp_bar_pos_y = player_health_bar.global_position.y + player_health_bar.size.y + EXP_BAR_Y_OFFSET_FROM_HEALTH
			temp_exp_bar.global_position = Vector2(exp_bar_pos_x, exp_bar_pos_y)

func _on_one_second_tick_timer_timeout():
	elapsed_seconds += 1
	if gameplay_timer_label: gameplay_timer_label.text = format_time(elapsed_seconds)
	var dds_increment_this_tick: float = 0.0
	if elapsed_seconds > 0 and elapsed_seconds % 30 == 0:
		dds_increment_this_tick += base_dds_per_30_sec_tick # Use variable
	if not is_hardcore_phase and elapsed_seconds >= HARDCORE_MODE_START_SECONDS:
		is_hardcore_phase = true
		print_debug("GAMEUI: HARDCORE PHASE ACTIVATED!")
		emit_signal("hardcore_phase_activated")
	if is_hardcore_phase:
		dds_increment_this_tick += hardcore_dds_extra_per_second # Use variable
	if dds_increment_this_tick > 0.0:
		dynamic_difficulty_score += dds_increment_this_tick
		emit_signal("dds_changed", dynamic_difficulty_score)
		_update_dds_label()
	if current_difficulty_tier < MAX_DIFFICULTY_TIERS_FOR_SPAWN_RATE:
		if elapsed_seconds >= next_difficulty_increase_time:
			current_difficulty_tier += 1
			next_difficulty_increase_time += DIFFICULTY_INTERVAL
			emit_signal("difficulty_tier_increased", current_difficulty_tier)

func _on_player_level_up_for_dds(_new_level: int):
	if not is_instance_valid(player_node): return
	var dds_bonus_this_level: float = dds_bonus_per_level_up # Use variable
	var time_since_last = elapsed_seconds - time_of_last_level_up
	if time_of_last_level_up > 0 and time_since_last < rapid_level_up_threshold_seconds: # Use variable
		dds_bonus_this_level += dds_bonus_rapid_level_up # Use variable
	if is_hardcore_phase:
		dds_bonus_this_level *= hardcore_level_up_dds_multiplier # Use variable
	dynamic_difficulty_score += dds_bonus_this_level
	time_of_last_level_up = elapsed_seconds
	emit_signal("dds_changed", dynamic_difficulty_score)
	_update_dds_label()

func _update_dds_label():
	if is_instance_valid(dds_label):
		dds_label.text = "DDS: %d" % [round(dynamic_difficulty_score)]

func update_culled_enemies_display(count: int):
	if is_instance_valid(culled_enemies_label):
		culled_enemies_label.text = "Active Enemies: %d" % [count]

func update_threat_pool_display(threat_level: int):
	if is_instance_valid(threat_pool_label):
		threat_pool_label.text = "Threat Pool: %d" % [threat_level]

# --- Public Methods for DebugPanel to Manipulate DDS ---
func set_dds_value(new_value: float):
	dynamic_difficulty_score = max(0.0, new_value)
	_update_dds_label(); emit_signal("dds_changed", dynamic_difficulty_score)
	print_debug("GameUI DEBUG: DDS manually set to: ", dynamic_difficulty_score)

func adjust_dds_value(amount: float):
	dynamic_difficulty_score = max(0.0, dynamic_difficulty_score + amount)
	_update_dds_label(); emit_signal("dds_changed", dynamic_difficulty_score)
	print_debug("GameUI DEBUG: DDS adjusted by: ", amount, ". New DDS: ", dynamic_difficulty_score)

# --- NEW: Debug Setters for DDS Parameters ---
func debug_set_base_dds_per_30_sec_tick(value: float):
	base_dds_per_30_sec_tick = max(0.0, value)
	print_debug("GameUI DEBUG: base_dds_per_30_sec_tick set to: ", base_dds_per_30_sec_tick)
func debug_set_dds_bonus_per_level_up(value: float):
	dds_bonus_per_level_up = max(0.0, value)
	print_debug("GameUI DEBUG: dds_bonus_per_level_up set to: ", dds_bonus_per_level_up)
func debug_set_dds_bonus_rapid_level_up(value: float):
	dds_bonus_rapid_level_up = max(0.0, value)
	print_debug("GameUI DEBUG: dds_bonus_rapid_level_up set to: ", dds_bonus_rapid_level_up)
func debug_set_rapid_level_up_threshold_seconds(value: float):
	rapid_level_up_threshold_seconds = max(1.0, value) # Must be at least 1s
	print_debug("GameUI DEBUG: rapid_level_up_threshold_seconds set to: ", rapid_level_up_threshold_seconds)
func debug_set_hardcore_dds_extra_per_second(value: float):
	hardcore_dds_extra_per_second = max(0.0, value)
	print_debug("GameUI DEBUG: hardcore_dds_extra_per_second set to: ", hardcore_dds_extra_per_second)
func debug_set_hardcore_level_up_dds_multiplier(value: float):
	hardcore_level_up_dds_multiplier = max(0.0, value)
	print_debug("GameUI DEBUG: hardcore_level_up_dds_multiplier set to: ", hardcore_level_up_dds_multiplier)

func debug_reset_dds_parameters_to_defaults():
	base_dds_per_30_sec_tick = ORIGINAL_BASE_DDS_PER_30_SEC_TICK
	dds_bonus_per_level_up = ORIGINAL_DDS_BONUS_PER_LEVEL_UP
	dds_bonus_rapid_level_up = ORIGINAL_DDS_BONUS_RAPID_LEVEL_UP
	rapid_level_up_threshold_seconds = ORIGINAL_RAPID_LEVEL_UP_THRESHOLD_SECONDS
	hardcore_dds_extra_per_second = ORIGINAL_HARDCORE_DDS_EXTRA_PER_SECOND
	hardcore_level_up_dds_multiplier = ORIGINAL_HARDCORE_LEVEL_UP_DDS_MULTIPLIER
	print_debug("GameUI DEBUG: All DDS calculation parameters reset to defaults.")
	# Optionally, re-emit dds_changed if you want game.gd to immediately react to reset values
	# emit_signal("dds_changed", dynamic_difficulty_score) 


# --- Existing Getters and UI Update Functions ---
func _on_player_health_changed(new_health: int, max_health_val: int):
	if player_health_bar:
		player_health_bar.max_value = max(1, max_health_val); player_health_bar.value = new_health
		player_health_bar.visible = (new_health > 0)
func _on_player_experience_changed(current_exp: int, exp_to_next: int, _player_level: int):
	if temp_exp_bar:
		if exp_to_next > 0: temp_exp_bar.max_value = exp_to_next; temp_exp_bar.value = current_exp
		else: temp_exp_bar.max_value = 1; temp_exp_bar.value = 1     
		if not temp_exp_bar.visible or (is_instance_valid(temp_exp_bar_visibility_timer) and temp_exp_bar_visibility_timer.is_stopped()):
			temp_exp_bar.visible = true 
			if is_instance_valid(temp_exp_bar_visibility_timer): temp_exp_bar_visibility_timer.start()
func _on_temp_exp_bar_visibility_timer_timeout():
	if temp_exp_bar: temp_exp_bar.visible = false
func format_time(total_seconds: int) -> String:
	var hours: int = total_seconds / 3600; var minutes: int = (total_seconds % 3600) / 60
	var seconds: int = total_seconds % 60; return "%02d:%02d:%02d" % [hours, minutes, seconds]
func get_elapsed_seconds() -> int: return elapsed_seconds
func get_current_difficulty_tier() -> int: return current_difficulty_tier
func get_dynamic_difficulty_score() -> float: return dynamic_difficulty_score
func is_in_hardcore_phase() -> bool: return is_hardcore_phase
 
==== H:\Game Creation\testing-environ\Scripts\player.gd ==== 
# player.gd
class_name PlayerCharacter
extends CharacterBody2D

# --- Visual Adjustment of Character Sprite ---
@export var sprite_flip_x_compensation: float = 0.0

# --- Player Core Stats ---
@export var max_health: int = 100
var current_health: int
@export var speed: float = 60.0
@export var pickup_magnet_base_radius: float = 10.0
var current_pickup_magnet_radius: float

# --- Component References ---
@onready var weapon_manager: WeaponManager = $WeaponManager
@onready var player_stats: PlayerStats = $PlayerStats
@onready var attacks_container: Node2D
@onready var experience_collector_area: Area2D = $ExperienceCollectorArea
@onready var animated_sprite: AnimatedSprite2D = $AnimatedSprite2D
@onready var ui_anchor: Marker2D = $AnimatedSprite2D/UIAnchor
@onready var melee_aiming_dot: Node2D = $MeleeAimingDot

# --- Signals ---
signal health_changed(current_health_value, max_health_value)
signal experience_changed(current_exp, exp_to_next_level, player_level)
signal player_level_up(new_level)
signal player_class_tier_upgraded(new_class_id, contributing_basic_classes)
signal player_has_died
signal player_took_damage_from(attacker_node)

# --- Experience and Leveling Variables ---
var current_experience: int = 0
var experience_to_next_level: int = 10
var current_level: int = 1

const LINEAR_FACTOR_PER_LEVEL: int = 10
const BASE_FOR_EXPONENTIAL_PART: int = 10
const EXPONENTIAL_SCALING_FACTOR: float = 1.4

# --- Class Progression Tracking ---
enum BasicClass {
	NONE, WARRIOR, KNIGHT, ROGUE, WIZARD, DRUID, CONJURER
}
var current_basic_class_enum_val: PlayerCharacter.BasicClass = BasicClass.NONE
var basic_class_levels: Dictionary = {
	BasicClass.WARRIOR: 0, BasicClass.KNIGHT: 0, BasicClass.ROGUE: 0,
	BasicClass.WIZARD: 0, BasicClass.DRUID: 0, BasicClass.CONJURER: 0
}
const BASIC_CLASS_LEVEL_THRESHOLD_FOR_ADVANCEMENT: int = 10
var acquired_advanced_classes: Array[StringName] = []
var current_sprite_preference: String = "default"
var prefer_current_sprite_after_first_advanced: bool = false

# --- Initialization State ---
var _initial_chosen_class_enum: PlayerCharacter.BasicClass = BasicClass.NONE
var _initial_chosen_weapon_id: StringName = &""
var _initial_weapon_equipped: bool = false
var game_node_ref: Node

func _ready():
	if not is_instance_valid(player_stats):
		print_debug("CRITICAL ERROR (PlayerCharacter): PlayerStats node ($PlayerStats) not found! Aborting _ready.")
		return
	if not is_instance_valid(weapon_manager):
		print_debug("CRITICAL ERROR (PlayerCharacter): WeaponManager node ($WeaponManager) not found! Aborting _ready.")
		return

	if TestStartSettings != null and TestStartSettings.are_test_settings_available() and not TestStartSettings.were_settings_applied_this_run():
		var chosen_class = TestStartSettings.get_chosen_basic_class()
		var chosen_weapon_str = TestStartSettings.get_chosen_weapon_id()
		setup_with_chosen_class_and_weapon(chosen_class, StringName(chosen_weapon_str))
		TestStartSettings.mark_settings_as_applied()
	else:
		setup_with_chosen_class_and_weapon(BasicClass.WARRIOR, &"warrior_scythe")

	if experience_collector_area:
		if not experience_collector_area.is_connected("area_entered", Callable(self, "_on_experience_collector_area_entered")):
			experience_collector_area.area_entered.connect(Callable(self, "_on_experience_collector_area_entered"))
	
	experience_to_next_level = calculate_exp_for_next_level(current_level)
	
	if is_instance_valid(player_stats) and player_stats.has_signal("stats_recalculated"):
		if not player_stats.is_connected("stats_recalculated", Callable(self, "_on_player_stats_recalculated")):
			player_stats.stats_recalculated.connect(Callable(self, "_on_player_stats_recalculated"))
	
	if not is_instance_valid(ui_anchor): print_debug("WARNING (Player): UIAnchor node not found.")
	if not is_instance_valid(melee_aiming_dot): print_debug("ERROR (Player): MeleeAimingDot node not found.")
	if not is_instance_valid(animated_sprite): print_debug("WARNING (Player): AnimatedSprite2D node not found.")

	game_node_ref = get_tree().root.get_node_or_null("Game")
	if is_instance_valid(game_node_ref) and game_node_ref.has_signal("weapon_blueprints_ready"):
		if not game_node_ref.is_connected("weapon_blueprints_ready", Callable(self, "_on_game_weapon_blueprints_ready")):
			game_node_ref.weapon_blueprints_ready.connect(Callable(self, "_on_game_weapon_blueprints_ready"))
			print_debug("PlayerCharacter: Connected to game_node's weapon_blueprints_ready signal.")
		if game_node_ref.has_method("get_all_weapon_blueprints_for_debug") and \
		   not game_node_ref.get_all_weapon_blueprints_for_debug().is_empty():
			print_debug("PlayerCharacter: Blueprints seem already loaded in _ready. Triggering equip via deferred call.")
			call_deferred("_on_game_weapon_blueprints_ready")
	else:
		print_debug("WARNING (PlayerCharacter @ _ready): Could not find game_node ('/root/Game') or it's missing 'weapon_blueprints_ready' signal. Initial weapon equip will rely on deferred fallback.")
		call_deferred("_try_equip_initial_weapon_fallback")


func setup_with_chosen_class_and_weapon(class_enum: PlayerCharacter.BasicClass, weapon_id: StringName):
	_initial_chosen_class_enum = class_enum
	_initial_chosen_weapon_id = weapon_id
	_initial_weapon_equipped = false
	current_basic_class_enum_val = _initial_chosen_class_enum

	var class_name_key_array = BasicClass.keys()
	var class_name_str = "UNKNOWN_CLASS"
	if class_enum >= 0 and class_enum < class_name_key_array.size():
		class_name_str = BasicClass.keys()[class_enum]

	print_debug("PlayerCharacter: Setup with Class Enum: ", class_enum, " (Name: ", class_name_str, "), Weapon ID: '", weapon_id, "'")

	# Initialize player stats based on the chosen class
	_initialize_player_class_and_stats(class_enum) # This will call PlayerStats.initialize_with_class_data

	# Initial stat update based on class data (health, magnet radius)
	call_deferred("_on_player_stats_recalculated") # Ensure stats are reflected after PlayerStats init
	emit_signal("experience_changed", current_experience, experience_to_next_level, current_level)


func _on_game_weapon_blueprints_ready():
	print_debug("PlayerCharacter: Received game.weapon_blueprints_ready signal.")
	_try_equip_initial_weapon()

func _try_equip_initial_weapon_fallback():
	print_debug("PlayerCharacter: Attempting fallback for initial weapon equip (deferred).")
	if not is_instance_valid(game_node_ref):
		game_node_ref = get_tree().root.get_node_or_null("Game")
	_try_equip_initial_weapon()

func _try_equip_initial_weapon():
	if _initial_weapon_equipped:
		return
	if _initial_chosen_weapon_id == &"":
		_initial_weapon_equipped = true
		return

	if not is_instance_valid(weapon_manager):
		print_debug("ERROR (PlayerCharacter @ _try_equip_initial_weapon): WeaponManager node ($WeaponManager) is invalid.")
		_initial_weapon_equipped = true
		return
	
	if not weapon_manager.has_method("add_weapon_from_blueprint_id"):
		print_debug("ERROR (PlayerCharacter @ _try_equip_initial_weapon): WeaponManager instance is missing 'add_weapon_from_blueprint_id' method.")
		_initial_weapon_equipped = true
		return

	print_debug("PlayerCharacter: Attempting to add starting weapon: '", _initial_chosen_weapon_id, "' via WeaponManager.")
	var success = weapon_manager.add_weapon_from_blueprint_id(_initial_chosen_weapon_id)
	
	if success:
		print_debug("PlayerCharacter: WeaponManager successfully processed adding starting weapon '", _initial_chosen_weapon_id, "'.")
	else:
		print_debug("CRITICAL WARNING (PlayerCharacter): WeaponManager failed to add starting weapon '", _initial_chosen_weapon_id, "'. Check WeaponManager and game.gd logs for blueprint loading issues.")
	
	_initial_weapon_equipped = true


func _initialize_player_class_and_stats(p_class_enum: BasicClass = BasicClass.WARRIOR):
	if not is_instance_valid(player_stats): # Guard clause
		print_debug("ERROR (PlayerCharacter): PlayerStats node is not valid in _initialize_player_class_and_stats.")
		_fallback_initialize_stats_directly() # Attempt a basic fallback
		return

	if not player_stats.has_method("initialize_with_class_data"):
		print_debug("ERROR (PlayerCharacter): PlayerStats node is missing 'initialize_with_class_data' method.")
		_fallback_initialize_stats_directly() # Attempt a basic fallback
		return

	current_basic_class_enum_val = p_class_enum
	var class_name_str = ""
	if BasicClass.keys().has(BasicClass.keys()[p_class_enum]): # Check if enum value is valid before getting key
		class_name_str = BasicClass.keys()[p_class_enum].to_lower()
	else:
		print_debug("ERROR (PlayerCharacter): Invalid class enum value provided: ", p_class_enum)
		_fallback_initialize_stats_directly()
		return

	# CORRECTED PATH based on your structure: res://Data/Classes/warrior_class_data.tres
	var class_data_path = "res://Data/Classes/" + class_name_str + "_class_data.tres"
	print_debug("PlayerCharacter: Attempting to load class data from: ", class_data_path)

	if ResourceLoader.exists(class_data_path):
		var class_data_res = load(class_data_path) as PlayerClassData
		if is_instance_valid(class_data_res):
			player_stats.initialize_with_class_data(class_data_res)
			# FIX: Initialize current_health here to ensure it starts at max
			current_health = player_stats.get_max_health()
			print_debug("PlayerCharacter: PlayerStats initialized with class data: ", class_name_str.capitalize())
		else:
			print_debug("ERROR (PlayerCharacter): Failed to load PlayerClassData resource at '", class_data_path, "' (loaded resource is not valid PlayerClassData).")
			_fallback_initialize_stats_directly()
	else:
		print_debug("ERROR (PlayerCharacter): PlayerClassData resource not found at '", class_data_path, "'. Using fallback direct stats init.")
		_fallback_initialize_stats_directly()
	
	# PlayerStats should emit "stats_recalculated" after its initialization,
	# which will trigger _on_player_stats_recalculated in this script to update local speed, health etc.
	# If it doesn't, we might need a direct call or ensure connection.
	if is_instance_valid(player_stats) and player_stats.has_method("recalculate_all_stats") and not player_stats.is_connected("stats_recalculated", Callable(self, "_on_player_stats_recalculated")):
		# This ensures that if PlayerStats doesn't emit in its init, we can trigger it.
		# However, it's better if PlayerStats.initialize_with_class_data ends with recalculate_all_stats() itself.
		print_debug("PlayerCharacter: Manually calling recalculate_all_stats after class init (consider if PlayerStats should do this internally).")
		player_stats.recalculate_all_stats()
	elif not is_instance_valid(player_stats) or not player_stats.has_method("recalculate_all_stats"):
		# If PlayerStats is invalid or has no recalculate, manually update player character properties from defaults.
		_on_player_stats_recalculated() # This will use default self.speed if player_stats is invalid



func _fallback_initialize_stats_directly():
	# This is called if PlayerClassData.tres is missing
	print_debug("PlayerCharacter: Using HARDCODED FALLBACK stats as PlayerClassData was not found/loaded.")
	if is_instance_valid(player_stats) and player_stats.has_method("initialize_with_raw_stats"):
		# Create a dictionary matching the structure PlayerStats.initialize_with_raw_stats expects
		var raw_stats = {
			"base_max_health": 100, "base_health_regeneration": 0.1, "base_numerical_damage": 10,
			"base_global_damage_multiplier": 1.0, "base_attack_speed_multiplier": 1.0,
			"base_armor": 1, "base_armor_penetration": 0.0, "base_movement_speed": 70.0,
			"base_magnet_range": 50.0, "base_experience_gain_multiplier": 1.0,
			"base_aoe_area_multiplier": 1.0, "base_projectile_size_multiplier": 1.0,
			"base_projectile_speed_multiplier": 1.0, "base_effect_duration_multiplier": 1.0,
			"base_crit_chance": 0.05, "base_crit_damage_multiplier": 1.5, "base_luck": 0
		}
		player_stats.initialize_with_raw_stats(raw_stats)
		# FIX: Initialize current_health here to ensure it starts at max after fallback
		current_health = player_stats.get_max_health()
	else:
		print_debug("PlayerCharacter: PlayerStats missing initialize_with_raw_stats. Using very basic defaults.")
		current_health = max_health
		# self.speed is already defaulted by @export
		current_pickup_magnet_radius = pickup_magnet_base_radius
		update_experience_collector_radius()
		emit_signal("health_changed", current_health, max_health)


func _on_player_stats_recalculated():
	print_debug("PlayerCharacter: _on_player_stats_recalculated called.") # Added print
	if not is_instance_valid(player_stats):
		print_debug("PlayerCharacter: _on_player_stats_recalculated called, but player_stats is invalid. Aborting.")
		return

	var new_max_health = player_stats.get_max_health()
	var health_percentage = 1.0
	if max_health > 0 : health_percentage = float(current_health) / float(max_health)
	else: health_percentage = 1.0 if new_max_health > 0 else 0.0 # Handle initial max_health=0

	max_health = new_max_health # Update player's @export var
	current_health = clamp(int(round(new_max_health * health_percentage)), 0, new_max_health)
	if new_max_health > 0 and current_health == 0 and health_percentage > 0:
		current_health = 1 # Ensure at least 1 HP if calculated to 0 but percentage implies >0
	
	# Directly use player_stats.get_movement_speed() in _physics_process
	# self.speed = player_stats.get_movement_speed() # No longer strictly needed to set self.speed here
	
	var new_magnet_range = player_stats.get_magnet_range()
	if current_pickup_magnet_radius != new_magnet_range:
		current_pickup_magnet_radius = new_magnet_range
		update_experience_collector_radius()
			
	print_debug("PlayerCharacter: Health updated to ", current_health, "/", max_health, ". Speed: ", player_stats.get_movement_speed()) # Added print
	emit_signal("health_changed", current_health, new_max_health)


func _physics_process(delta: float):
	var input_direction = Vector2.ZERO
	if Input.is_action_pressed("move_right"): input_direction.x += 1
	if Input.is_action_pressed("move_left"): input_direction.x -= 1
	if Input.is_action_pressed("move_down"): input_direction.y += 1
	if Input.is_action_pressed("move_up"): input_direction.y -= 1

	var current_move_speed = self.speed # Use player's own speed property as base/default
	if is_instance_valid(player_stats) and player_stats.has_method("get_movement_speed"):
		current_move_speed = player_stats.get_movement_speed() # Get dynamically calculated speed
	
	# print_debug("Input: ", input_direction, ", BaseSpeedVar: ", self.speed, ", PlayerStatsSpeed: ", player_stats.get_movement_speed() if is_instance_valid(player_stats) else "N/A", ", CurrentMoveSpeed: ", current_move_speed)

	if input_direction.length_squared() > 0:
		velocity = input_direction.normalized() * current_move_speed
	else:
		velocity = Vector2.ZERO
	
	# print_debug("Velocity: ", velocity) # Uncomment to debug movement values

	if animated_sprite:
		if velocity.x < -0.01:
			animated_sprite.flip_h = true
			animated_sprite.offset.x = sprite_flip_x_compensation
		elif velocity.x > 0.1:
			animated_sprite.flip_h = false
			animated_sprite.offset.x = 0.0
	move_and_slide()
	
	if is_instance_valid(player_stats):
		var regen = player_stats.get_health_regeneration()
		var current_max_hp = player_stats.get_max_health()
		if regen > 0.0 and current_health < current_max_hp:
			current_health += regen * delta
			current_health = min(current_health, current_max_hp)
			emit_signal("health_changed", current_health, current_max_hp)

func _on_experience_collector_area_entered(area: Area2D):
	if area.is_in_group("exp_drops") and area.has_method("collected"):
		var exp_value: int = 0
		if "experience_value" in area: exp_value = area.experience_value
		var exp_gain_mod = 1.0
		if is_instance_valid(player_stats) and player_stats.has_method("get_experience_gain_multiplier"):
			exp_gain_mod = player_stats.get_experience_gain_multiplier()
		var modified_exp_value = int(round(float(exp_value) * exp_gain_mod))
		current_experience += modified_exp_value
		area.collected()
		check_level_up()
		emit_signal("experience_changed", current_experience, experience_to_next_level, current_level)

func check_level_up():
	while current_experience >= experience_to_next_level:
		var exp_cost_of_this_level = experience_to_next_level
		current_level += 1
		current_experience -= exp_cost_of_this_level
		experience_to_next_level = calculate_exp_for_next_level(current_level)
		print("LEVEL UP! Player is now level: ", current_level)
		emit_signal("player_level_up", current_level)

func calculate_exp_for_next_level(player_curr_level: int) -> int:
	if player_curr_level < 1:
		return LINEAR_FACTOR_PER_LEVEL + int(BASE_FOR_EXPONENTIAL_PART * pow(EXPONENTIAL_SCALING_FACTOR, 0.0))
	var linear_part = LINEAR_FACTOR_PER_LEVEL * player_curr_level
	var exponential_part = BASE_FOR_EXPONENTIAL_PART * pow(EXPONENTIAL_SCALING_FACTOR, float(player_curr_level - 1))
	return linear_part + int(exponential_part)
	
func take_damage(amount: int, attacker: Node2D = null):
	print_debug("PlayerCharacter: take_damage called. Initial current_health: ", current_health, ", amount: ", amount) # Added print
	var current_defense = 0
	if is_instance_valid(player_stats) and player_stats.has_method("get_armor"):
		current_defense = player_stats.get_armor()
	print_debug("PlayerCharacter: Defense: ", current_defense) # Added print
	var actual_damage = amount - current_defense
	actual_damage = max(0, actual_damage)
	print_debug("PlayerCharacter: Actual damage after defense: ", actual_damage) # Added print
	current_health -= actual_damage
	current_health = max(0, current_health)
	print_debug("PlayerCharacter: Current health after damage: ", current_health) # Added print
	var current_max_hp = 100
	if is_instance_valid(player_stats) and player_stats.has_method("get_max_health"):
		current_max_hp = player_stats.get_max_health()
	emit_signal("health_changed", current_health, current_max_hp)
	if is_instance_valid(attacker):
		emit_signal("player_took_damage_from", attacker)
	if current_health <= 0: die()

func die():
	print_debug("PlayerCharacter: die() function called! Stack Trace:")
	for s in get_stack():
		print_debug("  Script: ", s.source, ", Function: ", s.function, ", Line: ", s.line)
	print("Player has died! Emitting signal.")
	emit_signal("player_has_died")
	set_physics_process(false); hide()
	var mc = get_node_or_null("CollisionShape2D"); if mc: mc.disabled = true
	
# This is the key function to refactor
func apply_upgrade(upgrade_data_wrapper: Dictionary):
	if not upgrade_data_wrapper is Dictionary:
		print_debug("ERROR (PlayerCharacter): apply_upgrade did not receive a dictionary.")
		return
	
	var upgrade_type = upgrade_data_wrapper.get("type", "")
	var resource = upgrade_data_wrapper.get("resource_data") # Get the actual resource

	print_debug("PlayerCharacter: Applying upgrade. Type: '", upgrade_type, "', Resource: ", resource)

	if upgrade_type == "new_weapon" and resource is WeaponBlueprintData:
		if is_instance_valid(weapon_manager) and weapon_manager.has_method("add_weapon"):
			weapon_manager.add_weapon(resource)
			
	elif upgrade_type == "weapon_upgrade" and resource is WeaponUpgradeData:
		var weapon_id_to_upgrade = upgrade_data_wrapper.get("weapon_id_to_upgrade", &"")
		if weapon_id_to_upgrade == &"":
			print_debug("ERROR (PlayerCharacter): apply_upgrade for WeaponUpgradeData missing 'weapon_id_to_upgrade'.")
			return
		if is_instance_valid(weapon_manager) and weapon_manager.has_method("apply_weapon_upgrade"):
			weapon_manager.apply_weapon_upgrade(StringName(weapon_id_to_upgrade), resource)
			
	elif upgrade_type == "general_upgrade" and resource is GeneralUpgradeCardData:
		if is_instance_valid(player_stats) and player_stats.has_method("apply_effects_from_card"):
			player_stats.apply_effects_from_card(resource)
		else:
			print_debug("ERROR (PlayerCharacter): PlayerStats missing apply_effects_from_card method.")

	# Keep the old dictionary-based fallback for now during transition
	elif upgrade_type == "general_stat_upgrade_OLD":
		if is_instance_valid(player_stats) and player_stats.has_method("apply_stat_upgrade"):
			var stat_key = upgrade_data_wrapper.get("stat_key_target", upgrade_data_wrapper.get("stat"))
			var value = upgrade_data_wrapper.get("value", upgrade_data_wrapper.get("percent_increase", 0.0))
			var is_percentage = "percent_increase" in upgrade_data_wrapper or "percent" in upgrade_data_wrapper.get("modification_type", "")
			var is_multiplicative = "is_multiplicative_percent" in upgrade_data_wrapper or "mult" in upgrade_data_wrapper.get("modification_type", "")
			player_stats.apply_stat_upgrade(stat_key, value, is_percentage, is_multiplicative)
	
	else:
		print_debug("PlayerCharacter: apply_upgrade received unknown upgrade type or invalid resource. Type: '", upgrade_type, "', Resource: ", resource)
	
	if is_instance_valid(player_stats) and player_stats.has_method("recalculate_all_stats"):
		player_stats.recalculate_all_stats()

func update_experience_collector_radius():
	if is_instance_valid(experience_collector_area) and experience_collector_area.get_child_count() > 0:
		var cs = experience_collector_area.get_child(0) as CollisionShape2D
		if is_instance_valid(cs) and cs.shape is CircleShape2D: # Added is_instance_valid for cs
			cs.shape.radius = current_pickup_magnet_radius

func check_for_advanced_class_unlocks() -> Array[Dictionary]:
	var potential_unlocks: Array[Dictionary] = []
	return potential_unlocks

func _create_advanced_class_card_data(adv_class_id: String, from_classes: Array) -> Dictionary:
	return { "id": "unlock_" + adv_class_id.to_lower(), "title": "Become " + adv_class_id,
			 "class_tag": adv_class_id, "description": "Unlock the path of the " + adv_class_id + "!",
			 "type": "advanced_class_unlock", "advanced_class_id": adv_class_id,
			 "unlocked_from": from_classes, "icon_path": "" }

func change_player_sprite_for_class(class_id_or_default: String): current_sprite_preference = class_id_or_default
func get_current_experience() -> int: return current_experience
func get_experience_to_next_level() -> int: return experience_to_next_level
func get_current_level() -> int: return current_level
func get_current_health() -> int: return current_health
func get_max_health() -> int:
	if is_instance_valid(player_stats) and player_stats.has_method("get_max_health"):
		return player_stats.get_max_health()
	return 100

func get_ui_anchor_global_position() -> Vector2:
	if is_instance_valid(ui_anchor): return ui_anchor.global_position
	elif is_instance_valid(animated_sprite): return animated_sprite.global_position
	return self.global_position

func _find_nearest_enemy(p_from_position: Vector2 = Vector2.INF) -> Node2D:
	var enemies_in_scene = get_tree().get_nodes_in_group("enemies")
	var nearest_enemy: Node2D = null; var min_dist_sq = INF
	var search_origin = p_from_position
	if search_origin == Vector2.INF: search_origin = global_position
	if enemies_in_scene.is_empty(): return null
	for enemy_node in enemies_in_scene:
		if not is_instance_valid(enemy_node): continue
		var dist_sq = search_origin.distance_squared_to(enemy_node.global_position)
		if dist_sq < min_dist_sq: min_dist_sq = dist_sq; nearest_enemy = enemy_node
	return nearest_enemy

func get_active_weapons_data_for_level_up() -> Array[Dictionary]:
	if is_instance_valid(weapon_manager) and weapon_manager.has_method("get_active_weapons_data_for_level_up"):
		return weapon_manager.get_active_weapons_data_for_level_up()
	print_debug("WARNING (Player): WeaponManager not found or missing 'get_active_weapons_data_for_level_up'.")
	return []

func get_basic_class_levels_for_level_up() -> Dictionary:
	return basic_class_levels.duplicate(true)

func get_acquired_advanced_classes_for_level_up() -> Array[StringName]:
	return acquired_advanced_classes

func get_current_basic_class_enum() -> PlayerCharacter.BasicClass:
	return current_basic_class_enum_val

func heal(amount: int):
	if current_health <= 0:
		return
	
	print_debug("PlayerCharacter: heal() called with amount: ", amount)

	var actual_max_health = max_health
	if is_instance_valid(player_stats) and player_stats.has_method("get_max_health"):
		actual_max_health = player_stats.get_max_health()
	current_health = clamp(current_health + amount, 0, actual_max_health)
	emit_signal("health_changed", current_health, actual_max_health)
 
==== H:\Game Creation\testing-environ\Scripts\PlayerStats.gd ==== 
# PlayerStats.gd
# Manages all player statistics.
# Corrected _process_stat_modification_effect to use get_value().
class_name PlayerStats
extends Node

signal stats_recalculated

# Base stats loaded from PlayerClassData
var base_stats: Dictionary = {
	"max_health": 100, "health_regeneration": 0.0, "base_numerical_damage": 10,
	"global_damage_multiplier": 1.0, "global_flat_damage_add": 0.0,
	"attack_speed_multiplier": 1.0, "armor": 0, "armor_penetration": 0.0,
	"movement_speed": 60.0, "magnet_range": 40.0, "experience_gain_multiplier": 1.0,
	"aoe_area_multiplier": 1.0, "projectile_size_multiplier": 1.0,
	"projectile_speed_multiplier": 1.0, "effect_duration_multiplier": 1.0,
	"crit_chance": 0.05, "crit_damage_multiplier": 1.5, "luck": 0
}

# Dictionaries to store modifiers from upgrades/effects
var flat_modifiers: Dictionary = {}          
var percent_add_modifiers: Dictionary = {} 
var percent_mult_modifiers: Dictionary = {}

# Dictionary to store the final calculated stat values after all modifiers
var current_calculated_stats: Dictionary = {}

func _ready():
	recalculate_all_stats() 

func initialize_with_class_data(class_data: PlayerClassData):
	if not is_instance_valid(class_data):
		print_debug("ERROR (PlayerStats): Invalid PlayerClassData provided for initialization.")
		recalculate_all_stats()
		return

	# print_debug("PlayerStats: Initializing with PlayerClassData: ", class_data.resource_path if class_data else "Null")
	base_stats["max_health"] = class_data.base_max_health
	base_stats["health_regeneration"] = class_data.base_health_regeneration
	base_stats["base_numerical_damage"] = class_data.base_numerical_damage
	base_stats["global_damage_multiplier"] = class_data.base_global_damage_multiplier
	base_stats["attack_speed_multiplier"] = class_data.base_attack_speed_multiplier
	base_stats["armor"] = class_data.base_armor
	base_stats["armor_penetration"] = class_data.base_armor_penetration
	base_stats["movement_speed"] = class_data.base_movement_speed
	base_stats["magnet_range"] = class_data.base_magnet_range
	base_stats["experience_gain_multiplier"] = class_data.base_experience_gain_multiplier
	base_stats["aoe_area_multiplier"] = class_data.base_aoe_area_multiplier
	base_stats["projectile_size_multiplier"] = class_data.base_projectile_size_multiplier
	base_stats["projectile_speed_multiplier"] = class_data.base_projectile_speed_multiplier
	base_stats["effect_duration_multiplier"] = class_data.base_effect_duration_multiplier
	base_stats["crit_chance"] = class_data.base_crit_chance
	base_stats["crit_damage_multiplier"] = class_data.base_crit_damage_multiplier
	base_stats["luck"] = class_data.base_luck
	
	recalculate_all_stats()

func initialize_with_raw_stats(raw_stats_dict: Dictionary):
	print_debug("PlayerStats: Initializing with RAW stats dictionary.")
	for key in raw_stats_dict:
		if base_stats.has(key):
			base_stats[key] = raw_stats_dict[key]
		else:
			print_debug("PlayerStats WARN: Raw stat key '", key, "' not found in base_stats template.")
	recalculate_all_stats()


func apply_effects_from_card(card_data: GeneralUpgradeCardData):
	if not is_instance_valid(card_data): return
	print_debug("PlayerStats: Applying effects from GeneralUpgradeCardData: ", card_data.title)
	for effect_res in card_data.effects:
		if effect_res is StatModificationEffectData:
			var stat_mod_effect = effect_res as StatModificationEffectData
			if stat_mod_effect.target_scope == &"player_stats": 
				_process_stat_modification_effect(stat_mod_effect)
	recalculate_all_stats()

# This is the function that needs the fix.
func _process_stat_modification_effect(stat_mod_effect: StatModificationEffectData):
	var key = stat_mod_effect.stat_key
	# CORRECTED: Use get_value() instead of accessing .value
	var value = stat_mod_effect.get_value() 
	var mod_type = stat_mod_effect.modification_type

	match mod_type:
		&"flat_add":
			flat_modifiers[key] = flat_modifiers.get(key, 0.0) + value
			print_debug("  Applied flat_add: ", key, " +=", value, " -> ", flat_modifiers[key])
		&"percent_add_to_base":
			percent_add_modifiers[key] = percent_add_modifiers.get(key, 0.0) + value
			print_debug("  Applied percent_add_to_base: ", key, " +=", value, " -> ", percent_add_modifiers[key])
		&"percent_mult_final":
			percent_mult_modifiers[key] = percent_mult_modifiers.get(key, 1.0) * (1.0 + value) 
			print_debug("  Applied percent_mult_final: ", key, " *=", (1.0 + value), " -> ", percent_mult_modifiers[key])
		&"override_value":
			base_stats[key] = value 
			flat_modifiers.erase(key)
			percent_add_modifiers.erase(key)
			percent_mult_modifiers.erase(key)
			print_debug("  Applied override_value: ", key, " set to ", value)
		_:
			print_debug("PlayerStats WARN: Unknown modification_type '", mod_type, "' for stat '", key, "'")


func recalculate_all_stats():
	current_calculated_stats.clear()
	print_debug("PlayerStats: Recalculating stats.")
	for stat_name in base_stats:
		var base_val = base_stats.get(stat_name, 0.0)
		var flat_add = flat_modifiers.get(stat_name, 0.0)
		var percent_add_sum = percent_add_modifiers.get(stat_name, 0.0)
		var percent_mult_prod = percent_mult_modifiers.get(stat_name, 1.0)

		var calculated_val = (base_val + flat_add) * (1.0 + percent_add_sum)
		calculated_val *= percent_mult_prod
		if stat_name == "max_health":
			print_debug("  max_health base_val: ", base_stats.get("max_health"))
			print_debug("  max_health flat_add: ", flat_modifiers.get("max_health"))
			print_debug("  max_health percent_add_sum: ", percent_add_modifiers.get("max_health"))
			print_debug("  max_health percent_mult_prod: ", percent_mult_modifiers.get("max_health"))
			print_debug("  Calculated max_health before int(round): ", calculated_val)
			print_debug("  Final current_calculated_stats[max_health]: ", int(round(calculated_val)))

		if stat_name in ["max_health", "armor", "luck", "base_numerical_damage"]: 
			current_calculated_stats[stat_name] = int(round(calculated_val))
		else:
			current_calculated_stats[stat_name] = calculated_val
			
	emit_signal("stats_recalculated")

# --- Getters for current calculated stats ---
func get_max_health() -> int: return current_calculated_stats.get("max_health", 100)
func get_health_regeneration() -> float: return current_calculated_stats.get("health_regeneration", 0.0)
func get_current_base_numerical_damage() -> int: return current_calculated_stats.get("base_numerical_damage", 10)
func get_current_global_damage_multiplier() -> float: return current_calculated_stats.get("global_damage_multiplier", 1.0)
func get_current_global_flat_damage_add() -> float: return current_calculated_stats.get("global_flat_damage_add", 0.0)
func get_current_attack_speed_multiplier() -> float: return current_calculated_stats.get("attack_speed_multiplier", 1.0)
func get_armor() -> int: return current_calculated_stats.get("armor", 0)
func get_current_armor_penetration() -> float: return current_calculated_stats.get("armor_penetration", 0.0)
func get_movement_speed() -> float: return current_calculated_stats.get("movement_speed", 60.0)
func get_magnet_range() -> float: return current_calculated_stats.get("magnet_range", 10.0)
func get_experience_gain_multiplier() -> float: return current_calculated_stats.get("experience_gain_multiplier", 1.0)
func get_current_aoe_area_multiplier() -> float: return current_calculated_stats.get("aoe_area_multiplier", 1.0)
func get_current_projectile_size_multiplier() -> float: return current_calculated_stats.get("projectile_size_multiplier", 1.0)
func get_current_projectile_speed_multiplier() -> float: return current_calculated_stats.get("projectile_speed_multiplier", 1.0)
func get_current_effect_duration_multiplier() -> float: return current_calculated_stats.get("effect_duration_multiplier", 1.0)
func get_crit_chance() -> float: return current_calculated_stats.get("crit_chance", 0.05)
func get_crit_damage_multiplier() -> float: return current_calculated_stats.get("crit_damage_multiplier", 1.5)
func get_luck() -> int: return current_calculated_stats.get("luck", 0)

# --- Debug Setters for Base Stats (for DebugPanel) ---
func get_base_max_health_for_debug() -> int: return base_stats.get("max_health", 100)
func debug_set_base_max_health(value: int): base_stats["max_health"] = value; recalculate_all_stats()
func get_base_health_regeneration_for_debug() -> float: return base_stats.get("health_regeneration", 0.0)
func debug_set_base_health_regeneration(value: float): base_stats["health_regeneration"] = value; recalculate_all_stats()
func get_base_numerical_damage_for_debug() -> int: return base_stats.get("base_numerical_damage", 10)
func debug_set_base_numerical_damage(value: int): base_stats["base_numerical_damage"] = value; recalculate_all_stats()
func get_current_global_flat_damage_add_for_debug() -> float: return flat_modifiers.get("global_flat_damage_add", 0.0)
func debug_set_current_global_flat_damage_add(value: float): flat_modifiers["global_flat_damage_add"] = value; recalculate_all_stats()
func get_base_attack_speed_multiplier_for_debug() -> float: return base_stats.get("attack_speed_multiplier", 1.0)
func debug_set_base_attack_speed_multiplier(value: float): base_stats["attack_speed_multiplier"] = value; recalculate_all_stats()
func get_base_armor_for_debug() -> int: return base_stats.get("armor", 0)
func debug_set_base_armor(value: int): base_stats["armor"] = value; recalculate_all_stats()
func get_base_movement_speed_for_debug() -> float: return base_stats.get("movement_speed", 60.0)
func debug_set_base_movement_speed(value: float): base_stats["movement_speed"] = value; recalculate_all_stats()
func get_base_luck_for_debug() -> int: return base_stats.get("luck", 0)
func debug_set_base_luck(value: int): base_stats["luck"] = value; recalculate_all_stats()
func debug_reset_to_class_defaults():
	flat_modifiers.clear()
	percent_add_modifiers.clear()
	percent_mult_modifiers.clear()
	# This requires a reference to the current class data to truly reset.
	# For now, it clears modifiers and recalculates, which reverts to the last loaded class base stats.
	if get_parent() and get_parent().has_method("get_current_basic_class_enum"):
		var class_enum = get_parent().get_current_basic_class_enum()
		# Call initialize_stats again to reload from .tres
		var class_name_str = PlayerCharacter.BasicClass.keys()[class_enum].to_lower()
		var class_data_path = "res://Data/Classes/" + class_name_str + "_class_data.tres"
		var class_data_res = load(class_data_path) as PlayerClassData
		if is_instance_valid(class_data_res):
			initialize_with_class_data(class_data_res)
		else:
			recalculate_all_stats()
	else:
		recalculate_all_stats()
	print_debug("PlayerStats: Modifiers reset. Recalculated with current base stats.")
 
==== H:\Game Creation\testing-environ\Scripts\scythe_attack.gd ==== 
# scythe_attack.gd
# Refactored to be a temporary instance spawned by WeaponManager.
# Includes is_dead() debugging for Soul Siphon.
# NOW: Data-driven for on-hit status effects via StatusEffectApplicationData resources.
class_name ScytheAttack
extends Node2D 

signal attack_finished_signal
signal reaping_momentum_hits(hit_count: int) 
signal attack_finished_with_hits(hit_count: int) # For Reaping Momentum

var final_inflicted_damage: int = 10
var final_aoe_scale: Vector2 = Vector2(1.0, 1.0)

# Node references - ensure these EXACTLY match names in ScytheAttack.tscn
@onready var animated_sprite: AnimatedSprite2D = get_node_or_null("AnimatedSprite2D") as AnimatedSprite2D
@onready var damage_area: Area2D = get_node_or_null("DamageArea") as Area2D
@onready var duration_timer: Timer = get_node_or_null("DurationTimer") as Timer

const SLASH_ANIMATION_NAME = "slash" 

var specific_stats: Dictionary = {}   
var owner_player: PlayerCharacter = null 
var weapon_manager_ref: WeaponManager = null 

var _enemies_hit_this_sweep: Array[Node2D] = []
var _is_attack_active: bool = false 
var _current_attack_duration: float = 0.5 

# is_whirlwind_instance flag remains to differentiate main swing from follow-up swings
var is_whirlwind_instance: bool = false 

func _ready():
	print_debug(name, ": _ready() called. Is Whirlwind: ", is_whirlwind_instance)

	if not is_instance_valid(animated_sprite):
		print("ERROR (ScytheAttack '", name, "'): AnimatedSprite2D node missing. Will queue_free.")
		call_deferred("queue_free")
		return
	else:
		if animated_sprite.sprite_frames and animated_sprite.sprite_frames.has_animation(SLASH_ANIMATION_NAME):
			if not animated_sprite.sprite_frames.get_animation_loop(SLASH_ANIMATION_NAME):
				if not animated_sprite.is_connected("animation_finished", Callable(self, "_on_animation_finished")):
					animated_sprite.animation_finished.connect(Callable(self, "_on_animation_finished"))
		else:
			print_debug("WARNING (ScytheAttack '%s'): Animation '%s' not found." % [name, SLASH_ANIMATION_NAME])

	if not is_instance_valid(damage_area):
		print_debug("WARNING (ScytheAttack '%s'): DamageArea node missing." % name)
	else:
		if not damage_area.is_connected("body_entered", Callable(self, "_on_damage_area_body_entered")):
			damage_area.body_entered.connect(Callable(self, "_on_damage_area_body_entered"))
		var collision_shape = damage_area.get_node_or_null("CollisionShape2D")
		if is_instance_valid(collision_shape):
			collision_shape.disabled = true 
		else:
			print_debug("WARNING (ScytheAttack '%s'): No CollisionShape2D found under DamageArea." % name)


func initialize_weapon_stats_and_attack(stats_dict: Dictionary):
	specific_stats = stats_dict.duplicate(true) 
	on_stats_or_upgrades_changed()

func on_stats_or_upgrades_changed(): # Called by initialize_weapon_stats_and_attack
	if not is_instance_valid(self) or specific_stats.is_empty(): return

	# Apply Scale
	var base_scale_x = float(specific_stats.get("inherent_visual_scale_x", 1.0))
	var base_scale_y = float(specific_stats.get("inherent_visual_scale_y", 1.0))
	var player_aoe_mult = 1.0
	if is_instance_valid(owner_player) and is_instance_valid(owner_player.player_stats):
		player_aoe_mult = owner_player.player_stats.get_current_aoe_area_multiplier()
	self.scale = Vector2(base_scale_x * player_aoe_mult, base_scale_y * player_aoe_mult)
	
	# Set Attack Duration & Animation Speed
	var base_duration = float(specific_stats.get("base_attack_duration", 0.5))
	var atk_speed_player_mult = 1.0 
	if is_instance_valid(owner_player) and is_instance_valid(owner_player.player_stats):
		atk_speed_player_mult = owner_player.player_stats.get_current_attack_speed_multiplier()
	var final_attack_speed_mult = atk_speed_player_mult * float(specific_stats.get("weapon_attack_speed_mod", 1.0))
	if final_attack_speed_mult <= 0: final_attack_speed_mult = 0.01
	_current_attack_duration = base_duration / final_attack_speed_mult
	if is_instance_valid(animated_sprite):
		animated_sprite.speed_scale = final_attack_speed_mult 
	
	# Start attack sequence
	_start_attack_animation()

func _start_attack_animation():
	if not is_instance_valid(animated_sprite) or not is_instance_valid(damage_area):
		_finish_attack_sequence(true); return

	_enemies_hit_this_sweep.clear()
	_is_attack_active = true
	var collision_shape = damage_area.get_node_or_null("CollisionShape2D")
	if is_instance_valid(collision_shape): collision_shape.disabled = false

	if animated_sprite.sprite_frames and animated_sprite.sprite_frames.has_animation(SLASH_ANIMATION_NAME):
		animated_sprite.play(SLASH_ANIMATION_NAME)
		if animated_sprite.sprite_frames.get_animation_loop(SLASH_ANIMATION_NAME) or \
		   not animated_sprite.is_connected("animation_finished", Callable(self, "_on_animation_finished")):
			var duration_finish_timer = get_tree().create_timer(_current_attack_duration, true, false, true)
			duration_finish_timer.timeout.connect(Callable(self, "_finish_attack_sequence").bind(true))
	else:
		_finish_attack_sequence(true) 

func set_owner_player(p_player: PlayerCharacter):
	owner_player = p_player

func set_weapon_manager_reference(wm_node: WeaponManager):
	weapon_manager_ref = wm_node

func _on_animation_finished():
	if is_instance_valid(animated_sprite) and animated_sprite.animation == SLASH_ANIMATION_NAME:
		if not animated_sprite.sprite_frames.get_animation_loop(SLASH_ANIMATION_NAME):
			_finish_attack_sequence(false)

func _finish_attack_sequence(was_timer_based: bool):
	if _is_attack_active: 
		_is_attack_active = false
		if is_instance_valid(damage_area):
			var collision_shape = damage_area.get_node_or_null("CollisionShape2D")
			if is_instance_valid(collision_shape): collision_shape.disabled = true
		
		if specific_stats.get("has_reaping_momentum", false):
			emit_signal("reaping_momentum_hits", _enemies_hit_this_sweep.size())
		
		if was_timer_based:
			call_deferred("queue_free")

func _on_damage_area_body_entered(body: Node2D):
	if not _is_attack_active or not is_instance_valid(body) or not is_instance_valid(owner_player): return
	if _enemies_hit_this_sweep.has(body): return 
	
	if body.is_in_group("enemies") and body.has_method("take_damage"):
		var enemy_target = body as BaseEnemy
		if not is_instance_valid(enemy_target) or enemy_target.is_dead(): return
		_enemies_hit_this_sweep.append(enemy_target)
		
		var p_stats = owner_player.player_stats as PlayerStats
		if not is_instance_valid(p_stats): return

		# --- Damage Calculation ---
		var player_base_damage = float(p_stats.get_current_base_numerical_damage())
		var player_global_mult = float(p_stats.get_current_global_damage_multiplier())
		var player_global_flat = float(p_stats.get_current_global_flat_damage_add())
		
		var weapon_scale_from_player = float(specific_stats.get("player_damage_scale_percent", 1.0))
		var weapon_percent_mod = float(specific_stats.get("weapon_damage_percentage", 1.5))
		
		var calculated_damage = player_base_damage * weapon_scale_from_player
		calculated_damage *= weapon_percent_mod
		
		var reaping_bonus = int(specific_stats.get("reaping_momentum_bonus_to_apply", 0)) 
		calculated_damage += reaping_bonus
		# Resetting the 'to_apply' bonus is handled implicitly because each instance is new.
		# The 'stored_bonus' is what's reset in the WeaponManager. reaping_bonus
		
		# NEW DEBUG PRINT: Show reaping momentum bonus
		if specific_stats.get("has_reaping_momentum", false):
			print_debug(name, ": Reaping Momentum bonus applied to this hit: ", reaping_bonus)

		# Only reset reaping momentum bonus if this is the MAIN swing instance.
		if specific_stats.get("has_reaping_momentum", false) and reaping_bonus > 0 and not is_whirlwind_instance:
			if weapon_manager_ref and weapon_manager_ref.has_method("reset_reaping_momentum_bonus_for_weapon"):
				weapon_manager_ref.reset_reaping_momentum_bonus_for_weapon(specific_stats.get("id", &""))
				print_debug(name, ": Reaping momentum bonus CONSUMED/RESET by main swing for weapon '", specific_stats.get("id", &""), "'.")
		elif is_whirlwind_instance and specific_stats.get("has_reaping_momentum", false) and reaping_bonus > 0:
			print_debug(name, ": Whirlwind swing dealt damage with bonus, but NOT resetting (only main swing resets).")


		var final_damage = (calculated_damage * player_global_mult) + player_global_flat
		var final_damage_to_deal = int(round(max(1.0, final_damage)))
		
		var attack_properties_for_enemy = { "armor_pierce": p_stats.get_current_armor_penetration() }
		
		# --- DEBUGGING for SOUL SIPHON ---
		print_debug("ScytheAttack: Enemy '", enemy_target.name, "' health BEFORE take_damage: ", enemy_target.get_current_health())
		
		enemy_target.take_damage(final_damage_to_deal, owner_player, attack_properties_for_enemy)
		
		print_debug("ScytheAttack: Enemy '", enemy_target.name, "' health AFTER take_damage: ", enemy_target.get_current_health())
		print_debug("ScytheAttack: Checking is_dead() on '", enemy_target.name, "'. Result: ", enemy_target.is_dead())

		# --- Handle On-Hit Status Effects (Data-driven) ---
		# Get the array of StatusEffectApplicationData from specific_stats
		var on_hit_applications = specific_stats.get("on_hit_status_applications", []) as Array
		if not on_hit_applications.is_empty():
			var enemy_status_comp = enemy_target.get_node_or_null("StatusEffectComponent") as StatusEffectComponent
			if is_instance_valid(enemy_status_comp):
				for app_data_res in on_hit_applications:
					if not is_instance_valid(app_data_res) or not app_data_res is StatusEffectApplicationData:
						print_debug("ScytheAttack: Skipping invalid StatusEffectApplicationData resource in on_hit_applications array.")
						continue
					
					var app_data = app_data_res as StatusEffectApplicationData
					
					# Roll for application chance
					if randf() < app_data.application_chance:
						# Use the effect_data.id property directly from the StatusEffectData resource
						# rather than trying to load it with a path. This is more robust.
						var status_effect_def = load(app_data.status_effect_resource_path) as StatusEffectData # Still need to load the resource
						if is_instance_valid(status_effect_def):
							print_debug(name, ": Applying status '", status_effect_def.id, "' (Chance: ", app_data.application_chance, ") to ", enemy_target.name)
							enemy_status_comp.apply_effect(
								status_effect_def, 
								owner_player, # Source node
								specific_stats, # Weapon stats for scaling (if needed by effect logic)
								app_data.duration_override, 
								app_data.potency_override
							)
						else:
							print_debug("ERROR (ScytheAttack): Failed to load StatusEffectData from path: ", app_data.status_effect_resource_path)
					else:
						print_debug(name, ": Status effect application chance failed for '", app_data.status_effect_resource_path, "' (Rolled: ", randf(), ", Needed: < ", app_data.application_chance, ")")

		# --- Handle Soul Siphon on kill ---
		if specific_stats.get("has_soul_siphon", false):
			if enemy_target.is_dead(): 
				print_debug("Soul Siphon Check: SUCCESS, enemy_target.is_dead() is true.")
				var siphon_details = specific_stats.get("soul_siphon_details", {}) 
				var chance = float(siphon_details.get("chance", 0.1))
				var roll = randf()
				if roll < chance:
					if owner_player.has_method("heal"):
						var base_heal = int(siphon_details.get("base_heal", 3))
						# Get player's current Luck stat from PlayerStats component
						var player_luck = 0
						if is_instance_valid(owner_player) and is_instance_valid(owner_player.player_stats):
							player_luck = owner_player.player_stats.get_luck()
						
						# Ensure a minimum luck of 1 for scaling, so it doesn't heal 0 or less
						var effective_luck = max(1, player_luck)
						
						var final_heal_amount = base_heal * effective_luck
						
						print_debug("  -> Soul Siphon SUCCESS! (Roll:", roll, "<", chance, "). Healing player for ", final_heal_amount, " (Base: ", base_heal, ", Luck: ", player_luck, ")")
						owner_player.heal(final_heal_amount)
				else:
					print_debug("  -> Soul Siphon FAILED chance roll. (Roll:", roll, ">= ", chance, ")")
			else:
				print_debug("Soul Siphon Check: FAILED, enemy_target.is_dead() is false.")
 
==== H:\Game Creation\testing-environ\Scripts\UpgradeCard.gd ==== 
# UpgradeCard.gd
extends PanelContainer

signal card_selected(upgrade_data: Dictionary)

# These paths must be correct relative to this script's node (the PanelContainer)
@onready var title_label: Label = $CardLayout/TitleLabel
@onready var description_label: Label = $CardLayout/DescriptionLabel
@onready var icon_texture_rect: TextureRect = $CardLayout/IconTextureRect
@onready var select_button: Button = $CardLayout/SelectButton

var _current_card_data: Dictionary

func _ready():
	# This function runs when this card is instanced and added to the tree.
	# We will connect the button signal here.
	if not is_instance_valid(select_button):
		print_debug("ERROR (NewUpgradeCard): SelectButton not found at '$CardLayout/SelectButton'")
	elif not select_button.is_connected("pressed", Callable(self, "_on_select_button_pressed")):
		select_button.pressed.connect(Callable(self, "_on_select_button_pressed"))

func display_data(data: Dictionary):
	# This function will now be called AFTER the node is ready.
	_current_card_data = data
	
	if is_instance_valid(title_label):
		title_label.text = data.get("title", "N/A")
	
	if is_instance_valid(description_label):
		description_label.text = data.get("description", "")
		
	if is_instance_valid(icon_texture_rect):
		var icon_path = data.get("icon_path", "")
		if not icon_path.is_empty():
			var tex = load(icon_path) as Texture2D
			icon_texture_rect.texture = tex
			icon_texture_rect.visible = is_instance_valid(tex)
		else:
			icon_texture_rect.visible = false

func _on_select_button_pressed():
	if _current_card_data:
		emit_signal("card_selected", _current_card_data)
	else:
		print_debug("ERROR (NewUpgradeCard): Select button pressed but no data.")
 
==== H:\Game Creation\testing-environ\Scripts\WeaponManager.gd ==== 
# WeaponManager.gd
# Final Version: Uses index-based logic for robust state changes and a 
# timer-based state machine for multi-spin attacks to avoid async/await.
class_name WeaponManager
extends Node

@export var max_weapons: int = 6
var active_weapons: Array[Dictionary] = [] 
var game_node_ref: Node 

var _whirlwind_timer: Timer
var _whirlwind_queue: Array[Dictionary] = [] 

signal weapon_added(weapon_data_dict: Dictionary) 
signal weapon_removed(weapon_id: StringName)
signal weapon_upgraded(weapon_id: StringName, new_level: int) 
signal active_weapons_changed() 

func _ready():
	_whirlwind_timer = Timer.new()
	_whirlwind_timer.name = "WhirlwindSpinTimer"
	_whirlwind_timer.one_shot = true 
	add_child(_whirlwind_timer)
	_whirlwind_timer.timeout.connect(Callable(self, "_on_whirlwind_spin_timer_timeout"))

	var tree_root = get_tree().root
	game_node_ref = tree_root.get_node_or_null("Game") 

func add_weapon_from_blueprint_id(weapon_id: StringName) -> bool:
	if not _ensure_game_node_ref(): return false
	var blueprint_resource = game_node_ref.get_weapon_blueprint_by_id(weapon_id)
	if is_instance_valid(blueprint_resource) and blueprint_resource is WeaponBlueprintData:
		return add_weapon(blueprint_resource)
	return false

func add_weapon(blueprint_data: WeaponBlueprintData) -> bool: 
	if not is_instance_valid(blueprint_data): return false
	if active_weapons.size() >= max_weapons: return false
	if _get_weapon_entry_index_by_id(blueprint_data.id) != -1: return false

	var cooldown_timer = Timer.new()
	cooldown_timer.name = str(blueprint_data.id) + "CooldownTimer"
	cooldown_timer.wait_time = blueprint_data.cooldown 
	cooldown_timer.one_shot = true 
	add_child(cooldown_timer) 

	var weapon_entry = {
		"id": blueprint_data.id,
		"title": blueprint_data.title,
		"cooldown_timer": cooldown_timer,
		"current_cooldown": blueprint_data.cooldown, 
		"weapon_level": 1,
		"specific_stats": blueprint_data.initial_specific_stats.duplicate(true), 
		"blueprint_resource": blueprint_data, 
		"acquired_upgrade_ids": [] 
	}
	active_weapons.append(weapon_entry)
	
	cooldown_timer.timeout.connect(Callable(self, "_trigger_temporary_child_attack").bind(blueprint_data.id))
	cooldown_timer.start()
	emit_signal("weapon_added", weapon_entry.duplicate(true))
	emit_signal("active_weapons_changed")
	return true

func _trigger_temporary_child_attack(weapon_id: StringName):
	var weapon_index = _get_weapon_entry_index_by_id(weapon_id)
	if weapon_index == -1: return

	var specific_stats = active_weapons[weapon_index].specific_stats
	
	var bonus_for_this_cycle = 0
	if specific_stats.get("has_reaping_momentum", false):
		bonus_for_this_cycle = specific_stats.get("reaping_momentum_bonus", 0)
		active_weapons[weapon_index].specific_stats["reaping_momentum_bonus"] = 0
	
	# Spawn the first spin
	_spawn_single_attack_instance(active_weapons[weapon_index], bonus_for_this_cycle) 
	
	var number_of_spins = 1
	if specific_stats.get("has_whirlwind", false):
		number_of_spins = int(specific_stats.get("whirlwind_count", 1))
	
	# If more spins are needed, queue them up
	if number_of_spins > 1:
		var spin_data = {
			"weapon_id": weapon_id,
			"spins_left": number_of_spins - 1,
			"delay": float(specific_stats.get("whirlwind_delay", 0.1)),
			"reaping_bonus_to_apply": bonus_for_this_cycle
		}
		_whirlwind_queue.append(spin_data)
		if _whirlwind_timer.is_stopped():
			_whirlwind_timer.wait_time = spin_data.delay
			_whirlwind_timer.start()
			
	_restart_weapon_cooldown(active_weapons[weapon_index])

func _on_whirlwind_spin_timer_timeout():
	if _whirlwind_queue.is_empty(): return

	var current_whirlwind = _whirlwind_queue.front()
	var weapon_index = _get_weapon_entry_index_by_id(current_whirlwind.weapon_id)
		
	if weapon_index != -1:
		_spawn_single_attack_instance(active_weapons[weapon_index], current_whirlwind.reaping_bonus_to_apply)
	
	current_whirlwind.spins_left -= 1
	if current_whirlwind.spins_left <= 0:
		_whirlwind_queue.pop_front()
	
	if not _whirlwind_queue.is_empty():
		var next_whirlwind = _whirlwind_queue.front()
		_whirlwind_timer.wait_time = next_whirlwind.delay
		_whirlwind_timer.start()

func _spawn_single_attack_instance(weapon_entry: Dictionary, p_reaping_bonus: int):
	var blueprint_data = weapon_entry.blueprint_resource as WeaponBlueprintData
	if not is_instance_valid(blueprint_data) or not is_instance_valid(blueprint_data.weapon_scene): return
	var weapon_instance = blueprint_data.weapon_scene.instantiate()
	if not is_instance_valid(weapon_instance): return
	
	var stats_for_this_instance = weapon_entry.specific_stats.duplicate(true)
	stats_for_this_instance["reaping_momentum_bonus_to_apply"] = p_reaping_bonus
	
	var owner_player = get_parent() as PlayerCharacter
	if is_instance_valid(owner_player):
		if blueprint_data.spawn_as_child:
			owner_player.add_child(weapon_instance); weapon_instance.global_position = owner_player.global_position 
		if weapon_instance.has_method("set_owner_player"):
			weapon_instance.set_owner_player(owner_player)
		if weapon_instance.has_method("set_weapon_manager_reference"):
			weapon_instance.set_weapon_manager_reference(self)
	else: get_tree().current_scene.add_child(weapon_instance)
	
	if weapon_instance.has_signal("reaping_momentum_hits"):
		weapon_instance.reaping_momentum_hits.connect(Callable(self, "_on_reaping_momentum_hits").bind(weapon_entry.id), CONNECT_ONE_SHOT)
	if weapon_instance.has_method("initialize_weapon_stats_and_attack"):
		weapon_instance.initialize_weapon_stats_and_attack(stats_for_this_instance)

func _on_reaping_momentum_hits(hit_count: int, weapon_id: StringName):
	var weapon_index = _get_weapon_entry_index_by_id(weapon_id)
	if weapon_index == -1: return
	
	var dmg_per_hit = int(active_weapons[weapon_index].specific_stats.get("reaping_momentum_dmg_per_hit", 1))
	var bonus_to_add = hit_count * dmg_per_hit 
	
	if bonus_to_add > 0:
		var current_stored_bonus = active_weapons[weapon_index].specific_stats.get("reaping_momentum_bonus", 0)
		active_weapons[weapon_index].specific_stats["reaping_momentum_bonus"] = current_stored_bonus + bonus_to_add

func _restart_weapon_cooldown(weapon_entry: Dictionary):
	if is_instance_valid(weapon_entry.get("cooldown_timer")):
		var timer = weapon_entry.cooldown_timer as Timer
		timer.wait_time = get_weapon_cooldown_value(weapon_entry)
		timer.start()

func get_weapon_cooldown_value(weapon_entry: Dictionary) -> float:
	var blueprint_data = weapon_entry.blueprint_resource as WeaponBlueprintData
	if not is_instance_valid(blueprint_data): return 999.0
	var final_cooldown = blueprint_data.cooldown
	var owner_player = get_parent() as PlayerCharacter 
	if is_instance_valid(owner_player) and is_instance_valid(owner_player.player_stats):
		var p_stats = owner_player.player_stats 
		if is_instance_valid(p_stats) and p_stats.has_method("get_current_global_cooldown_reduction_flat"): 
			final_cooldown -= p_stats.get_current_global_cooldown_reduction_flat()
			final_cooldown *= (1.0 - p_stats.get_current_global_cooldown_reduction_mult())
	final_cooldown *= (1.0 - float(weapon_entry.specific_stats.get("cooldown_reduction_percent", 0.0)))
	final_cooldown -= float(weapon_entry.specific_stats.get("cooldown_reduction_flat", 0.0))
	return max(0.05, final_cooldown) 

func apply_weapon_upgrade(weapon_id: StringName, upgrade_data_resource: WeaponUpgradeData):
	var weapon_index = _get_weapon_entry_index_by_id(weapon_id)
	if weapon_index == -1: 
		print_debug("WARNING (WeaponManager): Weapon ID '", weapon_id, "' not found for upgrade.")
		return

	var current_stacks = active_weapons[weapon_index].acquired_upgrade_ids.count(upgrade_data_resource.upgrade_id)
	if upgrade_data_resource.max_stacks > 0 and current_stacks >= upgrade_data_resource.max_stacks: return

	for effect_resource in upgrade_data_resource.effects:
		if not is_instance_valid(effect_resource): continue
		
		if effect_resource is StatModificationEffectData:
			var stat_mod = effect_resource as StatModificationEffectData
			if stat_mod.target_scope == &"player_stats":
				var p_stats = get_parent().get_node_or_null("PlayerStats") as PlayerStats
				if is_instance_valid(p_stats) and p_stats.has_method("_process_stat_modification_effect"):
					p_stats._process_stat_modification_effect(stat_mod)
			elif stat_mod.target_scope == &"weapon_specific_stats":
				var key = stat_mod.stat_key; var value = stat_mod.get_value()
				var current_val = active_weapons[weapon_index].specific_stats.get(key, 0)
				active_weapons[weapon_index].specific_stats[key] = current_val + value
		
		elif effect_resource is CustomFlagEffectData:
			var flag_mod = effect_resource as CustomFlagEffectData
			if flag_mod.target_scope == &"weapon_specific_stats" or flag_mod.target_scope == &"weapon_behavior":
				active_weapons[weapon_index].specific_stats[flag_mod.flag_key] = flag_mod.flag_value
		
		elif effect_resource is StatusEffectApplicationData:
			var status_app_data = effect_resource as StatusEffectApplicationData
			if not active_weapons[weapon_index].specific_stats.has("on_hit_status_applications"):
				active_weapons[weapon_index].specific_stats["on_hit_status_applications"] = []
			active_weapons[weapon_index].specific_stats["on_hit_status_applications"].append(status_app_data)
	
	active_weapons[weapon_index].weapon_level += 1
	active_weapons[weapon_index].acquired_upgrade_ids.append(upgrade_data_resource.upgrade_id) 
	active_weapons[weapon_index].current_cooldown = get_weapon_cooldown_value(active_weapons[weapon_index])
	if is_instance_valid(active_weapons[weapon_index].cooldown_timer):
		active_weapons[weapon_index].cooldown_timer.wait_time = active_weapons[weapon_index].current_cooldown
	
	emit_signal("weapon_upgraded", weapon_id, active_weapons[weapon_index].weapon_level)
	emit_signal("active_weapons_changed")

func get_active_weapons_data_for_level_up() -> Array[Dictionary]:
	var weapons_data_copy: Array[Dictionary] = []
	for weapon_entry in active_weapons:
		var display_data = {
			"id": weapon_entry.id, "title": weapon_entry.title,
			"weapon_level": weapon_entry.weapon_level,
			"specific_stats": weapon_entry.specific_stats.duplicate(true), 
			"blueprint_resource_path": weapon_entry.blueprint_resource.resource_path if is_instance_valid(weapon_entry.blueprint_resource) else ""
		}
		weapons_data_copy.append(display_data)
	return weapons_data_copy

func _get_weapon_entry_index_by_id(weapon_id: StringName) -> int:
	for i in range(active_weapons.size()):
		if active_weapons[i].id == weapon_id:
			return i
	return -1

func _ensure_game_node_ref() -> bool:
	if is_instance_valid(game_node_ref) and game_node_ref.has_method("get_weapon_blueprint_by_id"):
		return true
	var tree_root = get_tree().root
	game_node_ref = tree_root.get_node_or_null("Game")
	if not is_instance_valid(game_node_ref) or not game_node_ref.has_method("get_weapon_blueprint_by_id"):
		print_debug("ERROR (WeaponManager @ _ensure_game_node_ref): game_node_ref issue.")
		return false
	return true
 
==== H:\Game Creation\testing-environ\Scripts\DataResources\EnemyData.gd ==== 
# EnemyData.gd
# Path: res://Scripts/DataResources/EnemyData.gd (adjust if you placed it elsewhere)
# This script defines the structure for individual enemy data resources.
class_name EnemyData
extends Resource

## Unique identifier for this enemy type. Used for lookups and debugging.
@export var id: StringName = &""
## Display name for this enemy, useful for debugging or potential UI elements.
@export var display_name: String = "Enemy"

@export_group("Spawning & Phasing")
## File path to the enemy's scene file (.tscn). This is what will be instanced.
@export var scene_path: String = ""
## The minimum Dynamic Difficulty Score (DDS) required for this enemy to start appearing.
@export var min_DDS_to_spawn: float = 0.0
## The Dynamic Difficulty Score (DDS) after which this enemy will STOP appearing.
## Set to -1.0 (or any negative value) to make the enemy never phase out based on DDS.
@export var max_DDS_to_spawn: float = -1.0
## Relative chance of this enemy spawning when it's part of the active pool and eligible by DDS.
## Higher values mean it's more likely to be picked compared to others with lower weights.
@export var spawn_weight: float = 100.0
## How many "slots" this enemy type consumes in the game's limited active enemy pool (e.g., 5-7 types).
## Most standard enemies will be 1. More complex/large enemies might be 2 or more.
@export var ideal_active_pool_slot_cost: int = 1

@export_group("Base Stats (Static for this type)")
## Base maximum health of the non-elite version of this enemy.
@export var base_health: int = 30
## Base damage dealt by the non-elite enemy on contact.
@export var base_contact_damage: int = 5
## Base movement speed of the non-elite enemy.
@export var base_speed: float = 50.0
## Base armor value of the non-elite enemy, reducing incoming flat damage.
@export var base_armor: int = 0
## The amount of experience this specific non-elite enemy type will drop (this value is passed to the EXP orb).
@export var base_exp_drop: int = 1

@export_group("Drops")
## File path to the specific EXP drop scene (.tscn) this enemy should instantiate.
## Allows for different visual EXP orbs (e.g., small, medium, large).
@export var exp_drop_scene_path: String = "res://Scenes/Pickups/exp_drop_small.tscn" # Default to a common small one

@export_group("Visuals & Variations")
## Modulate color to apply to the enemy's sprite. Useful for creating color-swapped variants
## that reuse the same base scene. Default is white (no change).
@export var sprite_modulate_color: Color = Color(1,1,1,1)
## If the base sprite in the scene file faces left by default, check this.
## If it faces right (standard), leave unchecked. This affects flip_h logic.
@export var sprite_faces_left_by_default: bool = false # NEW
# ## Optional: If you want to specify a scale multiplier directly in data for this enemy type.
# ## Vector2.ZERO could mean use the scale from the enemy's scene file.
# @export var visual_scale_override: Vector2 = Vector2.ZERO

@export_group("Elite Properties")
## An array of StringNames representing the types of elite affixes this enemy can have.
## These tags should correspond to logic in BaseEnemy.gd's make_elite() function.
## Example tags: &"phaser", &"summoner", &"brute", &"tank", &"immovable", &"shaman", &"swift", &"time_warper"
@export var elite_types_available: Array[StringName] = []
## The minimum Dynamic Difficulty Score (DDS) required before this *specific enemy type*
## can start appearing as an elite version (even if general elite chance is met).
@export var min_DDS_for_elites_to_appear: float = 50.0

# --- Configurable Parameters for Specific Elite Types (if this enemy can have them) ---
# These are only relevant if the corresponding tag is in elite_types_available and make_elite() uses them.

@export_group("Elite: Phaser Config (if this enemy can be a Phaser)")
## Cooldown in seconds for the Phaser teleport ability. Logic in BaseEnemy.gd.
@export var phaser_cooldown: float = 5.0
## Max distance the Phaser elite will attempt to teleport. Logic in BaseEnemy.gd.
@export var phaser_teleport_distance: float = 150.0

@export_group("Elite: Summoner Config (if this enemy can be a Summoner)")
## Interval in seconds at which the Summoner elite attempts to summon. Logic in BaseEnemy.gd.
@export var summoner_interval: float = 1.0 # Example: Summons one mob every second
## Maximum number of active summons this specific Summoner elite can maintain. Logic in BaseEnemy.gd.
@export var summoner_max_active_minions: int = 3
# ## Optional: Specific enemy ID(s) this summoner prefers, or leave empty for game.gd to pick weakest relevant.
# @export var summoner_preferred_minion_ids: Array[StringName] = []

@export_group("Elite: Shaman Config (if this enemy can be a Shaman)")
## Radius of the Shaman's healing aura. Logic in BaseEnemy.gd.
@export var shaman_heal_radius: float = 120.0
## Percentage of max health healed per tick by the Shaman. Logic in BaseEnemy.gd.
@export var shaman_heal_percent: float = 0.10 # 10%
## Interval in seconds for the Shaman's healing pulse. Logic in BaseEnemy.gd.
@export var shaman_heal_interval: float = 1.0

@export_group("Elite: Time-Warper Config (if this enemy can be a Time-Warper)")
## Radius of the Time-Warper's slowing aura. Logic in BaseEnemy.gd (likely applies a status to player).
@export var time_warp_radius: float = 180.0
## Percentage to slow player movement and attack speed. Logic in BaseEnemy.gd/Player StatusEffect.
@export var time_warp_slow_percent: float = 0.25 # 25% slow
## Duration in seconds the slow effect lingers after player exits the aura. Logic in Player StatusEffect.
@export var time_warp_linger_duration: float = 2.0

@export_group("Culling & Threat")
## How much this enemy adds to the global threat pool if culled (removed for being too far off-screen).
@export var threat_value_when_culled: int = 1
 
==== H:\Game Creation\testing-environ\Scripts\DataResources\Classes\PlayerClassProgressionData.gd ==== 
# PlayerClassProgressionData.gd
# Path: res://Scripts/DataResources/Classes/PlayerClassProgressionData.gd
# Extends Resource to define the requirements for unlocking a specific advanced or master player class tier.
class_name PlayerClassProgressionData
extends Resource

## Unique identifier for this specific progression path.
## Example: "unlock_paladin", "unlock_archmage_tier2"
@export var progression_id: StringName = &""

## The PlayerClassTierData resource that this progression path unlocks.
## You will drag a .tres file (e.g., "paladin_advanced.tres") here in the Inspector.
@export var class_tier_to_unlock: PlayerClassTierData = null

## A user-friendly description of how to unlock this class tier, for UI display.
## Example: "Achieve 10 total levels in Warrior weapons and 10 total levels in Knight weapons."
@export var unlock_description: String = "Unlock requirements for this class."

@export_group("Requirements for Unlocking")
## An array of dictionaries defining the requirements from Basic classes.
## Each dictionary specifies a basic class and the total number of weapon levels
## accumulated across all weapons belonging to that basic class.
## Example: [{"class_tag": PlayerCharacter.BasicClass.WARRIOR, "total_weapon_levels_needed": 10},
##           {"class_tag": PlayerCharacter.BasicClass.KNIGHT, "total_weapon_levels_needed": 10}]
## The PlayerCharacter.BasicClass enum should be defined in your PlayerCharacter.gd script.
@export var required_basic_class_contributions: Array[Dictionary] = []

## An array of StringName IDs (class_id from PlayerClassTierData) of Advanced class tiers
## that must be unlocked before this progression path (typically for a Master tier) can be completed.
## Example: [&"paladin_advanced", &"elementalist_advanced"] to unlock a Master tier.
@export var required_advanced_class_ids: Array[StringName] = []

## Optional: Minimum player overall level required.
@export var minimum_player_level: int = 0

## Optional: Specific other achievements or game flags that must be met.
## (This is a placeholder for more complex unlock conditions if needed later)
# @export var other_required_flags: Array[StringName] = []


func _init():
	# developer_note = "Defines how a specific player class tier is unlocked."
	pass

# Helper function to check if this progression is currently met by the player.
# This would be called by a system in PlayerCharacter.gd or Game.gd.
# It needs access to the player's current weapon levels per class and unlocked advanced classes.
# func are_requirements_met(player_weapon_levels_by_class: Dictionary, unlocked_advanced_class_ids: Array[StringName], p_player_level: int) -> bool:
# 	if p_player_level < minimum_player_level:
# 		return false
# 
# 	for req_basic in required_basic_class_contributions:
# 		var class_tag_val = req_basic.get("class_tag") # This will be an int if PlayerCharacter.BasicClass is an enum
# 		var levels_needed = req_basic.get("total_weapon_levels_needed", 0)
# 		if player_weapon_levels_by_class.get(class_tag_val, 0) < levels_needed:
# 			return false # Requirement for this basic class not met
# 
# 	for req_advanced_id in required_advanced_class_ids:
# 		if not req_advanced_id in unlocked_advanced_class_ids:
# 			return false # Required advanced class not yet unlocked
# 
# 	# Check other_required_flags if implemented
# 
# 	return true
 
==== H:\Game Creation\testing-environ\Scripts\DataResources\Classes\PlayerClassTierData.gd ==== 
# PlayerClassTierData.gd
# Path: res://Scripts/DataResources/Classes/PlayerClassTierData.gd
# Extends Resource to define the properties of a specific player class tier (e.g., Basic Warrior, Advanced Paladin).
class_name PlayerClassTierData
extends Resource

## Unique identifier for this specific class tier.
## Examples: "warrior_basic", "paladin_advanced", "archmage_master"
@export var class_id: StringName = &""

## The display name of the class tier for UI purposes.
@export var display_name: String = "Class Tier Name"

## Numerical representation of the tier (e.g., 0 for Basic, 1 for Advanced, 2 for Master).
## This can be used for sorting or conditional logic.
@export var tier_level: int = 0 # 0: Basic, 1: Advanced, 2: Master, etc.

## Optional: Path to a PackedScene or Texture2D to override the player's default appearance
## when this class tier is active or selected. Leave empty if no visual change.
@export var sprite_override_path: String = "" # Could also be @export var sprite_override: Texture2D or PackedScene

## An array of EffectData resources (likely StatModificationEffectData) that are
## permanently applied to the player's base stats upon unlocking or activating this class tier.
@export var permanent_stat_bonuses: Array[EffectData] = []

## An array of WeaponBlueprintData resources (or their StringName IDs)
## that become available for the player to find or be offered when this class tier is active/unlocked.
## Using StringName IDs for blueprints might be more flexible for later blueprint changes.
@export var unlocked_weapon_blueprint_ids: Array[StringName] = []
# Alternatively, for direct linking in editor (but less flexible if blueprints change often):
# @export var unlocked_weapon_blueprints: Array[WeaponBlueprintData] = []


## An array of StringName identifiers for special abilities or passive traits unlocked with this class tier.
## The PlayerCharacter.gd script would need to interpret these ability IDs.
## Examples: "dash_attack_unlocked", "mana_shield_passive", "dual_wield_enabled"
@export var unlocked_abilities: Array[StringName] = []

## Optional: A brief description of this class tier, its playstyle, or unique features for UI.
@export var tier_description: String = "Description of this class tier."


func _init():
	# developer_note = "Defines a specific tier of a player class, its bonuses, and unlocks."
	pass

# You could add helper functions here if needed, for example, to check if a specific ability is unlocked by this tier.
# func has_ability(ability_id_to_check: StringName) -> bool:
#	 return ability_id_to_check in unlocked_abilities
 
==== H:\Game Creation\testing-environ\Scripts\DataResources\Effects\CustomFlagEffectData.gd ==== 
# CustomFlagEffectData.gd
# Path: res://Scripts/DataResources/Effects/CustomFlagEffectData.gd
# Extends EffectData to define setting a boolean flag.
# REMOVED target_scope as it's now inherited from EffectData.gd.
class_name CustomFlagEffectData
extends EffectData

## The name of the flag to set.
## Examples: "has_reaping_momentum", "applies_bleed", "is_stunned"
@export var flag_key: StringName = &""

## The boolean value to set the flag to.
@export var flag_value: bool = false


func _init():
	# Automatically set the effect_type_id for this specific subclass.
	effect_type_id = &"set_flag"
	# developer_note = "Sets a boolean flag to true or false within the target_scope."
 
==== H:\Game Creation\testing-environ\Scripts\DataResources\Effects\EffectData.gd ==== 
# EffectData.gd
# Base resource for all game effects.
# Added target_scope to define where the effect should be applied.
class_name EffectData
extends Resource

## A unique identifier for the type of effect (e.g., "stat_mod", "set_flag", "apply_status").
## This is set by the _init() function of each subclass.
@export var effect_type_id: StringName = &""

## NEW: Defines the scope where the effect is applied.
## Examples: "player_stats", "weapon_specific_stats", "enemy_stats", "enemy_behavior".
## The system processing this effect will use this to target the correct component/dictionary.
@export var target_scope: StringName = &""

## Optional: A note for developers to understand the purpose of this specific effect resource.
@export_multiline var developer_note: String = ""


func _init():
	# Base class has no specific type ID. Subclasses should set this.
	effect_type_id = &"base_effect_data"
 
==== H:\Game Creation\testing-environ\Scripts\DataResources\Effects\StatModificationEffectData.gd ==== 
# StatModificationEffectData.gd
# Extends EffectData to define a modification to a numerical game statistic.
# Uses an enum to allow choosing between Int or Float values in the Inspector.
class_name StatModificationEffectData
extends EffectData

enum ValueType { FLOAT, INT }

@export var stat_key: StringName = &""
@export var modification_type: StringName = &"flat_add" 

@export_group("Value Settings")
@export var value_type: ValueType = ValueType.FLOAT

# Only edit the value that corresponds to the chosen value_type above.
@export var value_float: float = 0.0
@export var value_int: int = 0

# Helper function to get the correct value based on the chosen type
func get_value() -> Variant:
	if value_type == ValueType.INT:
		return value_int
	return value_float


func _init():
	effect_type_id = &"stat_mod"
 
==== H:\Game Creation\testing-environ\Scripts\DataResources\Effects\StatusEffectApplicationData.gd ==== 
# StatusEffectApplicationData.gd
# Path: res://Scripts/DataResources/Effects/StatusEffectApplicationData.gd
# Extends EffectData to define how a specific status effect should be applied.
# This resource is used when an upgrade or ability grants the capability to apply a status.
class_name StatusEffectApplicationData
extends EffectData

## The resource path to the StatusEffectData.tres file that defines the actual status effect
## (e.g., "res://DataResources/StatusEffects/burn.tres").
@export_file("*.tres") var status_effect_resource_path: String = ""
# Alternatively, for direct linking in editor (but less flexible if status effect definitions change often):
# @export var status_effect_data: StatusEffectData = null

## The chance (0.0 to 1.0) that this status effect will be applied upon a successful trigger (e.g., on hit).
## A value of 1.0 means it always applies if triggered.
@export_range(0.0, 1.0, 0.01) var application_chance: float = 1.0

## Optional: Override the default duration of the status effect.
## If -1.0 (or less than 0), the duration from the StatusEffectData resource will be used.
@export var duration_override: float = -1.0

## Optional: Override or scale the potency/magnitude of the status effect.
## The interpretation of this value depends on the specific StatusEffectData being applied.
## For a DoT, it might be a damage multiplier. For a slow, a percentage point increase/decrease.
## If -1.0 (or a conventional 'no override' value), the base potency from StatusEffectData is used.
@export var potency_override: float = -1.0 
# Potency could also be a dictionary for more complex overrides:
# @export var potency_params_override: Dictionary = {}


func _init():
	# Automatically set the effect_type_id for this specific subclass.
	effect_type_id = &"apply_status"
	# developer_note = "Defines the application parameters for a status effect."

# This resource primarily holds data. The logic to load the 'status_effect_resource_path',
# check 'application_chance', and then call 'StatusEffectComponent.apply_effect()' with
# the loaded StatusEffectData and any overrides will be in the system that processes
# an array of EffectData (e.g., in PlayerCharacter.gd for general upgrades, or
# in a weapon's attack script for weapon-specific status applications).

# Example of how a processing system might use this:
# func _try_apply_status_from_data(target_status_component: StatusEffectComponent, app_data: StatusEffectApplicationData, source_node: Node, weapon_stats: Dictionary):
# 	if not is_instance_valid(target_status_component) or not is_instance_valid(app_data):
# 		return
# 
# 	if randf() >= app_data.application_chance:
# 		return # Failed chance roll
# 
# 	if app_data.status_effect_resource_path.is_empty():
# 		print_debug("StatusEffectApplicationData: status_effect_resource_path is empty.")
# 		return
# 
# 	var status_effect_def = load(app_data.status_effect_resource_path) as StatusEffectData
# 	if not is_instance_valid(status_effect_def):
# 		print_debug("StatusEffectApplicationData: Failed to load StatusEffectData from path: ", app_data.status_effect_resource_path)
# 		return
# 
# 	# Here, you would pass the status_effect_def to the target's StatusEffectComponent.
# 	# The StatusEffectComponent.apply_effect() method would then need to be able
# 	# to handle potential duration_override and potency_override from app_data.
# 	# This might involve passing app_data itself or specific override values.
# 	
#   # Simplified example - actual apply_effect might take more args or a dictionary of overrides
# 	target_status_component.apply_effect(status_effect_def, source_node, weapon_stats, app_data.duration_override, app_data.potency_override)
# 
#   # Or, StatusEffectComponent.apply_effect could take the StatusEffectApplicationData directly:
#   # target_status_component.apply_effect_from_application_data(app_data, source_node, weapon_stats)
 
==== H:\Game Creation\testing-environ\Scripts\DataResources\Effects\TriggerAbilityEffectData.gd ==== 
# TriggerAbilityEffectData.gd
# Path: res://Scripts/DataResources/Effects/TriggerAbilityEffectData.gd
# Extends EffectData to define triggering a specific, scripted ability.
# REMOVED target_scope as it's now inherited from EffectData.gd.
class_name TriggerAbilityEffectData
extends EffectData

## The unique name of the ability to trigger.
## The system processing this effect (e.g., WeaponManager, PlayerCharacter)
## will have a 'match' or 'if' statement to handle this ID.
## Examples: "fork_projectile", "trigger_explosion_on_hit", "activate_whirlwind"
@export var ability_id: StringName = &""

## A dictionary of parameters to pass to the ability.
## This allows a single ability to be configured in different ways.
## Example for a "fork_projectile" ability: {"count": 2, "angle_spread_degrees": 30}
@export var ability_params: Dictionary = {}


func _init():
	# Automatically set the effect_type_id for this specific subclass.
	effect_type_id = &"trigger_ability"
	# developer_note = "Triggers a named ability on the target scope, passing parameters."
 
==== H:\Game Creation\testing-environ\Scripts\DataResources\StatusEffects\StatusEffectData.gd ==== 
# StatusEffectData.gd
# Path: res://Scripts/DataResources/StatusEffects/StatusEffectData.gd
# Extends Resource to define the properties and behaviors of a status effect (buff or debuff).
class_name StatusEffectData
extends Resource

## Unique identifier for this status effect.
## Examples: "burn", "chill", "player_haste", "enemy_vulnerable"
@export var id: StringName = &""

## Display name for UI purposes (e.g., if shown on target's status bar).
@export var display_name: String = "Status Effect"

## Optional: Path to an icon texture for this status effect.
@export var icon: Texture2D = null

## Default duration of the status effect in seconds. 
## A duration of 0 or less might indicate a permanent toggle (if not stackable) or an instant effect.
## Can be overridden by StatusEffectApplicationData.
@export var duration: float = 5.0 

## How many times this status effect can stack on a single target.
## 0 or 1: No stacking (re-application might just refresh duration).
## >1: Allows multiple stacks, potentially increasing potency or duration per stack.
@export var max_stacks: int = 1

## If true, re-applying the effect to a target that already has it will refresh its duration.
@export var refresh_duration_on_reapply: bool = true

## If true, the 'effects_while_active' are re-evaluated and re-applied each time a stack is added.
## If false, they are applied once when the first stack is applied and removed when all stacks expire.
# @export var reapply_effects_on_stack: bool = true # Consider if needed, adds complexity

@export_group("Tick-Based Effects (for DoTs, HoTs, etc.)")
## Interval in seconds for tick-based effects (e.g., damage over time). 
## If 0, this is not a tick-based effect by default (or effects are instant).
@export var tick_interval: float = 0.0 
## If true, the first tick happens immediately upon application, then subsequent ticks follow the interval.
@export var tick_on_application: bool = false

@export_group("Core Effects")
## An array of EffectData resources (StatModificationEffectData, CustomFlagEffectData, etc.)
## that are applied to the target while this status effect is active.
## For DoTs like "burn", one of these effects would be a StatModificationEffectData that deals damage.
## For "chill", one might be a StatModificationEffectData that reduces "movement_speed".
@export var effects_while_active: Array[EffectData] = []

## Optional: Effects to apply *once* when the status effect is first applied.
# @export var effects_on_application: Array[EffectData] = []

## Optional: Effects to apply *once* when the status effect expires or is removed.
# @export var effects_on_expiration: Array[EffectData] = []

## Optional: StringName ID of another StatusEffectData to apply when this one expires (e.g., Chill -> Freeze)
# @export var next_status_effect_on_expire: StringName = &""


func _init():
	# developer_note = "Defines a status effect like Burn, Chill, Haste, etc."
	pass

# Potential helper methods could be added here if needed, e.g.,
# func get_modifier_for_stat(stat_key_to_find: StringName) -> StatModificationEffectData:
# 	for effect in effects_while_active:
# 		if effect is StatModificationEffectData:
# 			var stat_mod_effect = effect as StatModificationEffectData
# 			if stat_mod_effect.stat_key == stat_key_to_find:
# 				return stat_mod_effect
# 	return null
 
==== H:\Game Creation\testing-environ\Scripts\DataResources\Upgrades\GeneralUpgradeCardData.gd ==== 
# GeneralUpgradeCardData.gd
# Path: res://Scripts/DataResources/Upgrades/GeneralUpgradeCardData.gd
# Extends Resource to define general player upgrades that are not specific to a single weapon.
# Examples: "Might" (global damage up), "Swiftness" (movement speed up), "Vitality" (max health up).
class_name GeneralUpgradeCardData
extends Resource

## Unique identifier for this general upgrade card.
## Example: "gen_might_1", "gen_swiftness_1", "player_aura_thorns"
@export var id: StringName = &""

## The display name of the upgrade as it would appear in the UI (e.g., level-up screen).
@export var title: String = "General Upgrade Title"

## A description of what the upgrade does, for UI display.
@export var description: String = "General upgrade description."

## Optional: Path to an icon texture for this upgrade.
## Using Texture2D directly allows drag-and-drop in Inspector.
@export var icon: Texture2D = null

## Defines which basic player classes can be offered this upgrade.
## An empty array means it's available to all classes.
## If populated, only players whose current basic class(es) are in this list will see it.
## Uses the PlayerCharacter.BasicClass enum values.
@export var class_tag_filter: Array[PlayerCharacter.BasicClass] = []

@export_group("Effects & Offering")
## An array of EffectData resources (StatModificationEffectData, CustomFlagEffectData, 
## TriggerAbilityEffectData, StatusEffectApplicationData) that define what this upgrade actually does.
## Most general upgrades will likely use StatModificationEffectData targeting "player_stats".
@export var effects: Array[EffectData] = []

## Relative weight for this upgrade to be chosen when offering upgrade options.
## Higher values mean it's more likely to appear (if class filter and prerequisites are met).
@export var weight: float = 100.0

## How many times this specific general upgrade can be acquired by the player.
## Some might be unique (1), others might be stackable (e.g., "+5 Max Health" up to 5 times).
@export var max_stacks: int = 1

## An array of StringName IDs of other GeneralUpgradeCardData (or potentially WeaponUpgradeData IDs
## or even specific weapon level achievements like "weapon_scythe_level_5")
## that must be acquired/achieved before this upgrade can be offered or taken.
@export var prerequisites: Array[StringName] = [] 
# Example for prerequisites: [&"gen_might_1"] (to unlock "gen_might_2")
# Or for a more complex one: [&"weapon_any_melee_level_3", &"player_level_10"] (conceptual)


func _init():
	# developer_note = "Defines a general player upgrade card."
	pass

# Example of how this might be used:
# When a player levels up, the system gathers all available GeneralUpgradeCardData.tres files.
# It filters them based on:
# 1. class_tag_filter (if player's current class matches).
# 2. prerequisites (if player has already acquired the required upgrade IDs).
# 3. max_stacks (if player hasn't already taken this upgrade max_stacks times).
# Then, it uses 'weight' to select a few options to present to the player.
#
# When chosen, PlayerCharacter.gd's apply_upgrade method would iterate through this card's 'effects' array:
# func apply_upgrade(upgrade_resource: Resource):
#   if upgrade_resource is GeneralUpgradeCardData:
#       var general_card_data = upgrade_resource as GeneralUpgradeCardData
#       # Record that this general upgrade (general_card_data.id) has been acquired/stacked.
#       # Then apply its effects:
#       for effect_res in general_card_data.effects:
#           if effect_res is StatModificationEffectData:
#               var stat_mod = effect_res as StatModificationEffectData
#               if stat_mod.target_scope == &"player_stats" and is_instance_valid(player_stats_node):
#                   # This part needs to call a method on player_stats_node
#                   # that correctly applies the stat_key, modification_type, and value
#                   # to the player's base_stats or modifier dictionaries.
#                   player_stats_node.apply_stat_modification_effect(stat_mod) # Hypothetical method
#           # ... handle other effect types like CustomFlagEffectData for player_behavior ...
#       player_stats_node.recalculate_all_stats() # Assuming PlayerStats has this
 
==== H:\Game Creation\testing-environ\Scripts\DataResources\Upgrades\WeaponUpgradeData.gd ==== 
# WeaponUpgradeData.gd
# Path: res://Scripts/DataResources/Upgrades/WeaponUpgradeData.gd
# Extends Resource to define the properties and effects of a single weapon upgrade.
class_name WeaponUpgradeData
extends Resource

## Unique identifier for this specific upgrade.
## Example: "scythe_sharpened_edge_1", "spark_chain_lightning_1"
@export var upgrade_id: StringName = &""

## The display name of the upgrade as it would appear in the UI.
@export var title: String = "Upgrade Title"

## A description of what the upgrade does, for UI display.
@export var description: String = "Upgrade Description."

## Optional: Path to an icon texture for this upgrade.
## Using Texture2D directly allows drag-and-drop in Inspector.
@export var icon: Texture2D = null 

@export_group("Requirements & Offering")
## An array of 'upgrade_id' StringNames (from other WeaponUpgradeData resources for THE SAME WEAPON)
## that must be acquired before this upgrade can be offered or taken.
@export var prerequisites_on_this_weapon: Array[StringName] = [] 

## Relative weight for this upgrade to be chosen when offering upgrade options.
## Higher values mean it's more likely to appear, assuming prerequisites are met.
@export var weight: float = 100.0

## How many times this specific upgrade can be acquired for a single weapon instance.
## Most unique upgrades will be 1. Some generic "+damage" upgrades might have more.
@export var max_stacks: int = 1

@export_group("Effects & Tracking")
## An array of EffectData resources (or its subclasses like StatModificationEffectData, 
## CustomFlagEffectData, TriggerAbilityEffectData, StatusEffectApplicationData)
## that define what this upgrade actually does.
@export var effects: Array[EffectData] = []

## IMPORTANT: This StringName should match a 'flag_key' that one of the 'effects' 
## (typically a CustomFlagEffectData) will set to true in the weapon's specific_stats.
## The game logic (e.g., in game.gd's get_weapon_next_level_upgrades) uses this
## to check if this particular upgrade card has already been applied to a weapon instance.
## Example: "scythe_sharpened_edge_1_acquired"
@export var set_acquired_flag_on_weapon: StringName = &"" 


func _init():
	# developer_note = "Defines a single upgrade for a weapon."
	pass
 
==== H:\Game Creation\testing-environ\Scripts\DataResources\Weapons\WeaponBlueprintData.gd ==== 
# WeaponBlueprintData.gd
# Path: res://Scripts/DataResources/Weapons/WeaponBlueprintData.gd
# Extends Resource to define the properties, base stats, behavior, 
# and available upgrades for a weapon type.
class_name WeaponBlueprintData
extends Resource

## Unique identifier for this weapon blueprint.
## Example: "warrior_scythe", "wizard_spark_bolt"
@export var id: StringName = &""

## The display name of the weapon as it would appear in UI (e.g., level-up screen).
@export var title: String = "Weapon Title"

## A brief description of the weapon for UI display.
@export var description: String = "Weapon Description."

## The PackedScene file (.tscn) for the weapon's attack/projectile/aura.
## This is what will be instanced when the weapon attacks or is activated.
@export var weapon_scene: PackedScene

## Optional: Path to an icon texture for this weapon, for UI display.
## Using Texture2D directly allows drag-and-drop in Inspector.
@export var icon: Texture2D = null 

## Tags for categorizing the weapon (e.g., "Melee", "Projectile", "AoE", "Spell", "Summon").
## Useful for general upgrades that affect specific weapon types.
@export var tags: Array[String] = []

## Defines which basic player classes can initially acquire or be offered this weapon.
## An empty array means it's potentially available to all (or managed by other game logic).
## Uses the PlayerCharacter.BasicClass enum values.
@export var class_tag_restrictions: Array[PlayerCharacter.BasicClass] = []


@export_group("Base Behavior & Stats")
## Base cooldown time in seconds between uses/attacks of this weapon.
@export var cooldown: float = 2.0

## The maximum number of times this specific weapon can be "leveled up" by acquiring its unique upgrades.
## This helps determine when to stop offering its specific upgrades.
@export var max_level: int = 7

## If true, the weapon_scene is instanced as a direct child of the WeaponManager (or player).
## If false, it's typically instanced in the main game world (e.g., projectiles).
@export var spawn_as_child: bool = false 

## If true, the weapon requires a direction vector (e.g., towards mouse or an enemy) when attacking.
@export var requires_direction: bool = true

## Defines how the weapon targets (if it requires direction).
## Examples: "mouse", "nearest_enemy", "random_enemy_in_range", "fixed_player_facing"
@export var targeting_type: String = "mouse" 

## If true, this weapon functions as an aura around the player.
@export var is_aura: bool = false

## If true, this weapon creates a group of orbiting entities.
@export var is_orbital_group: bool = false

## If true, a single activation of this weapon performs multiple hits/actions in a sequence.
@export var is_multi_hit_sequence: bool = false
## Number of hits/actions in a multi-hit sequence.
@export var multi_hit_count: int = 1
## Delay in seconds between hits/actions in a multi-hit sequence.
@export var multi_hit_delay: float = 0.1

## If true, this weapon is a persistent summon/pet rather than a one-off attack.
@export var is_persistent_summon: bool = false
## Maximum number of this specific type of summon allowed at once. (0 or -1 for no limit if appropriate)
@export var max_summons_of_type: int = 0 

# In WeaponBlueprintData.gd, under the "Base Behavior & Stats" group
@export var is_temporary_effect: bool = false # True if the instanced scene should queue_free itself after its action

@export_group("Initial Weapon-Specific Stats")
## A dictionary holding the initial, inherent stats for this weapon type.
## These are the values before any player stats or upgrades (other than its own initial ones) are applied.
## Keys should be consistent (e.g., "base_damage", "projectile_speed", "area_of_effect_radius", 
## "projectile_count", "pierce_count", "duration", "visual_scale_x", "visual_scale_y").
## Also include any initial boolean flags specific to this weapon's behavior,
## e.g., {"applies_bleed_innately": false, "innate_homing_strength": 0.5}
@export var initial_specific_stats: Dictionary = {
	"damage": 10, # Example: Base damage value for this weapon
	"projectile_speed": 300.0, # Example
	"player_damage_scale_percent": 1.0 # Example: Scales 100% with player's base numerical damage by default
}


@export_group("Upgrade Path")
## An array where you will assign/drag `WeaponUpgradeData.tres` resources.
## These are all the potential unique upgrades specifically designed for this weapon.
@export var available_upgrades: Array[WeaponUpgradeData] = []


func _init():
	# developer_note = "Defines a base weapon type, its behavior, stats, and potential upgrades."
	pass

# Helper function to get a specific upgrade data by its ID from this blueprint
func get_upgrade_by_id(p_upgrade_id: StringName) -> WeaponUpgradeData:
	for upgrade_res in available_upgrades:
		if is_instance_valid(upgrade_res) and upgrade_res.upgrade_id == p_upgrade_id:
			return upgrade_res
	return null
 
==== H:\Game Creation\testing-environ\Scripts\Enemies\basic_minion.gd ==== 
# --- enemy_slime_green.gd ---
# File Path: H:\Game Creation\testing-environ\Scripts\enemy_slime_green.gd
extends BaseEnemy

func _ready():
	# --- Static Stats for Green Slime (as per user specification) ---
	#max_health = 22
	#contact_damage = 5
	#speed = 38.0
	#experience_to_drop = 2
	#armor = 0
	# --- End Static Stats ---

	super() # Calls BaseEnemy's _ready AFTER stats are set for this specific type
	# BaseEnemy's _ready will now correctly initialize current_health and health_bar
	
	# If you have specific animations for slime different from "move" or "idle"
	# _play_animation("slime_move")
 
==== H:\Game Creation\testing-environ\Scripts\Enemies\slime_blue.gd ==== 
# enemy_bat_fast.gd
# Script for the Fast Bat enemy.
extends BaseEnemy

# Optional: If the bat has unique properties not covered by EnemyData
# @export var swoop_chance: float = 0.1 

func _ready():
	# Fallback stats (will be overridden by bat_fast_data.tres)
	# max_health = 15
	# contact_damage = 4
	# speed = 75.0 
	# experience_to_drop = 3
	# armor = 0

	super()
	
	# Bats use a "fly" animation instead of the default "move"
	#_play_animation("fly") # Assuming you have a "fly" animation in its SpriteFrames

# Override _physics_process for unique movement
# func _physics_process(delta: float):
#     if is_dead_flag: return
#     
#     # Custom bat movement logic here (e.g., erratic, swooping)
#     # For example, maybe it doesn't use separation force or has a different chase pattern.
#     # If you still want some base functionality like player tracking:
#     var direction_to_player = Vector2.ZERO
#     if is_instance_valid(player_node):
#         direction_to_player = (player_node.global_position - global_position).normalized()
#
#     # Example: Add some sideways oscillation to the movement
#     var sideways_movement = Vector2(sin(Time.get_ticks_msec() * 0.005), 0).rotated(direction_to_player.angle() + PI/2) * 0.3
#     var final_direction = (direction_to_player + sideways_movement).normalized()
#
#     var current_move_speed = speed # Apply status effects if needed as in BaseEnemy
#     velocity = final_direction * current_move_speed
#     
#     if is_instance_valid(animated_sprite):
#         if velocity.x < -0.01: animated_sprite.flip_h = true
#         elif velocity.x > 0.01: animated_sprite.flip_h = false
#     move_and_slide()


# func _on_swoop_timer_timeout(): # Example for a special ability
#     if randf() < swoop_chance:
#         # Perform swoop attack
#         pass
 
==== H:\Game Creation\testing-environ\Scripts\Enemies\slime_king.gd ==== 
# enemy_bat_fast.gd
# Script for the Slime King enemy.
extends BaseEnemy

# Optional: If the bat has unique properties not covered by EnemyData
# @export var swoop_chance: float = 0.1 

func _ready():
	# Fallback stats (will be overridden by bat_fast_data.tres)
	# max_health = 15
	# contact_damage = 4
	# speed = 75.0 
	# experience_to_drop = 3
	# armor = 0

	super()
	
	# Bats use a "fly" animation instead of the default "move"
	#_play_animation("fly") # Assuming you have a "fly" animation in its SpriteFrames

# Override _physics_process for unique movement
# func _physics_process(delta: float):
#     if is_dead_flag: return
#     
#     # Custom bat movement logic here (e.g., erratic, swooping)
#     # For example, maybe it doesn't use separation force or has a different chase pattern.
#     # If you still want some base functionality like player tracking:
#     var direction_to_player = Vector2.ZERO
#     if is_instance_valid(player_node):
#         direction_to_player = (player_node.global_position - global_position).normalized()
#
#     # Example: Add some sideways oscillation to the movement
#     var sideways_movement = Vector2(sin(Time.get_ticks_msec() * 0.005), 0).rotated(direction_to_player.angle() + PI/2) * 0.3
#     var final_direction = (direction_to_player + sideways_movement).normalized()
#
#     var current_move_speed = speed # Apply status effects if needed as in BaseEnemy
#     velocity = final_direction * current_move_speed
#     
#     if is_instance_valid(animated_sprite):
#         if velocity.x < -0.01: animated_sprite.flip_h = true
#         elif velocity.x > 0.01: animated_sprite.flip_h = false
#     move_and_slide()


# func _on_swoop_timer_timeout(): # Example for a special ability
#     if randf() < swoop_chance:
#         # Perform swoop attack
#         pass
 
==== H:\Game Creation\testing-environ\Scripts\Enemies\slime_red.gd ==== 
# enemy_bat_fast.gd
# Script for the Slime Blue enemy.
extends BaseEnemy

# Optional: If the bat has unique properties not covered by EnemyData
# @export var swoop_chance: float = 0.1 

func _ready():
	# Fallback stats (will be overridden by bat_fast_data.tres)
	# max_health = 15
	# contact_damage = 4
	# speed = 75.0 
	# experience_to_drop = 3
	# armor = 0

	super()
	
	# Bats use a "fly" animation instead of the default "move"
	#_play_animation("fly") # Assuming you have a "fly" animation in its SpriteFrames

# Override _physics_process for unique movement
# func _physics_process(delta: float):
#     if is_dead_flag: return
#     
#     # Custom bat movement logic here (e.g., erratic, swooping)
#     # For example, maybe it doesn't use separation force or has a different chase pattern.
#     # If you still want some base functionality like player tracking:
#     var direction_to_player = Vector2.ZERO
#     if is_instance_valid(player_node):
#         direction_to_player = (player_node.global_position - global_position).normalized()
#
#     # Example: Add some sideways oscillation to the movement
#     var sideways_movement = Vector2(sin(Time.get_ticks_msec() * 0.005), 0).rotated(direction_to_player.angle() + PI/2) * 0.3
#     var final_direction = (direction_to_player + sideways_movement).normalized()
#
#     var current_move_speed = speed # Apply status effects if needed as in BaseEnemy
#     velocity = final_direction * current_move_speed
#     
#     if is_instance_valid(animated_sprite):
#         if velocity.x < -0.01: animated_sprite.flip_h = true
#         elif velocity.x > 0.01: animated_sprite.flip_h = false
#     move_and_slide()


# func _on_swoop_timer_timeout(): # Example for a special ability
#     if randf() < swoop_chance:
#         # Perform swoop attack
#         pass
 
==== H:\Game Creation\testing-environ\Scripts\Enemies\slime_tall_light_blue.gd ==== 
# enemy_bat_fast.gd
# Script for the Slime Tall Light Blue enemy.
extends BaseEnemy

# Optional: If the bat has unique properties not covered by EnemyData
# @export var swoop_chance: float = 0.1 

func _ready():
	# Fallback stats (will be overridden by bat_fast_data.tres)
	# max_health = 15
	# contact_damage = 4
	# speed = 75.0 
	# experience_to_drop = 3
	# armor = 0

	super()
	
	# Bats use a "fly" animation instead of the default "move"
	#_play_animation("fly") # Assuming you have a "fly" animation in its SpriteFrames

# Override _physics_process for unique movement
# func _physics_process(delta: float):
#     if is_dead_flag: return
#     
#     # Custom bat movement logic here (e.g., erratic, swooping)
#     # For example, maybe it doesn't use separation force or has a different chase pattern.
#     # If you still want some base functionality like player tracking:
#     var direction_to_player = Vector2.ZERO
#     if is_instance_valid(player_node):
#         direction_to_player = (player_node.global_position - global_position).normalized()
#
#     # Example: Add some sideways oscillation to the movement
#     var sideways_movement = Vector2(sin(Time.get_ticks_msec() * 0.005), 0).rotated(direction_to_player.angle() + PI/2) * 0.3
#     var final_direction = (direction_to_player + sideways_movement).normalized()
#
#     var current_move_speed = speed # Apply status effects if needed as in BaseEnemy
#     velocity = final_direction * current_move_speed
#     
#     if is_instance_valid(animated_sprite):
#         if velocity.x < -0.01: animated_sprite.flip_h = true
#         elif velocity.x > 0.01: animated_sprite.flip_h = false
#     move_and_slide()


# func _on_swoop_timer_timeout(): # Example for a special ability
#     if randf() < swoop_chance:
#         # Perform swoop attack
#         pass
 
==== H:\Game Creation\testing-environ\Scripts\Singletons\TestStartSettings.gd ==== 
# TestStartSettings.gd
# This script should be set up as an Autoload singleton in your project.
# Name it (e.g., "TestStartSettings") in Project > Project Settings > Autoload.
extends Node

# Assuming PlayerCharacter is a class_name defined in player.gd
# If not, you'd use integers for class representation here and map them in TestStartMenu.gd

var chosen_basic_class: PlayerCharacter.BasicClass = PlayerCharacter.BasicClass.NONE 
var chosen_weapon_id: String = "" 
var test_settings_applied: bool = false 

func set_test_start_conditions(basic_class: PlayerCharacter.BasicClass, weapon_id: String):
	chosen_basic_class = basic_class
	chosen_weapon_id = weapon_id
	test_settings_applied = false 
	print("DEBUG (TestStartSettings): Conditions set - Chosen Class Enum: ", chosen_basic_class, " (Name: ", PlayerCharacter.BasicClass.keys()[chosen_basic_class], "), Chosen Weapon ID: '", weapon_id, "'")

func get_chosen_basic_class() -> PlayerCharacter.BasicClass:
	print("DEBUG (TestStartSettings): get_chosen_basic_class() returning: ", chosen_basic_class)
	return chosen_basic_class

func get_chosen_weapon_id() -> String:
	print("DEBUG (TestStartSettings): get_chosen_weapon_id() returning: '", chosen_weapon_id, "'")
	return chosen_weapon_id

func are_test_settings_available() -> bool:
	var available = (chosen_basic_class != PlayerCharacter.BasicClass.NONE or not chosen_weapon_id.is_empty())
	# print("DEBUG (TestStartSettings): are_test_settings_available() called. Result: ", available) # Can be spammy
	return available

func mark_settings_as_applied():
	print("DEBUG (TestStartSettings): mark_settings_as_applied() CALLED.")
	test_settings_applied = true

func were_settings_applied_this_run() -> bool:
	# print("DEBUG (TestStartSettings): were_settings_applied_this_run() called. Result: ", test_settings_applied) # Can be spammy
	return test_settings_applied

func reset_settings(): # Call this if you want to clear settings, e.g., on game over or returning to main menu
	chosen_basic_class = PlayerCharacter.BasicClass.NONE
	chosen_weapon_id = ""
	test_settings_applied = false
	print("DEBUG (TestStartSettings): Settings reset.")
 
==== H:\Game Creation\testing-environ\Scripts\StatusEffects\StatusEffectComponent.gd ==== 
# StatusEffectComponent.gd
# Updated to handle ticking damage-over-time (DoT) effects like Bleed.
class_name StatusEffectComponent
extends Node

signal status_effects_changed(owner_node: Node) 

# active_effects will now store a "tick_timer" as well
var active_effects: Dictionary = {} 
var current_stat_modifiers: Dictionary = {}


func _ready():
	if not get_parent() is Node2D and not get_parent() is Node3D:
		print_debug("StatusEffectComponent WARNING: Owner (", get_parent().name if get_parent() else "None", ") is not Node2D/3D.")

func apply_effect(
		effect_data: StatusEffectData, 
		source_node: Node = null, 
		p_weapon_stats_for_scaling: Dictionary = {}, 
		duration_override: float = -1.0, 
		potency_override: float = -1.0 
	):
	var effect_id: StringName = effect_data.id

	if not is_instance_valid(effect_data):
		print_debug("ERROR (StatusEffectComponent): apply_effect called with invalid effect_data.")
		return
	if effect_id == &"":
		print_debug("ERROR (StatusEffectComponent): StatusEffectData has an empty ID.")
		return

	var final_duration = duration_override if duration_override >= 0.0 else effect_data.duration
	
	# Check if the effect already exists
	if active_effects.has(effect_id):
		var existing_effect_entry = active_effects[effect_id]
		
		# --- Handle Refreshing Existing Effect ---
		if effect_data.refresh_duration_on_reapply:
			print_debug("StatusEffectComponent: REFRESHING existing status '", effect_id, "' on ", get_parent().name)
			
			# Update basic properties for refresh
			existing_effect_entry.source = source_node
			existing_effect_entry.weapon_stats = p_weapon_stats_for_scaling.duplicate(true)
			existing_effect_entry.potency_override = potency_override
			
			# Reset duration timer if it exists, or create if it should now have one
			if final_duration > 0:
				if is_instance_valid(existing_effect_entry.duration_timer):
					existing_effect_entry.duration_timer.wait_time = final_duration
					existing_effect_entry.duration_timer.start() # Restart to refresh duration
				else: # Effect was previously permanent or without duration, now has one
					var duration_timer_node = Timer.new()
					duration_timer_node.name = "DurationTimer_" + str(effect_id)
					duration_timer_node.wait_time = final_duration
					duration_timer_node.one_shot = true
					add_child(duration_timer_node)
					duration_timer_node.timeout.connect(Callable(self, "_on_effect_expired").bind(effect_id, duration_timer_node))
					duration_timer_node.start()
					existing_effect_entry.duration_timer = duration_timer_node
			else: # If final_duration is <= 0, but it had a timer, remove it (e.g., changed to permanent)
				if is_instance_valid(existing_effect_entry.duration_timer):
					existing_effect_entry.duration_timer.stop()
					existing_effect_entry.duration_timer.queue_free()
					existing_effect_entry.duration_timer = null

			# Restart tick timer if effect is tick-based
			if effect_data.tick_interval > 0:
				if is_instance_valid(existing_effect_entry.tick_timer):
					existing_effect_entry.tick_timer.wait_time = effect_data.tick_interval
					existing_effect_entry.tick_timer.start() # Restart to reset tick cycle
				else: # New tick timer needed for existing effect
					var tick_timer_node = Timer.new()
					tick_timer_node.name = "TickTimer_" + str(effect_id)
					tick_timer_node.wait_time = effect_data.tick_interval
					tick_timer_node.one_shot = false
					add_child(tick_timer_node)
					tick_timer_node.timeout.connect(Callable(self, "_on_status_effect_tick").bind(effect_id))
					tick_timer_node.start()
					existing_effect_entry.tick_timer = tick_timer_node
				
				if effect_data.tick_on_application: # Trigger first tick immediately
					_on_status_effect_tick(effect_id)
			else: # If it was ticking but is no longer tick-based
				if is_instance_valid(existing_effect_entry.tick_timer):
					existing_effect_entry.tick_timer.stop()
					existing_effect_entry.tick_timer.queue_free()
					existing_effect_entry.tick_timer = null

		else: # Effect exists, but refresh_duration_on_reapply is FALSE (and not stackable)
			print_debug("StatusEffectComponent: Not refreshing existing status '", effect_id, "' on ", get_parent().name, " (refresh_duration_on_reapply is false or not stackable).")
			return # Do nothing if not refreshing and not stacking

	else: # --- This is a brand new application (effect_id not in active_effects) ---
		print_debug("StatusEffectComponent: APPLYING NEW status '", effect_id, "' on ", get_parent().name)
		var new_effect_entry: Dictionary = {
			"data": effect_data,
			"duration_timer": null, 
			"tick_timer": null, # For DoT/HoT effects
			"stacks": 1, # Start with 1 stack for new application
			"source": source_node,
			"weapon_stats": p_weapon_stats_for_scaling.duplicate(true),
			"potency_override": potency_override 
		}
		
		# --- DURATION TIMER (for how long the status lasts) ---
		if final_duration > 0: 
			var duration_timer_node = Timer.new()
			duration_timer_node.name = "DurationTimer_" + str(effect_id)
			duration_timer_node.wait_time = final_duration
			duration_timer_node.one_shot = true
			add_child(duration_timer_node)
			duration_timer_node.timeout.connect(Callable(self, "_on_effect_expired").bind(effect_id, duration_timer_node))
			duration_timer_node.start()
			new_effect_entry.duration_timer = duration_timer_node
		
		# --- TICK TIMER (for damage/heal over time) ---
		if effect_data.tick_interval > 0:
			var tick_timer_node = Timer.new()
			tick_timer_node.name = "TickTimer_" + str(effect_id)
			tick_timer_node.wait_time = effect_data.tick_interval
			tick_timer_node.one_shot = false # It's a recurring tick
			add_child(tick_timer_node)
			tick_timer_node.timeout.connect(Callable(self, "_on_status_effect_tick").bind(effect_id))
			tick_timer_node.start()
			new_effect_entry.tick_timer = tick_timer_node
			if effect_data.tick_on_application:
				_on_status_effect_tick(effect_id) # Trigger the first tick immediately

		active_effects[effect_id] = new_effect_entry
	
	_recalculate_and_apply_stat_modifiers()
	emit_signal("status_effects_changed", get_parent())


func _on_status_effect_tick(effect_id: StringName):
	if not active_effects.has(effect_id): return
	
	var owner = get_parent()
	if not is_instance_valid(owner) or not owner.has_method("take_damage"): return # Added has_method("take_damage") check

	var effect_entry = active_effects[effect_id]
	var status_data = effect_entry.data as StatusEffectData
	
	for effect in status_data.effects_while_active:
		if effect is StatModificationEffectData:
			var stat_mod = effect as StatModificationEffectData
			
			# If this is a damage modification (e.g., for DoT)
			if stat_mod.stat_key == &"health" and stat_mod.modification_type == &"flat_add": # Check for "health" stat and "flat_add" mod type
				var damage_per_tick = stat_mod.get_value() # Should be a negative number for damage
				
				# Apply potency override if active
				var actual_potency = effect_entry.get("potency_override", 1.0)
				if actual_potency >= 0.0: # Only apply if a valid override is present
					damage_per_tick *= actual_potency
				
				# Damage is always negative for damage over time, convert to positive for take_damage
				var final_tick_damage = abs(damage_per_tick) 
				
				# Ensure at least 1 damage for fractional values > 0
				final_tick_damage = max(1, int(ceil(final_tick_damage))) 

				print_debug(owner.name, " is taking ", final_tick_damage, " damage from '", effect_id, "' tick (raw value: ", damage_per_tick, ").")
				owner.take_damage(final_tick_damage, effect_entry.source)
			# Add logic for other stat mods if needed for ticks (e.g., resource drain per tick)
			
		# Other effect types (CustomFlagEffectData, TriggerAbilityEffectData) are typically applied once
		# or managed by _recalculate_and_apply_stat_modifiers, not necessarily on each tick.
		# However, if you have any effects that *should* trigger on each tick, add their logic here.


func _on_effect_expired(effect_id_expired: StringName, duration_timer_ref: Timer): 
	if active_effects.has(effect_id_expired):
		var effect_entry = active_effects[effect_id_expired]
		# Stop any associated tick timer
		var tick_timer = effect_entry.get("tick_timer") as Timer
		if is_instance_valid(tick_timer):
			tick_timer.stop()
			tick_timer.queue_free()

		active_effects.erase(effect_id_expired)
		_recalculate_and_apply_stat_modifiers()
		emit_signal("status_effects_changed", get_parent()) 
	
	if is_instance_valid(duration_timer_ref):
		duration_timer_ref.queue_free()


func remove_effect(effect_id_to_remove: StringName):
	if active_effects.has(effect_id_to_remove):
		var effect_entry = active_effects[effect_id_to_remove]
		var duration_timer = effect_entry.get("duration_timer") as Timer
		if is_instance_valid(duration_timer):
			duration_timer.stop(); duration_timer.queue_free()
		var tick_timer = effect_entry.get("tick_timer") as Timer
		if is_instance_valid(tick_timer):
			tick_timer.stop(); tick_timer.queue_free()
			
		active_effects.erase(effect_id_to_remove)
		_recalculate_and_apply_stat_modifiers()
		emit_signal("status_effects_changed", get_parent())


func _recalculate_and_apply_stat_modifiers():
	current_stat_modifiers.clear() 
	var owner = get_parent()
	if not is_instance_valid(owner): return

	for effect_id in active_effects:
		var effect_entry = active_effects[effect_id]
		var status_effect_data_res: StatusEffectData = effect_entry.data
		
		if is_instance_valid(status_effect_data_res) and not status_effect_data_res.effects_while_active.is_empty():
			for actual_effect_data_res in status_effect_data_res.effects_while_active:
				if actual_effect_data_res is StatModificationEffectData:
					var stat_mod_effect = actual_effect_data_res as StatModificationEffectData
					var mod_value = stat_mod_effect.get_value() 
					var actual_potency_override = effect_entry.get("potency_override", -1.0) 
					if actual_potency_override >= 0.0: 
						mod_value *= actual_potency_override 
					mod_value *= effect_entry.stacks
					var key_to_mod = stat_mod_effect.stat_key
					var mod_type = stat_mod_effect.modification_type

					# Apply stat modifications unless it's a "health" stat mod that's meant for ticking damage/healing
					# The "health" stat with "flat_add" is now handled in _on_status_effect_tick explicitly.
					if not (key_to_mod == &"health" and mod_type == &"flat_add"):
						if mod_type == &"percent_add_to_base": 
							current_stat_modifiers[key_to_mod] = current_stat_modifiers.get(key_to_mod, 0.0) + mod_value
						elif mod_type == &"percent_mult_final": 
							current_stat_modifiers[key_to_mod] = current_stat_modifiers.get(key_to_mod, 1.0) * (1.0 + mod_value) 
						elif mod_type == &"flat_add":
							current_stat_modifiers[key_to_mod] = current_stat_modifiers.get(key_to_mod, 0.0) + mod_value
						elif mod_type == &"override_value":
							current_stat_modifiers[key_to_mod] = mod_value
				
				elif actual_effect_data_res is CustomFlagEffectData:
					var flag_effect = actual_effect_data_res as CustomFlagEffectData
					if owner.has_method("set_behavior_flag"):
						owner.set_behavior_flag(flag_effect.flag_key, flag_effect.flag_value)
					else:
						owner.set(str(flag_effect.flag_key), flag_effect.flag_value) 
				
				elif actual_effect_data_res is TriggerAbilityEffectData:
					pass 
	
	emit_signal("status_effects_changed", owner) 


func get_sum_of_additive_modifiers(stat_key: StringName) -> float:
	return current_stat_modifiers.get(stat_key, 0.0) if current_stat_modifiers.get(stat_key) is float else 0.0
func get_product_of_multiplicative_modifiers(stat_key: StringName) -> float:
	return current_stat_modifiers.get(stat_key, 1.0) if current_stat_modifiers.get(stat_key) is float else 1.0
func get_flat_sum_modifier(stat_key: StringName) -> float: 
	return current_stat_modifiers.get(stat_key, 0.0) if current_stat_modifiers.get(stat_key) is float else 0.0
func has_status_effect(effect_id: StringName) -> bool:
	return active_effects.has(effect_id)
func get_effect_stacks(effect_id: StringName) -> int:
	if active_effects.has(effect_id): return active_effects[effect_id].stacks
	return 0
func get_effect_data_resource(effect_id: StringName) -> StatusEffectData:
	if active_effects.has(effect_id): return active_effects[effect_id].data
	return null
func has_flag(flag_key_to_check: StringName) -> bool:
	for effect_id in active_effects:
		var effect_entry = active_effects[effect_id]
		var status_effect_data_res: StatusEffectData = effect_entry.data
		if is_instance_valid(status_effect_data_res):
			for actual_effect in status_effect_data_res.effects_while_active:
				if actual_effect is CustomFlagEffectData:
					var flag_effect = actual_effect as CustomFlagEffectData
					if flag_effect.flag_key == flag_key_to_check and flag_effect.flag_value == true:
						return true
	return false
 
==== H:\Game Creation\testing-environ\Scripts\StatusEffects\StatusEffectData.gd ==== 
# StatusEffectData.gd
# Resource to define properties of a status effect.
class_name StatusEffectsData
extends Resource

enum EffectType {
	DAMAGE_OVER_TIME,     # e.g., Bleed, Poison, Burn (classic DoT)
	TIMED_STAT_MODIFIER,  # e.g., Vulnerable, Weaken, Haste, Empower (temp stat changes)
	CONTROL_IMPAIRING,    # e.g., Stun, Root, Slow, Fear
	HEAL_OVER_TIME,       # e.g., Regeneration buff
	ONE_SHOT_DAMAGE,      # e.g., Burn's final explosion
	ONE_SHOT_HEAL,        # e.g., Instant heal proc
	PASSIVE_STAT_MODIFIER,# e.g., Enemy Elite/Champion traits (permanent while active)
	SPECIAL_LOGIC         # For unique effects like Phaser, Summoner, Death's Blessing, Rampage
}

@export var effect_id: StringName = &"" # Unique ID, e.g., "bleed_standard", "vulnerable_enemy"
@export var effect_name: String = "Status Effect" # Display name, e.g., "Bleeding", "Vulnerable"
@export_multiline var description: String = "Effect description."
@export var icon: Texture2D = null

@export var effect_type: EffectType = EffectType.TIMED_STAT_MODIFIER
@export var is_buff: bool = false # True for positive effects, false for debuffs/DoTs

@export_group("Duration & Ticking")
@export var base_duration: float = 5.0 # Seconds; 0 for instant, -1 for permanent until removed by logic
@export var tick_interval: float = 1.0 # Seconds; 0 if no ticking (e.g., for stat mods that apply once)
								   # For your Bleed (20 ticks over 2s), this would be 0.1

@export_group("Stacking & Application")
# true = refresh duration; false = new instance (if different source or effect allows stacking from same source)
# For your design: all effects refresh duration from the same source ID.
# Different sources applying the same effect_id will also refresh (unless we add source tracking)
@export var refresh_on_reapply: bool = true 
# @export var max_stacks: int = 1 # If we were to implement intensity stacking later

@export_group("Damage Over Time (DoT) / Heal Over Time (HoT)")
# For Bleed: total_damage_percent_of_source_hit = 1.0 (100%)
# The component will divide this by (base_duration / tick_interval) to get damage per tick.
@export var total_damage_or_heal_percent_of_source_hit: float = 0.0 # e.g., 1.0 for 100% of source hit over duration
@export var flat_damage_or_heal_per_tick: float = 0.0 # If not based on source hit
@export var dot_damage_type: StringName = &"physical_dot" # For resistances/synergies

@export_group("Stat Modification (Timed or Passive)")
# Example: {"movement_speed_multiplier_add": -0.2} for a 20% slow
# Example: {"damage_taken_multiplier_add": 0.2} for Vulnerable (target takes 20% more)
# These keys should match stat calculation logic in PlayerStats or BaseEnemy's take_damage
@export var stat_modifiers: Dictionary = {} # { "stat_name_to_mod": value, "mod_type": "flat_add"/"percent_add"/"percent_mult" }
										   # Or simpler: { "stat_name_to_mod_flat": value, "stat_name_to_mod_percent_add": value }

@export_group("Control Effects")
@export var control_effect_type: StringName = &"" # e.g., "stun", "root", "fear"

@export_group("Special Logic (for effect_type == SPECIAL_LOGIC)")
@export var special_logic_params: Dictionary = {} # For effects like Phaser, Summoner, Death's Blessing

@export_group("Visuals & Audio (Paths)")
@export var sfx_on_apply: AudioStream = null
@export var sfx_on_tick: AudioStream = null
@export var sfx_on_expire: AudioStream = null
@export var vfx_on_target_scene: PackedScene = null # Particle effect to loop on target
 
==== H:\Game Creation\testing-environ\Scripts\UI\DebugPanel.gd ==== 
# DebugPanel.gd
# Corrected all signal connections to use Callable.
# Helper functions moved to class level.
# Corrected player_stats and weapon_manager references.
# Updated _update_weapon_list_display for WeaponBlueprintData and corrected enum check.
# Refined reference gathering and initialization logic.
# Corrected check in _on_apply_upgrade_button_pressed.
extends CanvasLayer

# --- Node References from Scene Tree ---
@onready var main_panel: Panel = $MainPanel
@onready var tab_container: TabContainer = $MainPanel/TabContainer

# --- References to Game World Nodes (Assigned via deferred function) ---
var player_node: PlayerCharacter
var weapon_manager_node 
var game_node: Node2D 
var game_ui_node: Control 
var player_stats_node: Node 

const DEBUG_TOGGLE_ACTION = "debug_panel_toggle" 

# --- UI Node References for dynamically created elements ---
# Info Tab
var dds_label: Label; var elapsed_time_label: Label; var hardcore_status_label: Label
var spawn_interval_label: Label; var target_enemy_count_label: Label
var active_enemy_count_label: Label; var threat_pool_label: Label
var active_pool_label: Label; var player_level_label: Label
var set_dds_line_edit: LineEdit; var set_dds_button: Button
var add_50_dds_button: Button; var sub_50_dds_button: Button
var add_200_dds_button: Button; var sub_200_dds_button: Button

# Weapons Tab
var weapons_tab_content_container: VBoxContainer 
var available_weapons_list: ItemList; var add_weapon_button: Button
var player_active_weapons_list: ItemList; var available_upgrades_list: ItemList  
var apply_upgrade_button: Button       

# Player Stats Tab
var player_stats_tab_content: VBoxContainer
var ps_max_health_edit: LineEdit; var ps_health_regen_edit: LineEdit
var ps_numerical_damage_edit: LineEdit; var ps_global_flat_damage_edit: LineEdit 
var ps_attack_speed_mult_edit: LineEdit; var ps_armor_edit: LineEdit
var ps_move_speed_edit: LineEdit; var ps_luck_edit: LineEdit 
var apply_player_stats_button: Button; var reset_player_stats_button: Button

# Enemy Spawner Tab UI Elements
var enemy_spawner_tab_content: VBoxContainer
var enemy_type_option_button: OptionButton
var elite_type_option_button: OptionButton
var enemy_spawn_count_spinbox: SpinBox
var spawn_enemy_button: Button
var spawn_near_player_checkbox: CheckBox

# Game Tuning Tab UI Elements
var game_tuning_tab_content: VBoxContainer
var gt_base_dds_tick_edit: LineEdit
var gt_dds_lvl_bonus_edit: LineEdit
var gt_dds_rapid_lvl_bonus_edit: LineEdit
var gt_rapid_lvl_thresh_edit: LineEdit
var gt_hc_dds_extra_sec_edit: LineEdit
var gt_hc_lvl_mult_edit: LineEdit
var gt_dds_spawn_factor_edit: LineEdit
var gt_hc_spawn_mult_edit: LineEdit
var gt_base_spawn_int_edit: LineEdit
var gt_min_spawn_int_edit: LineEdit
var gt_enemies_batch_edit: LineEdit
var gt_active_pool_refresh_edit: LineEdit
var gt_max_active_types_edit: LineEdit
var gt_enemy_count_update_dds_edit: LineEdit
var gt_threat_threshold_edit: LineEdit
var gt_threat_batch_mult_edit: LineEdit
var gt_culling_time_edit: LineEdit
var gt_event_interval_edit: LineEdit
var gt_fwd_spawn_bias_edit: LineEdit
var gt_spawn_margin_edit: LineEdit
var gt_override_target_enemies_check: CheckBox
var gt_target_enemies_override_val_edit: LineEdit
var apply_game_tuning_button: Button
var reset_game_tuning_button: Button

var is_initialized_and_ready: bool = false 
var ui_update_timer: Timer
const UI_UPDATE_INTERVAL: float = 0.25

# --- Helper function for Player Stats Tab ---
func _add_stat_editor_to_grid(p_grid: GridContainer, label_text: String, placeholder: String, stat_key: String, p_stats_node_ref: Node) -> LineEdit:
	p_grid.add_child(Label.new()) 
	var lbl = Label.new(); lbl.text = label_text; p_grid.add_child(lbl)
	var line_edit = LineEdit.new(); line_edit.name = "PSEdit" + stat_key.capitalize()
	line_edit.placeholder_text = placeholder
	if is_instance_valid(p_stats_node_ref):
		if p_stats_node_ref.has_method("get_base_" + stat_key + "_for_debug"):
			line_edit.text = str(p_stats_node_ref.call("get_base_" + stat_key + "_for_debug"))
		elif stat_key == "global_flat_damage_add" and p_stats_node_ref.has_method("get_current_global_flat_damage_add"):
			line_edit.text = str(p_stats_node_ref.get_current_global_flat_damage_add())
		else: line_edit.text = "N/A (mthd?)"
	else: line_edit.text = "N/A (no stats)"
	p_grid.add_child(line_edit); return line_edit

# --- Helper function for Player Stats Tab ---
func _update_line_edit_from_stat(le: LineEdit, method_name_base: String, p_stats_node_ref: Node, default_val_str: String = "N/A"):
	if is_instance_valid(le) and is_instance_valid(p_stats_node_ref):
		if p_stats_node_ref.has_method("get_base_" + method_name_base + "_for_debug"):
			le.text = str(p_stats_node_ref.call("get_base_" + method_name_base + "_for_debug"))
		elif method_name_base == "global_flat_damage_add" and p_stats_node_ref.has_method("get_current_global_flat_damage_add"):
			le.text = str(p_stats_node_ref.get_current_global_flat_damage_add())
		else: le.text = default_val_str + " (mthd?)"
	elif is_instance_valid(le): le.text = default_val_str + " (no stats)"

# --- Helper function for getting values from LineEdits (used by Player Stats & Game Tuning) ---
func _get_float_from_line_edit(le: LineEdit, p_target_node: Node, current_val_func_name_or_prop: String, is_property: bool = false) -> float:
	if is_instance_valid(le) and le.text.is_valid_float(): return float(le.text)
	elif is_instance_valid(p_target_node):
		if is_property and current_val_func_name_or_prop in p_target_node: return p_target_node.get(current_val_func_name_or_prop)
		elif not is_property and p_target_node.has_method(current_val_func_name_or_prop): return p_target_node.call(current_val_func_name_or_prop)
	return 0.0 
func _get_int_from_line_edit(le: LineEdit, p_target_node: Node, current_val_func_name_or_prop: String, is_property: bool = false) -> int:
	if is_instance_valid(le) and le.text.is_valid_int(): return int(le.text)
	elif is_instance_valid(p_target_node):
		if is_property and current_val_func_name_or_prop in p_target_node: return p_target_node.get(current_val_func_name_or_prop)
		elif not is_property and p_target_node.has_method(current_val_func_name_or_prop): return p_target_node.call(current_val_func_name_or_prop)
	return 0 

# --- Helper function for Game Tuning Tab ---
func _add_tuning_editor(p_grid: GridContainer, label_text: String, placeholder: String, param_key: String, target_node_ref: Node) -> LineEdit:
	p_grid.add_child(Label.new()) 
	var lbl = Label.new(); lbl.text = label_text; p_grid.add_child(lbl)
	var line_edit = LineEdit.new(); line_edit.name = "GTE" + param_key.capitalize() 
	line_edit.placeholder_text = placeholder
	if is_instance_valid(target_node_ref) and param_key in target_node_ref: 
		line_edit.text = str(target_node_ref.get(param_key))
	else: line_edit.text = "N/A"
	p_grid.add_child(line_edit)
	return line_edit

# --- Helper function for Game Tuning Tab ---
func _update_tuning_line_edit_from_property(le: LineEdit, target_node_ref: Node, param_name: String, default_val_str: String = "N/A"):
	if is_instance_valid(le) and is_instance_valid(target_node_ref) and param_name in target_node_ref:
		le.text = str(target_node_ref.get(param_name))
	elif is_instance_valid(le): le.text = default_val_str 

func _ready():
	process_mode = Node.PROCESS_MODE_ALWAYS 
	if not is_instance_valid(main_panel): print_debug("DebugPanel ERROR: MainPanel node not found!"); return
	main_panel.hide() 
	if not is_instance_valid(tab_container): 
		print_debug("DebugPanel ERROR: TabContainer node missing! Attempting to create.")
		if is_instance_valid(main_panel):
			tab_container = TabContainer.new(); tab_container.name = "TabContainer"
			main_panel.add_child(tab_container); tab_container.set_anchors_preset(Control.PRESET_FULL_RECT)
		else: return 
	_setup_all_tabs() 
	ui_update_timer = Timer.new(); ui_update_timer.name = "DebugUIRefreshTimer"
	ui_update_timer.wait_time = UI_UPDATE_INTERVAL; ui_update_timer.one_shot = false
	ui_update_timer.timeout.connect(Callable(self, "_update_new_game_state_labels")) 
	add_child(ui_update_timer); ui_update_timer.start()
	call_deferred("_attempt_initial_reference_gathering_and_update") 
	_update_new_game_state_labels()

func _attempt_initial_reference_gathering_and_update():
	await get_tree().process_frame 
	await get_tree().process_frame 
	
	_get_all_game_world_references() 

	if _are_references_valid(): 
		is_initialized_and_ready = true
		print_debug("DebugPanel: All essential game references for weapon system successfully obtained.")
	else:
		is_initialized_and_ready = false 
		print_debug("DebugPanel: Initial references for weapon/upgrade system are NOT valid after defer. Weapon/Upgrade/Enemy Spawner/Game Tuning tabs may not function correctly.")
	
	_full_panel_content_update() 


func _get_all_game_world_references():
	print_debug("DebugPanel: _get_all_game_world_references called.")
	var tree_root = get_tree().root
	var game_node_path = "Game" 
	
	game_node = tree_root.get_node_or_null(game_node_path) as Node2D
	if not is_instance_valid(game_node): 
		print_debug("  DebugPanel ERROR: game_node not found at /root/", game_node_path, ". Ensure your main game scene is named 'Game' and is a direct child of /root.")
	elif not (game_node.has_method("get_all_weapon_blueprints_for_debug") and \
			  game_node.has_method("get_weapon_next_level_upgrades") and \
			  game_node.has_method("get_loaded_enemy_definitions_for_debug") and \
			  game_node.has_method("get_enemy_data_by_id_for_debug")):
		print_debug("  DebugPanel ERROR: game_node at '", game_node_path, "' is missing one or more required methods for debug panel.")
		game_node = null 
	
	if is_instance_valid(game_node): 
		game_ui_node = game_node.get_node_or_null("GameUI") as Control 
		if not is_instance_valid(game_ui_node): 
			print_debug("  DebugPanel ERROR: game_ui_node not found as child 'GameUI' of '", game_node_path, "'.")
	else: 
		var game_ui_node_abs_path = game_node_path + "/GameUI" 
		game_ui_node = tree_root.get_node_or_null(game_ui_node_abs_path) as Control 
		if not is_instance_valid(game_ui_node):
			print_debug("  DebugPanel ERROR: game_ui_node not found at absolute path /root/", game_ui_node_abs_path, " (game_node was also invalid).")

	var players = get_tree().get_nodes_in_group("player_char_group")
	if players.size() > 0:
		player_node = players[0] as PlayerCharacter
		if is_instance_valid(player_node):
			print_debug("  DebugPanel: Player node found: ", player_node.name)
			if is_instance_valid(player_node.weapon_manager):
				weapon_manager_node = player_node.weapon_manager
				print_debug("    DebugPanel: WeaponManager found on player.")
			else:
				print_debug("  DebugPanel WARNING: player_node.weapon_manager is not valid.")
				weapon_manager_node = null
			
			if is_instance_valid(player_node.player_stats):
				player_stats_node = player_node.player_stats
				print_debug("    DebugPanel: PlayerStats (player_stats_node) found on player.")
			else:
				print_debug("  DebugPanel WARNING: player_node.player_stats is not valid.")
				player_stats_node = null
		else:
			print_debug("  DebugPanel WARNING: Node from 'player_char_group' is not a PlayerCharacter instance.")
			player_node = null; weapon_manager_node = null; player_stats_node = null
	else:
		print_debug("  DebugPanel WARNING: Player node not found in group 'player_char_group'.")
		player_node = null; weapon_manager_node = null; player_stats_node = null
	print_debug("DebugPanel: _get_all_game_world_references finished.")

func _full_panel_content_update(): 
	if not main_panel.visible: return

	_update_new_game_state_labels()
	
	if is_instance_valid(player_stats_node): 
		_update_player_stats_display_fields()
	
	if is_instance_valid(game_ui_node) and is_instance_valid(game_node):
		_update_game_tuning_display_fields()
	
	if is_initialized_and_ready: 
		_update_weapon_list_display() 
		_update_player_active_weapons_display() 
		_update_available_upgrades_display()
		_populate_enemy_spawn_list()
		if is_instance_valid(enemy_type_option_button) and enemy_type_option_button.item_count > 0:
			var current_selected_enemy_idx = enemy_type_option_button.selected
			if current_selected_enemy_idx < 0 or current_selected_enemy_idx >= enemy_type_option_button.item_count:
				current_selected_enemy_idx = 0 
			if enemy_type_option_button.item_count > 0: 
				_on_debug_enemy_type_selected(current_selected_enemy_idx)


func _update_new_game_state_labels(): 
	if not main_panel.visible: return
	if is_instance_valid(game_ui_node):
		if is_instance_valid(dds_label) and game_ui_node.has_method("get_dynamic_difficulty_score"): dds_label.text = "DDS: %.1f" % game_ui_node.get_dynamic_difficulty_score()
		if is_instance_valid(elapsed_time_label) and game_ui_node.has_method("get_elapsed_seconds") and game_ui_node.has_method("format_time"): elapsed_time_label.text = "Time: " + game_ui_node.format_time(game_ui_node.get_elapsed_seconds())
		if is_instance_valid(hardcore_status_label) and game_ui_node.has_method("is_in_hardcore_phase"): hardcore_status_label.text = "Hardcore: " + ("Yes" if game_ui_node.is_in_hardcore_phase() else "No")
	else: 
		if is_instance_valid(dds_label): dds_label.text = "DDS: (No GameUI)"
		if is_instance_valid(elapsed_time_label): elapsed_time_label.text = "Time: (No GameUI)"
		if is_instance_valid(hardcore_status_label): hardcore_status_label.text = "Hardcore: (No GameUI)"
	if is_instance_valid(game_node): 
		if is_instance_valid(spawn_interval_label) and "current_spawn_interval" in game_node: spawn_interval_label.text = "Spawn Int: %.2fs" % game_node.current_spawn_interval
		if is_instance_valid(target_enemy_count_label) and "target_on_screen_enemies" in game_node: target_enemy_count_label.text = "Target N: %d" % game_node.target_on_screen_enemies
		if is_instance_valid(active_enemy_count_label) and "current_active_enemy_count" in game_node: active_enemy_count_label.text = "Active N: %d" % game_node.current_active_enemy_count
		if is_instance_valid(threat_pool_label) and "global_unspent_threat_pool" in game_node: threat_pool_label.text = "Threat Pool: %d" % game_node.global_unspent_threat_pool
		if is_instance_valid(active_pool_label) and "current_active_enemy_pool" in game_node:
			var pool_ids: Array[StringName] = [];
			if game_node.current_active_enemy_pool is Array:
				for edi in game_node.current_active_enemy_pool: 
					if is_instance_valid(edi) and "id" in edi: pool_ids.append(edi.id)
			active_pool_label.text = "Active Pool (%d): " % pool_ids.size() + str(pool_ids)
	else: 
		if is_instance_valid(spawn_interval_label): spawn_interval_label.text = "Spawn Int: (No Game)"
		if is_instance_valid(target_enemy_count_label): target_enemy_count_label.text = "Target N: (No Game)"
		if is_instance_valid(active_enemy_count_label): active_enemy_count_label.text = "Active N: (No Game)"
		if is_instance_valid(threat_pool_label): threat_pool_label.text = "Threat Pool: (No Game)"
		if is_instance_valid(active_pool_label): active_pool_label.text = "Active Pool: (No Game)"
	if is_instance_valid(player_node) and "current_level" in player_node:
		if is_instance_valid(player_level_label): player_level_label.text = "Player Lvl: %d" % player_node.current_level
	elif is_instance_valid(player_level_label): player_level_label.text = "Player Lvl: (No Player)"

func _unhandled_input(event: InputEvent):
	if event.is_action_pressed(DEBUG_TOGGLE_ACTION):
		if not main_panel: return 
		main_panel.visible = not main_panel.visible
		if main_panel.visible:
			Input.set_mouse_mode(Input.MOUSE_MODE_VISIBLE); get_tree().paused = true 
			call_deferred("_initialize_panel_on_open_fully") 
		else:
			get_tree().paused = false; Input.set_mouse_mode(Input.MOUSE_MODE_VISIBLE) 
		get_viewport().set_input_as_handled() 

func _initialize_panel_on_open_fully(): 
	if not _are_all_world_nodes_valid(): 
		_get_all_game_world_references() 
	
	if _are_references_valid(): 
		is_initialized_and_ready = true 
	else: 
		is_initialized_and_ready = false

	if is_instance_valid(tab_container) and tab_container.get_tab_count() == 0 : 
		_setup_all_tabs() 
	
	_full_panel_content_update()


func _are_all_world_nodes_valid() -> bool: 
	return is_instance_valid(player_node) and \
		   is_instance_valid(player_stats_node) and \
		   is_instance_valid(weapon_manager_node) and \
		   is_instance_valid(game_node) and \
		   is_instance_valid(game_ui_node)

func _are_references_valid() -> bool: 
	var player_ok = is_instance_valid(player_node) and is_instance_valid(player_stats_node)
	var wm_ok = is_instance_valid(weapon_manager_node)
	var wm_method_ok = wm_ok and weapon_manager_node.has_method("add_weapon")
	var gn_ok = is_instance_valid(game_node)
	var gn_method1_ok = gn_ok and game_node.has_method("get_all_weapon_blueprints_for_debug")
	var gn_method2_ok = gn_ok and game_node.has_method("get_weapon_next_level_upgrades")
	var gn_method3_ok = gn_ok and game_node.has_method("get_loaded_enemy_definitions_for_debug")
	var gn_method4_ok = gn_ok and game_node.has_method("get_enemy_data_by_id_for_debug")
	
	var all_good = player_ok and wm_ok and wm_method_ok and gn_ok and gn_method1_ok and gn_method2_ok and gn_method3_ok and gn_method4_ok
	
	if not all_good and is_instance_valid(main_panel) and main_panel.visible: 
		print_debug("DebugPanel _are_references_valid (for weapon/enemy systems): FAILED. Details:")
		print_debug("  - Player Valid (and has player_stats): ", player_ok)
		print_debug("  - WeaponManager Valid: ", wm_ok, " (Has add_weapon: ", wm_method_ok, ")")
		print_debug("  - GameNode Valid: ", gn_ok)
		if gn_ok: 
			print_debug("    - GameNode Has get_all_weapon_blueprints_for_debug: ", gn_method1_ok)
			print_debug("    - GameNode Has get_weapon_next_level_upgrades: ", gn_method2_ok)
			print_debug("    - GameNode Has get_loaded_enemy_definitions_for_debug: ", gn_method3_ok)
			print_debug("    - GameNode Has get_enemy_data_by_id_for_debug: ", gn_method4_ok)
	return all_good

func _setup_all_tabs():
	if not is_instance_valid(tab_container): print_debug("DebugPanel ERROR: TabContainer is null."); return
	for i in range(tab_container.get_tab_count() - 1, -1, -1): 
		var child = tab_container.get_tab_control(i)
		if is_instance_valid(child): tab_container.remove_child(child); child.queue_free()
	_setup_info_tab() 
	_setup_player_stats_tab() 
	_setup_enemy_spawner_tab() 
	_setup_game_tuning_tab() 
	_setup_weapons_tab()      

func _setup_info_tab(): 
	var info_tab_content = VBoxContainer.new(); info_tab_content.name = "GameInfoVBox" 
	var grid = GridContainer.new(); grid.columns = 2; info_tab_content.add_child(grid)
	var lbl_title = Label.new(); lbl_title.text = "DDS:"; grid.add_child(lbl_title)
	dds_label = Label.new(); dds_label.name = "DDSLabel"; grid.add_child(dds_label)
	lbl_title = Label.new(); lbl_title.text = "Time:"; grid.add_child(lbl_title)
	elapsed_time_label = Label.new(); elapsed_time_label.name = "ElapsedTimeLabel"; grid.add_child(elapsed_time_label)
	lbl_title = Label.new(); lbl_title.text = "Hardcore:"; grid.add_child(lbl_title)
	hardcore_status_label = Label.new(); hardcore_status_label.name = "HardcoreStatusLabel"; grid.add_child(hardcore_status_label)
	lbl_title = Label.new(); lbl_title.text = "Spawn Int:"; grid.add_child(lbl_title)
	spawn_interval_label = Label.new(); spawn_interval_label.name = "SpawnIntervalLabel"; grid.add_child(spawn_interval_label)
	lbl_title = Label.new(); lbl_title.text = "Target N:"; grid.add_child(lbl_title)
	target_enemy_count_label = Label.new(); target_enemy_count_label.name = "TargetEnemyCountLabel"; grid.add_child(target_enemy_count_label)
	lbl_title = Label.new(); lbl_title.text = "Active N:"; grid.add_child(lbl_title)
	active_enemy_count_label = Label.new(); active_enemy_count_label.name = "ActiveEnemyCountLabel"; grid.add_child(active_enemy_count_label)
	lbl_title = Label.new(); lbl_title.text = "Threat Pool:"; grid.add_child(lbl_title)
	threat_pool_label = Label.new(); threat_pool_label.name = "ThreatPoolLabel"; grid.add_child(threat_pool_label)
	lbl_title = Label.new(); lbl_title.text = "Player Lvl:"; grid.add_child(lbl_title)
	player_level_label = Label.new(); player_level_label.name = "PlayerLevelLabel"; grid.add_child(player_level_label)
	var active_pool_hbox = HBoxContainer.new(); info_tab_content.add_child(active_pool_hbox) 
	lbl_title = Label.new(); lbl_title.text = "Active Pool:"; active_pool_hbox.add_child(lbl_title)
	active_pool_label = Label.new(); active_pool_label.name = "ActivePoolLabel"; active_pool_hbox.add_child(active_pool_label)
	active_pool_label.size_flags_horizontal = Control.SIZE_EXPAND_FILL 
	info_tab_content.add_child(HSeparator.new())
	var dds_control_hbox = HBoxContainer.new(); info_tab_content.add_child(dds_control_hbox)
	dds_control_hbox.add_child(Label.new()) 
	var set_dds_lbl = Label.new(); set_dds_lbl.text = "Set DDS:"; dds_control_hbox.add_child(set_dds_lbl)
	set_dds_line_edit = LineEdit.new(); set_dds_line_edit.name = "SetDDSLineEdit"; set_dds_line_edit.placeholder_text = "DDS Value"
	set_dds_line_edit.custom_minimum_size = Vector2(80, 0); dds_control_hbox.add_child(set_dds_line_edit)
	set_dds_button = Button.new(); set_dds_button.text = "Set"; dds_control_hbox.add_child(set_dds_button)
	set_dds_button.pressed.connect(Callable(self, "_on_set_dds_button_pressed"))
	var dds_adjust_hbox = HBoxContainer.new(); info_tab_content.add_child(dds_adjust_hbox)
	dds_adjust_hbox.alignment = BoxContainer.ALIGNMENT_CENTER
	add_50_dds_button = Button.new(); add_50_dds_button.text = "+50 DDS"; dds_adjust_hbox.add_child(add_50_dds_button)
	add_50_dds_button.pressed.connect(Callable(self, "_on_adjust_dds_button_pressed").bind(50.0))
	sub_50_dds_button = Button.new(); sub_50_dds_button.text = "-50 DDS"; dds_adjust_hbox.add_child(sub_50_dds_button)
	sub_50_dds_button.pressed.connect(Callable(self, "_on_adjust_dds_button_pressed").bind(-50.0))
	add_200_dds_button = Button.new(); add_200_dds_button.text = "+200 DDS"; dds_adjust_hbox.add_child(add_200_dds_button)
	add_200_dds_button.pressed.connect(Callable(self, "_on_adjust_dds_button_pressed").bind(200.0))
	sub_200_dds_button = Button.new(); sub_200_dds_button.text = "-200 DDS"; dds_adjust_hbox.add_child(sub_200_dds_button)
	sub_200_dds_button.pressed.connect(Callable(self, "_on_adjust_dds_button_pressed").bind(-200.0))
	if is_instance_valid(tab_container):
		tab_container.add_child(info_tab_content); tab_container.set_tab_title(tab_container.get_tab_count() - 1, "Game Info")

func _on_set_dds_button_pressed():
	if not is_instance_valid(game_ui_node) or not game_ui_node.has_method("set_dds_value"): return
	if is_instance_valid(set_dds_line_edit):
		var text_val = set_dds_line_edit.text
		if text_val.is_valid_float(): game_ui_node.set_dds_value(float(text_val)); set_dds_line_edit.text = ""
		else: print_debug("DebugPanel: Invalid DDS value entered: ", text_val)

func _on_adjust_dds_button_pressed(amount: float):
	if not is_instance_valid(game_ui_node) or not game_ui_node.has_method("adjust_dds_value"): return
	game_ui_node.adjust_dds_value(amount)

func _setup_player_stats_tab(): 
	player_stats_tab_content = VBoxContainer.new(); player_stats_tab_content.name = "PlayerStatsTabContent"
	var grid = GridContainer.new(); grid.columns = 2; player_stats_tab_content.add_child(grid)
	ps_max_health_edit = _add_stat_editor_to_grid(grid, "Base Max Health:", "e.g., 100", "max_health", player_stats_node)
	ps_health_regen_edit = _add_stat_editor_to_grid(grid, "Base Health Regen:", "e.g., 0.5", "health_regeneration", player_stats_node)
	ps_numerical_damage_edit = _add_stat_editor_to_grid(grid, "Base Numerical Dmg:", "e.g., 10", "numerical_damage", player_stats_node)
	ps_global_flat_damage_edit = _add_stat_editor_to_grid(grid, "Global Flat Dmg Add:", "e.g., 5", "global_flat_damage_add", player_stats_node)
	ps_attack_speed_mult_edit = _add_stat_editor_to_grid(grid, "Base Atk Speed Mult:", "e.g., 1.0", "attack_speed_multiplier", player_stats_node)
	ps_armor_edit = _add_stat_editor_to_grid(grid, "Base Armor:", "e.g., 0", "armor", player_stats_node)
	ps_move_speed_edit = _add_stat_editor_to_grid(grid, "Base Move Speed:", "e.g., 60", "movement_speed", player_stats_node)
	ps_luck_edit = _add_stat_editor_to_grid(grid, "Base Luck:", "e.g., 0", "luck", player_stats_node)
	var button_hbox = HBoxContainer.new(); button_hbox.alignment = BoxContainer.ALIGNMENT_CENTER
	player_stats_tab_content.add_child(button_hbox)
	apply_player_stats_button = Button.new(); apply_player_stats_button.text = "Apply Player Stats"
	apply_player_stats_button.pressed.connect(Callable(self, "_on_apply_player_stats_button_pressed")) 
	button_hbox.add_child(apply_player_stats_button)
	reset_player_stats_button = Button.new(); reset_player_stats_button.text = "Reset to Class Defaults"
	reset_player_stats_button.pressed.connect(Callable(self, "_on_reset_player_stats_button_pressed")) 
	button_hbox.add_child(reset_player_stats_button)
	if is_instance_valid(tab_container): 
		tab_container.add_child(player_stats_tab_content)
		tab_container.set_tab_title(tab_container.get_tab_count() - 1, "Player Stats")

func _update_player_stats_display_fields(): 
	if not is_instance_valid(player_stats_node): return
	_update_line_edit_from_stat(ps_max_health_edit, "max_health", player_stats_node)
	_update_line_edit_from_stat(ps_health_regen_edit, "health_regeneration", player_stats_node)
	_update_line_edit_from_stat(ps_numerical_damage_edit, "numerical_damage", player_stats_node)
	_update_line_edit_from_stat(ps_global_flat_damage_edit, "global_flat_damage_add", player_stats_node)
	_update_line_edit_from_stat(ps_attack_speed_mult_edit, "attack_speed_multiplier", player_stats_node)
	_update_line_edit_from_stat(ps_armor_edit, "armor", player_stats_node)
	_update_line_edit_from_stat(ps_move_speed_edit, "movement_speed", player_stats_node)
	_update_line_edit_from_stat(ps_luck_edit, "luck", player_stats_node)

func _on_apply_player_stats_button_pressed(): 
	if not is_instance_valid(player_stats_node): print_debug("DebugPanel ERROR: PlayerStatsComponent not found."); return
	if player_stats_node.has_method("debug_set_base_max_health"): player_stats_node.debug_set_base_max_health(_get_int_from_line_edit(ps_max_health_edit, player_stats_node, "get_base_max_health_for_debug"))
	if player_stats_node.has_method("debug_set_base_health_regeneration"): player_stats_node.debug_set_base_health_regeneration(_get_float_from_line_edit(ps_health_regen_edit, player_stats_node, "get_base_health_regeneration_for_debug"))
	if player_stats_node.has_method("debug_set_base_numerical_damage"): player_stats_node.debug_set_base_numerical_damage(_get_int_from_line_edit(ps_numerical_damage_edit, player_stats_node, "get_base_numerical_damage_for_debug"))
	if player_stats_node.has_method("debug_set_current_global_flat_damage_add"): player_stats_node.debug_set_current_global_flat_damage_add(_get_int_from_line_edit(ps_global_flat_damage_edit, player_stats_node, "get_current_global_flat_damage_add"))
	if player_stats_node.has_method("debug_set_base_attack_speed_multiplier"): player_stats_node.debug_set_base_attack_speed_multiplier(_get_float_from_line_edit(ps_attack_speed_mult_edit, player_stats_node, "get_base_attack_speed_multiplier_for_debug"))
	if player_stats_node.has_method("debug_set_base_armor"): player_stats_node.debug_set_base_armor(_get_int_from_line_edit(ps_armor_edit, player_stats_node, "get_base_armor_for_debug"))
	if player_stats_node.has_method("debug_set_base_movement_speed"): player_stats_node.debug_set_base_movement_speed(_get_float_from_line_edit(ps_move_speed_edit, player_stats_node, "get_base_movement_speed_for_debug"))
	if player_stats_node.has_method("debug_set_base_luck"): player_stats_node.debug_set_base_luck(_get_int_from_line_edit(ps_luck_edit, player_stats_node, "get_base_luck_for_debug"))
	print_debug("DebugPanel: Applied player stat changes."); call_deferred("_update_player_stats_display_fields")

func _on_reset_player_stats_button_pressed(): 
	if not is_instance_valid(player_stats_node): print_debug("DebugPanel ERROR: PlayerStatsComponent not found."); return
	if is_instance_valid(player_stats_node) and player_stats_node.has_method("debug_reset_to_class_defaults"):
		player_stats_node.debug_reset_to_class_defaults(); print_debug("DebugPanel: Player stats reset."); call_deferred("_update_player_stats_display_fields")

# --- WEAPONS TAB ---
func _setup_weapons_tab():
	weapons_tab_content_container = VBoxContainer.new(); weapons_tab_content_container.name = "WeaponsTabContent"
	var available_bp_label = Label.new(); available_bp_label.text = "Available Blueprints:" 
	weapons_tab_content_container.add_child(available_bp_label) 
	available_weapons_list = ItemList.new(); available_weapons_list.name = "AvailableWeaponsList"
	available_weapons_list.select_mode = ItemList.SELECT_SINGLE; available_weapons_list.custom_minimum_size.y = 150
	available_weapons_list.size_flags_vertical = Control.SIZE_EXPAND_FILL
	weapons_tab_content_container.add_child(available_weapons_list)
	add_weapon_button = Button.new(); add_weapon_button.name = "AddWeaponButton"; add_weapon_button.text = "Add Selected Weapon to Player"
	add_weapon_button.pressed.connect(Callable(self, "_on_add_weapon_button_pressed")) 
	weapons_tab_content_container.add_child(add_weapon_button)
	weapons_tab_content_container.add_child(HSeparator.new())
	var active_wep_label = Label.new(); active_wep_label.text = "Player's Active Weapons:" 
	weapons_tab_content_container.add_child(active_wep_label) 
	player_active_weapons_list = ItemList.new(); player_active_weapons_list.name = "PlayerActiveWeaponsList"
	player_active_weapons_list.select_mode = ItemList.SELECT_SINGLE; player_active_weapons_list.custom_minimum_size.y = 100
	player_active_weapons_list.size_flags_vertical = Control.SIZE_EXPAND_FILL
	player_active_weapons_list.item_selected.connect(Callable(self, "_on_player_active_weapon_selected")) 
	weapons_tab_content_container.add_child(player_active_weapons_list)
	var available_upg_label = Label.new(); available_upg_label.text = "Available Upgrades for Selected:" 
	weapons_tab_content_container.add_child(available_upg_label) 
	available_upgrades_list = ItemList.new(); available_upgrades_list.name = "AvailableUpgradesList"
	available_upgrades_list.select_mode = ItemList.SELECT_SINGLE; available_upgrades_list.custom_minimum_size.y = 100
	available_upgrades_list.size_flags_vertical = Control.SIZE_EXPAND_FILL
	weapons_tab_content_container.add_child(available_upgrades_list)
	apply_upgrade_button = Button.new(); apply_upgrade_button.name = "ApplyUpgradeButton"; apply_upgrade_button.text = "Apply Selected Upgrade"
	apply_upgrade_button.pressed.connect(Callable(self, "_on_apply_upgrade_button_pressed")) 
	weapons_tab_content_container.add_child(apply_upgrade_button)
	if is_instance_valid(tab_container): 
		tab_container.add_child(weapons_tab_content_container)
		tab_container.set_tab_title(tab_container.get_tab_count() - 1, "Weapons")

func _update_weapon_list_display(): 
	if not is_instance_valid(game_node) or not game_node.has_method("get_all_weapon_blueprints_for_debug"):
		if is_instance_valid(available_weapons_list): available_weapons_list.clear(); available_weapons_list.add_item("GameNode error or missing method.")
		return
	if not is_instance_valid(available_weapons_list): return

	available_weapons_list.clear()
	var all_blueprints: Array[WeaponBlueprintData] = game_node.get_all_weapon_blueprints_for_debug() 
	
	if all_blueprints.is_empty(): 
		available_weapons_list.add_item("No weapon blueprints loaded.")
		return

	for weapon_bp_res in all_blueprints: 
		if not is_instance_valid(weapon_bp_res) or not weapon_bp_res is WeaponBlueprintData:
			print_debug("DebugPanel: Skipping invalid entry in weapon blueprints array.")
			continue
			
		var class_name_str = "N/A" 
		if not weapon_bp_res.class_tag_restrictions.is_empty():
			var enum_val = weapon_bp_res.class_tag_restrictions[0] 
			# Ensure PlayerCharacter and PlayerCharacter.BasicClass are valid before using
			if ClassDB.class_exists("PlayerCharacter") and "BasicClass" in PlayerCharacter:
				var basic_class_enum = PlayerCharacter.BasicClass
				if basic_class_enum.values().has(enum_val): # Corrected enum value check
					for key_name in basic_class_enum.keys():
						if basic_class_enum[key_name] == enum_val:
							class_name_str = key_name 
							break
				else:
					class_name_str = "Invalid_Enum_Val" # Value not in enum
			else:
				class_name_str = "PC_Enum_Err" # PlayerCharacter or its BasicClass enum not found
		elif weapon_bp_res.class_tag_restrictions.is_empty():
			class_name_str = "Any Class"

		var item_text = "%s - %s (ID: %s)" % [class_name_str, weapon_bp_res.title, weapon_bp_res.id]
		var idx = available_weapons_list.add_item(item_text)
		available_weapons_list.set_item_metadata(idx, weapon_bp_res) 

func _on_add_weapon_button_pressed():
	if not _are_references_valid() or not is_instance_valid(available_weapons_list): return
	var sel_indices = available_weapons_list.get_selected_items()
	if sel_indices.size() > 0:
		var bp_resource = available_weapons_list.get_item_metadata(sel_indices[0]) as WeaponBlueprintData 
		if is_instance_valid(bp_resource):
			if is_instance_valid(weapon_manager_node) and weapon_manager_node.has_method("add_weapon"):
				weapon_manager_node.add_weapon(bp_resource) 
				call_deferred("_update_player_active_weapons_display") 
				call_deferred("_update_available_upgrades_display") 
			else: print_debug("DebugPanel AddWeapon ERROR: weapon_manager_node invalid or missing add_weapon method.")
		else: print_debug("DebugPanel AddWeapon ERROR: Selected item metadata is not a valid WeaponBlueprintData.")
	
func _update_player_active_weapons_display():
	if not _are_references_valid() or not is_instance_valid(player_active_weapons_list): return
	player_active_weapons_list.clear()
	if not (is_instance_valid(weapon_manager_node) and weapon_manager_node.has_method("get_active_weapons_data_for_level_up")): 
		player_active_weapons_list.add_item("WeaponManager not ready or method missing."); return
	var active_weps_data_list: Array[Dictionary] = weapon_manager_node.get_active_weapons_data_for_level_up() 
	if active_weps_data_list.is_empty(): 
		player_active_weapons_list.add_item("No active weapons."); _update_available_upgrades_display(); return
	for wep_instance_data_dict in active_weps_data_list: 
		var weapon_id = wep_instance_data_dict.get("id", &"UNKNOWN_ID")
		var weapon_level = wep_instance_data_dict.get("weapon_level", 0)
		var weapon_title = str(weapon_id) 
		if is_instance_valid(game_node) and game_node.has_method("get_weapon_blueprint_by_id"):
			var bp_res = game_node.get_weapon_blueprint_by_id(weapon_id) as WeaponBlueprintData
			if is_instance_valid(bp_res): weapon_title = bp_res.title
		var item_text = "%s (Lvl %s)" % [weapon_title, weapon_level]
		var idx = player_active_weapons_list.add_item(item_text)
		player_active_weapons_list.set_item_metadata(idx, wep_instance_data_dict) 
	var selected_indices = player_active_weapons_list.get_selected_items()
	if selected_indices.is_empty(): _update_available_upgrades_display()
	else: _on_player_active_weapon_selected(selected_indices[0])

func _on_player_active_weapon_selected(_index: int):
	if not _are_references_valid() or not is_instance_valid(player_active_weapons_list): return
	var sel_indices = player_active_weapons_list.get_selected_items()
	if sel_indices.size() > 0:
		var selected_weapon_instance_data_dict = player_active_weapons_list.get_item_metadata(sel_indices[0]) as Dictionary
		if selected_weapon_instance_data_dict != null: 
			_update_available_upgrades_display(selected_weapon_instance_data_dict)
		else: _update_available_upgrades_display() 
	else: _update_available_upgrades_display() 

func _update_available_upgrades_display(selected_weapon_instance_data_dict: Dictionary = {}):
	if not _are_references_valid() or not is_instance_valid(available_upgrades_list): return
	available_upgrades_list.clear()
	if selected_weapon_instance_data_dict.is_empty() or not selected_weapon_instance_data_dict.has("id"):
		available_upgrades_list.add_item("Select an active weapon to see upgrades."); return
	var weapon_id_str = selected_weapon_instance_data_dict.get("id")
	if not is_instance_valid(game_node) or not game_node.has_method("get_weapon_next_level_upgrades"):
		available_upgrades_list.add_item("Game node error for upgrades."); return
	var next_upgrades_resources: Array[WeaponUpgradeData] = game_node.get_weapon_next_level_upgrades(weapon_id_str, selected_weapon_instance_data_dict)
	if next_upgrades_resources.is_empty():
		var weapon_bp = game_node.get_weapon_blueprint_by_id(StringName(weapon_id_str)) as WeaponBlueprintData
		var current_level = selected_weapon_instance_data_dict.get("weapon_level", 0)
		if is_instance_valid(weapon_bp) and current_level >= weapon_bp.max_level: available_upgrades_list.add_item("Max level reached.")
		else: available_upgrades_list.add_item("No valid upgrades for next level or prerequisites not met.")
		return
	for upgrade_data_res in next_upgrades_resources: 
		if not is_instance_valid(upgrade_data_res): continue
		var item_text = "%s: %s" % [upgrade_data_res.title, upgrade_data_res.description]
		var idx = available_upgrades_list.add_item(item_text)
		available_upgrades_list.set_item_metadata(idx, upgrade_data_res) 

func _on_apply_upgrade_button_pressed():
	if not _are_references_valid() or \
	   not is_instance_valid(player_active_weapons_list) or \
	   not is_instance_valid(available_upgrades_list): return
	var active_sel_indices = player_active_weapons_list.get_selected_items()
	var upgrade_sel_indices = available_upgrades_list.get_selected_items()
	if active_sel_indices.is_empty() or upgrade_sel_indices.is_empty():
		print_debug("DebugPanel ApplyUpgrade: Select an active weapon AND an upgrade to apply."); return
	
	var selected_weapon_instance_data_dict = player_active_weapons_list.get_item_metadata(active_sel_indices[0]) as Dictionary
	var selected_upgrade_resource = available_upgrades_list.get_item_metadata(upgrade_sel_indices[0]) as WeaponUpgradeData

	# Corrected check: A dictionary is not checked with is_instance_valid, check if it's null
	if selected_weapon_instance_data_dict == null or not is_instance_valid(selected_upgrade_resource):
		print_debug("ERROR (DebugPanel ApplyUpgrade): Invalid weapon (dict is null or metadata wrong) or upgrade resource selected.")
		return

	if is_instance_valid(player_node) and player_node.has_method("apply_upgrade"):
		var weapon_id_to_upgrade = selected_weapon_instance_data_dict.get("id") 
		var upgrade_application_data = { 
			"type": "weapon_upgrade", 
			"weapon_id_to_upgrade": weapon_id_to_upgrade, 
			"resource_data": selected_upgrade_resource 
		}
		player_node.apply_upgrade(upgrade_application_data) 
		
		call_deferred("_update_player_active_weapons_display") 
		var current_active_selection_indices = player_active_weapons_list.get_selected_items()
		if current_active_selection_indices.size() > 0:
			var updated_weapon_data = player_active_weapons_list.get_item_metadata(current_active_selection_indices[0])
			call_deferred("_update_available_upgrades_display", updated_weapon_data if updated_weapon_data is Dictionary else {})
		else:
			call_deferred("_update_available_upgrades_display") 
	else: print_debug("DebugPanel ApplyUpgrade ERROR: player_node invalid or missing apply_upgrade method.")


func _setup_enemy_spawner_tab(): 
	enemy_spawner_tab_content = VBoxContainer.new(); enemy_spawner_tab_content.name = "EnemySpawnerTabContent"
	var grid = GridContainer.new(); grid.columns = 2; enemy_spawner_tab_content.add_child(grid)
	grid.add_child(Label.new()) 
	var enemy_type_lbl = Label.new(); enemy_type_lbl.text = "Enemy Type:"; grid.add_child(enemy_type_lbl)
	enemy_type_option_button = OptionButton.new(); enemy_type_option_button.name = "EnemyTypeOption"
	enemy_type_option_button.item_selected.connect(Callable(self, "_on_debug_enemy_type_selected"))
	grid.add_child(enemy_type_option_button)
	grid.add_child(Label.new()) 
	var elite_type_lbl = Label.new(); elite_type_lbl.text = "Elite Type:"; grid.add_child(elite_type_lbl)
	elite_type_option_button = OptionButton.new(); elite_type_option_button.name = "EliteTypeOption"
	grid.add_child(elite_type_option_button)
	grid.add_child(Label.new()) 
	var count_lbl = Label.new(); count_lbl.text = "Count:"; grid.add_child(count_lbl)
	enemy_spawn_count_spinbox = SpinBox.new(); enemy_spawn_count_spinbox.name = "EnemySpawnCountSpinBox"
	enemy_spawn_count_spinbox.min_value = 1; enemy_spawn_count_spinbox.max_value = 50; enemy_spawn_count_spinbox.value = 1
	grid.add_child(enemy_spawn_count_spinbox)
	spawn_near_player_checkbox = CheckBox.new(); spawn_near_player_checkbox.name = "SpawnNearPlayerCheckbox"
	spawn_near_player_checkbox.text = "Spawn Near Player"; spawn_near_player_checkbox.button_pressed = true 
	enemy_spawner_tab_content.add_child(spawn_near_player_checkbox) 
	spawn_enemy_button = Button.new(); spawn_enemy_button.name = "SpawnEnemyButton"; spawn_enemy_button.text = "Spawn Enemy/Elite"
	spawn_enemy_button.pressed.connect(Callable(self, "_on_spawn_enemy_button_pressed"))
	enemy_spawner_tab_content.add_child(spawn_enemy_button)
	if is_instance_valid(tab_container): 
		tab_container.add_child(enemy_spawner_tab_content)
		tab_container.set_tab_title(tab_container.get_tab_count() - 1, "Enemy Spawner")
	if is_instance_valid(game_node): _populate_enemy_spawn_list()
	if is_instance_valid(enemy_type_option_button) and enemy_type_option_button.item_count > 0:
		_on_debug_enemy_type_selected(0) 

func _populate_enemy_spawn_list(): 
	if not is_instance_valid(game_node) or not game_node.has_method("get_loaded_enemy_definitions_for_debug"):
		if is_instance_valid(enemy_type_option_button): 
			enemy_type_option_button.clear()
			enemy_type_option_button.add_item("GameNode error for enemy defs.")
		return
	if not is_instance_valid(enemy_type_option_button): return
	enemy_type_option_button.clear()
	var enemy_defs: Array[EnemyData] = game_node.get_loaded_enemy_definitions_for_debug()
	if enemy_defs.is_empty(): enemy_type_option_button.add_item("No enemies loaded"); return
	for i in range(enemy_defs.size()):
		var enemy_data = enemy_defs[i]
		if is_instance_valid(enemy_data):
			var display_text = enemy_data.display_name if not enemy_data.display_name.is_empty() else str(enemy_data.id)
			enemy_type_option_button.add_item(display_text + " (ID: " + str(enemy_data.id) + ")", i)
			enemy_type_option_button.set_item_metadata(i, enemy_data.id)

func _on_debug_enemy_type_selected(index: int): 
	if not is_instance_valid(game_node) or \
	   not is_instance_valid(enemy_type_option_button) or \
	   not is_instance_valid(elite_type_option_button): return
	elite_type_option_button.clear()
	elite_type_option_button.add_item("None (Non-Elite)", 0) 
	elite_type_option_button.set_item_metadata(0, &"") 
	if index < 0 or index >= enemy_type_option_button.item_count: return
	var selected_enemy_id_raw = enemy_type_option_button.get_item_metadata(index)
	var selected_enemy_id: StringName = &""
	if typeof(selected_enemy_id_raw) == TYPE_STRING_NAME: selected_enemy_id = selected_enemy_id_raw
	elif typeof(selected_enemy_id_raw) == TYPE_STRING: selected_enemy_id = StringName(selected_enemy_id_raw)
	else: print_debug("DebugPanel ERROR: Invalid metadata type for selected enemy ID."); return
	var selected_enemy_data: EnemyData = null
	if game_node.has_method("get_enemy_data_by_id_for_debug"):
		selected_enemy_data = game_node.get_enemy_data_by_id_for_debug(selected_enemy_id)
	if is_instance_valid(selected_enemy_data) and not selected_enemy_data.elite_types_available.is_empty():
		for i in range(selected_enemy_data.elite_types_available.size()):
			var elite_tag: StringName = selected_enemy_data.elite_types_available[i]
			elite_type_option_button.add_item(str(elite_tag).capitalize(), i + 1) 
			elite_type_option_button.set_item_metadata(i + 1, elite_tag)

func _on_spawn_enemy_button_pressed(): 
	if not is_instance_valid(game_node) or not game_node.has_method("debug_spawn_specific_enemy"):
		print_debug("DebugPanel ERROR: game_node invalid or missing debug_spawn_specific_enemy method."); return
	if not is_instance_valid(enemy_type_option_button) or \
	   not is_instance_valid(elite_type_option_button) or \
	   not is_instance_valid(enemy_spawn_count_spinbox) or \
	   not is_instance_valid(spawn_near_player_checkbox):
		print_debug("DebugPanel ERROR: One or more UI elements for enemy spawner are invalid."); return
	var selected_enemy_idx = enemy_type_option_button.selected
	if selected_enemy_idx < 0: print_debug("DebugPanel: No enemy type selected."); return
	var enemy_id_raw = enemy_type_option_button.get_item_metadata(selected_enemy_idx)
	var enemy_id: StringName = &""
	if typeof(enemy_id_raw) == TYPE_STRING_NAME: enemy_id = enemy_id_raw
	elif typeof(enemy_id_raw) == TYPE_STRING: enemy_id = StringName(enemy_id_raw)
	else: print_debug("DebugPanel ERROR: Invalid metadata type for enemy ID."); return
	var elite_tag_override_raw = elite_type_option_button.get_item_metadata(elite_type_option_button.selected)
	var elite_tag_override: StringName = &""
	if typeof(elite_tag_override_raw) == TYPE_STRING_NAME: elite_tag_override = elite_tag_override_raw
	elif typeof(elite_tag_override_raw) == TYPE_STRING: elite_tag_override = StringName(elite_tag_override_raw)
	var count: int = int(enemy_spawn_count_spinbox.value)
	var near_player: bool = spawn_near_player_checkbox.button_pressed
	game_node.debug_spawn_specific_enemy(enemy_id, elite_tag_override, count, near_player)
	


# --- GAME TUNING TAB ---
func _setup_game_tuning_tab():
	game_tuning_tab_content = VBoxContainer.new(); game_tuning_tab_content.name = "GameTuningTabContent"
	game_tuning_tab_content.size_flags_horizontal = Control.SIZE_EXPAND_FILL
	game_tuning_tab_content.size_flags_vertical = Control.SIZE_EXPAND_FILL
	var scroll_container = ScrollContainer.new() 
	scroll_container.size_flags_horizontal = Control.SIZE_EXPAND_FILL
	scroll_container.size_flags_vertical = Control.SIZE_EXPAND_FILL
	game_tuning_tab_content.add_child(scroll_container)
	var tuning_vbox = VBoxContainer.new() 
	tuning_vbox.size_flags_horizontal = Control.SIZE_EXPAND_FILL 
	scroll_container.add_child(tuning_vbox)
	tuning_vbox.add_child(Label.new()) 
	var gameui_params_label = Label.new(); gameui_params_label.text = "GameUI DDS Parameters:"; tuning_vbox.add_child(gameui_params_label)
	var gameui_grid = GridContainer.new(); gameui_grid.columns = 2; tuning_vbox.add_child(gameui_grid)
	gt_base_dds_tick_edit = _add_tuning_editor(gameui_grid, "Base DDS/30s:", "e.g., 10", "base_dds_per_30_sec_tick", game_ui_node)
	gt_dds_lvl_bonus_edit = _add_tuning_editor(gameui_grid, "DDS Lvl Bonus:", "e.g., 5", "dds_bonus_per_level_up", game_ui_node)
	gt_dds_rapid_lvl_bonus_edit = _add_tuning_editor(gameui_grid, "DDS Rapid Lvl Bonus:", "e.g., 15", "dds_bonus_rapid_level_up", game_ui_node)
	gt_rapid_lvl_thresh_edit = _add_tuning_editor(gameui_grid, "Rapid Lvl Threshold (s):", "e.g., 20", "rapid_level_up_threshold_seconds", game_ui_node)
	gt_hc_dds_extra_sec_edit = _add_tuning_editor(gameui_grid, "HC DDS Extra/sec:", "e.g., 0.75", "hardcore_dds_extra_per_second", game_ui_node)
	gt_hc_lvl_mult_edit = _add_tuning_editor(gameui_grid, "HC Lvl DDS Mult:", "e.g., 1.5", "hardcore_level_up_dds_multiplier", game_ui_node)
	tuning_vbox.add_child(HSeparator.new())
	var gamelogic_params_label = Label.new(); gamelogic_params_label.text = "GameLogic Spawn/Game Parameters:"; tuning_vbox.add_child(gamelogic_params_label)
	var gamelogic_grid = GridContainer.new(); gamelogic_grid.columns = 2; tuning_vbox.add_child(gamelogic_grid)
	gt_dds_spawn_factor_edit = _add_tuning_editor(gamelogic_grid, "DDS Spawn Factor:", "e.g., 0.002", "dds_spawn_rate_factor", game_node)
	gt_hc_spawn_mult_edit = _add_tuning_editor(gamelogic_grid, "HC Spawn Mult:", "e.g., 1.75", "hardcore_spawn_rate_multiplier", game_node)
	gt_base_spawn_int_edit = _add_tuning_editor(gamelogic_grid, "Base Spawn Int (s):", "e.g., 3.5", "base_spawn_interval", game_node)
	gt_min_spawn_int_edit = _add_tuning_editor(gamelogic_grid, "Min Spawn Int (s):", "e.g., 0.25", "min_spawn_interval", game_node)
	gt_enemies_batch_edit = _add_tuning_editor(gamelogic_grid, "Enemies/Batch:", "e.g., 3", "enemies_per_batch", game_node)
	gt_active_pool_refresh_edit = _add_tuning_editor(gamelogic_grid, "Active Pool Refresh DDS:", "e.g., 20", "active_pool_refresh_dds_interval", game_node)
	gt_max_active_types_edit = _add_tuning_editor(gamelogic_grid, "Max Active Types:", "e.g., 7", "max_active_enemy_types", game_node)
	gt_enemy_count_update_dds_edit = _add_tuning_editor(gamelogic_grid, "Enemy Count Update DDS:", "e.g., 35", "enemy_count_update_dds_interval", game_node)
	gt_threat_threshold_edit = _add_tuning_editor(gamelogic_grid, "Threat Threshold:", "e.g., 25", "threat_pool_spawn_threshold", game_node)
	gt_threat_batch_mult_edit = _add_tuning_editor(gamelogic_grid, "Threat Batch Mult:", "e.g., 1.5", "threat_pool_batch_multiplier", game_node)
	gt_culling_time_edit = _add_tuning_editor(gamelogic_grid, "Culling Time (s):", "e.g., 3.0", "culling_timer_wait_time", game_node)
	gt_event_interval_edit = _add_tuning_editor(gamelogic_grid, "Event Interval (s):", "e.g., 35", "random_event_check_interval", game_node)
	gt_fwd_spawn_bias_edit = _add_tuning_editor(gamelogic_grid, "Fwd Spawn Bias (0-1):", "e.g., 0.75", "forward_spawn_bias_chance", game_node)
	gt_spawn_margin_edit = _add_tuning_editor(gamelogic_grid, "Spawn Margin:", "e.g., 100", "spawn_margin", game_node)
	var override_hbox = HBoxContainer.new(); tuning_vbox.add_child(override_hbox)
	gt_override_target_enemies_check = CheckBox.new(); gt_override_target_enemies_check.text = "Override Target Enemies"
	gt_override_target_enemies_check.toggled.connect(Callable(self, "_on_override_target_enemies_toggled"))
	override_hbox.add_child(gt_override_target_enemies_check)
	gt_target_enemies_override_val_edit = LineEdit.new(); gt_target_enemies_override_val_edit.placeholder_text = "Count"
	gt_target_enemies_override_val_edit.custom_minimum_size.x = 60; override_hbox.add_child(gt_target_enemies_override_val_edit)
	gt_target_enemies_override_val_edit.visible = false
	tuning_vbox.add_child(HSeparator.new())
	var button_hbox_tuning = HBoxContainer.new(); button_hbox_tuning.alignment = BoxContainer.ALIGNMENT_CENTER
	tuning_vbox.add_child(button_hbox_tuning)
	apply_game_tuning_button = Button.new(); apply_game_tuning_button.text = "Apply Game Tuning"
	apply_game_tuning_button.pressed.connect(Callable(self, "_on_apply_game_tuning_button_pressed"))
	button_hbox_tuning.add_child(apply_game_tuning_button)
	reset_game_tuning_button = Button.new(); reset_game_tuning_button.text = "Reset Game Tuning to Defaults"
	reset_game_tuning_button.pressed.connect(Callable(self, "_on_reset_game_tuning_button_pressed"))
	button_hbox_tuning.add_child(reset_game_tuning_button)
	if is_instance_valid(tab_container):
		tab_container.add_child(game_tuning_tab_content)
		tab_container.set_tab_title(tab_container.get_tab_count() - 1, "Game Tuning")

func _update_game_tuning_display_fields():
	if not is_instance_valid(game_ui_node) or not is_instance_valid(game_node): return
	_update_tuning_line_edit_from_property(gt_base_dds_tick_edit, game_ui_node, "base_dds_per_30_sec_tick")
	_update_tuning_line_edit_from_property(gt_dds_lvl_bonus_edit, game_ui_node, "dds_bonus_per_level_up")
	_update_tuning_line_edit_from_property(gt_dds_rapid_lvl_bonus_edit, game_ui_node, "dds_bonus_rapid_level_up")
	_update_tuning_line_edit_from_property(gt_rapid_lvl_thresh_edit, game_ui_node, "rapid_level_up_threshold_seconds")
	_update_tuning_line_edit_from_property(gt_hc_dds_extra_sec_edit, game_ui_node, "hardcore_dds_extra_per_second")
	_update_tuning_line_edit_from_property(gt_hc_lvl_mult_edit, game_ui_node, "hardcore_level_up_dds_multiplier")
	_update_tuning_line_edit_from_property(gt_dds_spawn_factor_edit, game_node, "dds_spawn_rate_factor")
	_update_tuning_line_edit_from_property(gt_hc_spawn_mult_edit, game_node, "hardcore_spawn_rate_multiplier")
	_update_tuning_line_edit_from_property(gt_base_spawn_int_edit, game_node, "base_spawn_interval")
	_update_tuning_line_edit_from_property(gt_min_spawn_int_edit, game_node, "min_spawn_interval")
	_update_tuning_line_edit_from_property(gt_enemies_batch_edit, game_node, "enemies_per_batch")
	_update_tuning_line_edit_from_property(gt_active_pool_refresh_edit, game_node, "active_pool_refresh_dds_interval")
	_update_tuning_line_edit_from_property(gt_max_active_types_edit, game_node, "max_active_enemy_types")
	_update_tuning_line_edit_from_property(gt_enemy_count_update_dds_edit, game_node, "enemy_count_update_dds_interval")
	_update_tuning_line_edit_from_property(gt_threat_threshold_edit, game_node, "threat_pool_spawn_threshold")
	_update_tuning_line_edit_from_property(gt_threat_batch_mult_edit, game_node, "threat_pool_batch_multiplier")
	_update_tuning_line_edit_from_property(gt_culling_time_edit, game_node, "culling_timer_wait_time")
	_update_tuning_line_edit_from_property(gt_event_interval_edit, game_node, "random_event_check_interval")
	_update_tuning_line_edit_from_property(gt_fwd_spawn_bias_edit, game_node, "forward_spawn_bias_chance")
	_update_tuning_line_edit_from_property(gt_spawn_margin_edit, game_node, "spawn_margin")
	if is_instance_valid(gt_override_target_enemies_check) and is_instance_valid(game_node) and "debug_override_target_enemies" in game_node:
		gt_override_target_enemies_check.button_pressed = game_node.debug_override_target_enemies
	if is_instance_valid(gt_target_enemies_override_val_edit) and is_instance_valid(game_node) and "debug_target_enemies_value" in game_node:
		gt_target_enemies_override_val_edit.text = str(game_node.debug_target_enemies_value)
		gt_target_enemies_override_val_edit.visible = gt_override_target_enemies_check.button_pressed if is_instance_valid(gt_override_target_enemies_check) else false

func _on_override_target_enemies_toggled(toggled_on: bool):
	if is_instance_valid(gt_target_enemies_override_val_edit):
		gt_target_enemies_override_val_edit.visible = toggled_on
	if not toggled_on and is_instance_valid(game_node) and game_node.has_method("debug_set_target_on_screen_enemies_override"):
		game_node.debug_set_target_on_screen_enemies_override(false) 

func _on_apply_game_tuning_button_pressed():
	if not is_instance_valid(game_ui_node) or not is_instance_valid(game_node): print_debug("DebugPanel ERROR: GameUI or GameNode not valid for applying tuning."); return
	if game_ui_node.has_method("debug_set_base_dds_per_30_sec_tick"): game_ui_node.debug_set_base_dds_per_30_sec_tick(_get_float_from_line_edit(gt_base_dds_tick_edit, game_ui_node, "base_dds_per_30_sec_tick", true))
	if game_ui_node.has_method("debug_set_dds_bonus_per_level_up"): game_ui_node.debug_set_dds_bonus_per_level_up(_get_float_from_line_edit(gt_dds_lvl_bonus_edit, game_ui_node, "dds_bonus_per_level_up", true))
	if game_ui_node.has_method("debug_set_dds_bonus_rapid_level_up"): game_ui_node.debug_set_dds_bonus_rapid_level_up(_get_float_from_line_edit(gt_dds_rapid_lvl_bonus_edit, game_ui_node, "dds_bonus_rapid_level_up", true))
	if game_ui_node.has_method("debug_set_rapid_level_up_threshold_seconds"): game_ui_node.debug_set_rapid_level_up_threshold_seconds(_get_float_from_line_edit(gt_rapid_lvl_thresh_edit, game_ui_node, "rapid_level_up_threshold_seconds", true))
	if game_ui_node.has_method("debug_set_hardcore_dds_extra_per_second"): game_ui_node.debug_set_hardcore_dds_extra_per_second(_get_float_from_line_edit(gt_hc_dds_extra_sec_edit, game_ui_node, "hardcore_dds_extra_per_second", true))
	if game_ui_node.has_method("debug_set_hardcore_level_up_dds_multiplier"): game_ui_node.debug_set_hardcore_level_up_dds_multiplier(_get_float_from_line_edit(gt_hc_lvl_mult_edit, game_ui_node, "hardcore_level_up_dds_multiplier", true))
	if game_node.has_method("debug_set_dds_spawn_rate_factor"): game_node.debug_set_dds_spawn_rate_factor(_get_float_from_line_edit(gt_dds_spawn_factor_edit, game_node, "dds_spawn_rate_factor", true))
	if game_node.has_method("debug_set_hardcore_spawn_rate_multiplier"): game_node.debug_set_hardcore_spawn_rate_multiplier(_get_float_from_line_edit(gt_hc_spawn_mult_edit, game_node, "hardcore_spawn_rate_multiplier", true))
	if game_node.has_method("debug_set_base_spawn_interval"): game_node.debug_set_base_spawn_interval(_get_float_from_line_edit(gt_base_spawn_int_edit, game_node, "base_spawn_interval", true))
	if game_node.has_method("debug_set_min_spawn_interval"): game_node.debug_set_min_spawn_interval(_get_float_from_line_edit(gt_min_spawn_int_edit, game_node, "min_spawn_interval", true))
	if game_node.has_method("debug_set_enemies_per_batch"): game_node.debug_set_enemies_per_batch(_get_int_from_line_edit(gt_enemies_batch_edit, game_node, "enemies_per_batch", true))
	if game_node.has_method("debug_set_active_pool_refresh_dds_interval"): game_node.debug_set_active_pool_refresh_dds_interval(_get_float_from_line_edit(gt_active_pool_refresh_edit, game_node, "active_pool_refresh_dds_interval", true))
	if game_node.has_method("debug_set_max_active_enemy_types"): game_node.debug_set_max_active_enemy_types(_get_int_from_line_edit(gt_max_active_types_edit, game_node, "max_active_enemy_types", true))
	if game_node.has_method("debug_set_enemy_count_update_dds_interval"): game_node.debug_set_enemy_count_update_dds_interval(_get_float_from_line_edit(gt_enemy_count_update_dds_edit, game_node, "enemy_count_update_dds_interval", true))
	if game_node.has_method("debug_set_threat_pool_spawn_threshold"): game_node.debug_set_threat_pool_spawn_threshold(_get_int_from_line_edit(gt_threat_threshold_edit, game_node, "threat_pool_spawn_threshold", true))
	if game_node.has_method("debug_set_threat_pool_batch_multiplier"): game_node.debug_set_threat_pool_batch_multiplier(_get_float_from_line_edit(gt_threat_batch_mult_edit, game_node, "threat_pool_batch_multiplier", true))
	if game_node.has_method("debug_set_culling_timer_wait_time"): game_node.debug_set_culling_timer_wait_time(_get_float_from_line_edit(gt_culling_time_edit, game_node, "culling_timer_wait_time", true))
	if game_node.has_method("debug_set_random_event_check_interval"): game_node.debug_set_random_event_check_interval(_get_float_from_line_edit(gt_event_interval_edit, game_node, "random_event_check_interval", true))
	if game_node.has_method("debug_set_forward_spawn_bias_chance"): game_node.debug_set_forward_spawn_bias_chance(_get_float_from_line_edit(gt_fwd_spawn_bias_edit, game_node, "forward_spawn_bias_chance", true))
	if game_node.has_method("debug_set_spawn_margin"): game_node.debug_set_spawn_margin(_get_float_from_line_edit(gt_spawn_margin_edit, game_node, "spawn_margin", true))
	if is_instance_valid(gt_override_target_enemies_check) and game_node.has_method("debug_set_target_on_screen_enemies_override"):
		var override_enabled = gt_override_target_enemies_check.button_pressed; var override_value = -1
		if override_enabled and is_instance_valid(gt_target_enemies_override_val_edit) and gt_target_enemies_override_val_edit.text.is_valid_int():
			override_value = int(gt_target_enemies_override_val_edit.text)
		game_node.debug_set_target_on_screen_enemies_override(override_enabled, override_value)
	print_debug("DebugPanel: Applied Game Tuning parameters."); call_deferred("_update_game_tuning_display_fields") 

func _on_reset_game_tuning_button_pressed():
	if is_instance_valid(game_ui_node) and game_ui_node.has_method("debug_reset_dds_parameters_to_defaults"):
		game_ui_node.debug_reset_dds_parameters_to_defaults()
	if is_instance_valid(game_node) and game_node.has_method("debug_reset_game_parameters_to_defaults"):
		game_node.debug_reset_game_parameters_to_defaults()
	print_debug("DebugPanel: Reset Game Tuning parameters to defaults."); call_deferred("_update_game_tuning_display_fields")
 
==== H:\Game Creation\testing-environ\Scripts\UI\LevelUpScreen.gd ==== 
# LevelUpScreen.gd
# Forcefully sets visibility on itself and its children to ensure UI appears.
extends CanvasLayer

signal upgrade_chosen(chosen_upgrade_data_dict: Dictionary)

@onready var cards_container_node: Container = $CardsContainer 
@onready var dim_background: ColorRect = $DimBackground 

var card_nodes_array: Array[PanelContainer] = [] 

func _ready():
	# Start hidden, but ensure children's visibility is what's set in the scene editor initially.
	self.hide() 
	call_deferred("_get_card_nodes_from_container") 

func _get_card_nodes_from_container():
	card_nodes_array.clear() 
	if not is_instance_valid(cards_container_node): 
		print_debug("ERROR (LevelUpScreen - _get_card_nodes): cards_container_node ($CardsContainer) is invalid!")
		return

	for child in cards_container_node.get_children():
		if child is PanelContainer and child.has_method("set_data"): 
			card_nodes_array.append(child)
			if child.has_signal("card_selected"):
				var callable_to_check = Callable(self, "_on_card_selected")
				var is_already_connected = false
				for connection_info in child.get_signal_connection_list("card_selected"):
					if connection_info.callable == callable_to_check:
						is_already_connected = true; break
				if not is_already_connected:
					child.card_selected.connect(callable_to_check)
			# Don't hide the cards here anymore, let display_options manage it.

# Changed signature to 'options: Array'
func display_options(options: Array): 
	# --- Force Visibility ---
	self.visible = true
	if is_instance_valid(dim_background):
		dim_background.visible = true
	if is_instance_valid(cards_container_node):
		cards_container_node.visible = true
	else:
		print_debug("ERROR (LevelUpScreen - display_options): cards_container_node is invalid! Cannot display cards.")
		return
	
	# Ensure the card node array is up-to-date
	_get_card_nodes_from_container()
	
	if card_nodes_array.is_empty() and not options.is_empty():
		print_debug("ERROR (LevelUpScreen): No card UI nodes found/available in $CardsContainer. Cannot display options.")
		return

	# Hide all card slots first, then show only the ones we need
	for card in card_nodes_array:
		card.hide()

	var cards_to_display_count = min(options.size(), card_nodes_array.size())
	print_debug("LevelUpScreen: Populating and showing ", cards_to_display_count, " cards.")

	for i in range(cards_to_display_count):
		var card_node: PanelContainer = card_nodes_array[i] 
		var option_data_dict: Dictionary = options[i] 
		
		if not option_data_dict is Dictionary:
			print_debug("ERROR (LevelUpScreen): Option data at index ", i, " is not a Dictionary.")
			continue

		if card_node.has_method("set_data"):
			card_node.set_data(option_data_dict) 
		
		card_node.visible = true # Forcefully show the card that has been populated

	print_debug("LevelUpScreen: Visibility explicitly set.")


func _on_card_selected(chosen_upgrade_data_dict: Dictionary): 
	print_debug("LevelUpScreen: Card selected, emitting upgrade_chosen with: ", chosen_upgrade_data_dict)
	emit_signal("upgrade_chosen", chosen_upgrade_data_dict) 
	self.hide() 
 
==== H:\Game Creation\testing-environ\Scripts\UI\NewLevelUpScreen.gd ==== 
# NewLevelUpScreen.gd (Rebuilt Version)
# Dynamically creates cards to avoid timing issues.
extends CanvasLayer

signal upgrade_chosen(chosen_upgrade_data)

# Preload the card scene. Ensure this path points to your NEW UpgradeCard scene.
const UPGRADE_CARD_SCENE = preload("res://Scenes/UI/NewUpgradeCard.tscn")

@onready var cards_container: HBoxContainer = $CardsContainer
@onready var dim_background: ColorRect = $DimBackground

func _ready():
	# Start hidden by setting visible property directly
	visible = false

# This is called deferred from game.gd
func display_options(options: Array):
	# 1. Clear any old cards from the container from a previous level-up
	for child in cards_container.get_children():
		child.queue_free()
		
	if not is_instance_valid(UPGRADE_CARD_SCENE):
		print_debug("ERROR (NewLevelUpScreen): UPGRADE_CARD_SCENE is not a valid scene. Check path in script.")
		visible = true # Show empty so game doesn't freeze
		return
	
	print_debug("NewLevelUpScreen: Creating ", options.size(), " new upgrade cards.")

	# 2. Create and populate new cards for the current options
	for option_data in options:
		if not option_data is Dictionary: continue
		
		var card_instance = UPGRADE_CARD_SCENE.instantiate()
		if not is_instance_valid(card_instance): continue
		
		# Add card to the tree *before* calling methods on it.
		# This ensures its _ready() function runs and @onready vars are set.
		cards_container.add_child(card_instance)
		
		# Now that it's in the tree, we can safely call display_data.
		if card_instance.has_method("display_data"):
			card_instance.display_data(option_data)
		else:
			print_debug("ERROR: Instanced UpgradeCard scene is missing display_data() method.")
			
		# Connect to its signal
		if not card_instance.is_connected("card_selected", Callable(self, "_on_card_selected")):
			card_instance.card_selected.connect(Callable(self, "_on_card_selected"))
			
	# 3. Show the entire screen
	self.visible = true


func _on_card_selected(chosen_upgrade_data: Dictionary):
	emit_signal("upgrade_chosen", chosen_upgrade_data) 
	visible = false # Hide by setting visible property directly
 
==== H:\Game Creation\testing-environ\Scripts\UI\NewUpgradeCard.gd ==== 
# NewUpgradeCard.gd
# A lean script for our rebuilt upgrade card.
# CORRECTED node paths to include "CardLayout".
extends PanelContainer

signal card_selected(upgrade_data: Dictionary)

# Corrected paths to match your scene tree: NewUpgradeCard > CardLayout > UI_Element
@onready var title_label: Label = $CardLayout/TitleLabel
@onready var description_label: Label = $CardLayout/DescriptionLabel
@onready var icon_texture_rect: TextureRect = $CardLayout/IconTextureRect
@onready var select_button: Button = $CardLayout/SelectButton

var _current_card_data: Dictionary

func _ready():
	if not is_instance_valid(select_button):
		print_debug("ERROR (NewUpgradeCard): SelectButton not found at '$CardLayout/SelectButton'")
	elif not select_button.is_connected("pressed", Callable(self, "_on_select_button_pressed")):
		select_button.pressed.connect(Callable(self, "_on_select_button_pressed"))
			
	custom_minimum_size = Vector2(160, 200)

func display_data(data: Dictionary):
	_current_card_data = data
	
	if is_instance_valid(title_label):
		title_label.text = data.get("title", "N/A")
	
	if is_instance_valid(description_label):
		description_label.text = data.get("description", "")
		
	if is_instance_valid(icon_texture_rect):
		var icon_path = data.get("icon_path", "")
		if not icon_path.is_empty():
			var tex = load(icon_path) as Texture2D
			icon_texture_rect.texture = tex
			icon_texture_rect.visible = is_instance_valid(tex)
		else:
			icon_texture_rect.visible = false

func _on_select_button_pressed():
	if _current_card_data:
		emit_signal("card_selected", _current_card_data)
	else:
		print_debug("ERROR (NewUpgradeCard): Select button pressed but no data.")
 
==== H:\Game Creation\testing-environ\Scripts\Weapons\ArrowProjectile.gd ==== 
# File: ArrowProjectile.gd (Rogue Bow)
# (Canvas ID: arrow_projectile_rogue_v1)
extends Area2D

var final_damage_amount: int = 12
var final_speed: float = 350.0 
var final_applied_scale: Vector2 = Vector2(1.0, 1.0) 

var direction: Vector2 = Vector2.RIGHT 
var lifetime_timer: Timer
@onready var animated_sprite: AnimatedSprite2D = get_node_or_null("AnimatedSprite") as AnimatedSprite2D
@onready var collision_shape: CollisionShape2D = get_node_or_null("CollisionShape2D") as CollisionShape2D

const FLY_ANIMATION_NAME = "fly" 
var _stats_have_been_set: bool = false
var _received_stats: Dictionary = {}

func _ready():
	lifetime_timer = Timer.new(); add_child(lifetime_timer)
	lifetime_timer.process_mode = Node.PROCESS_MODE_ALWAYS # Ensure it ticks if game is paused by debug
	lifetime_timer.wait_time = 2.0; lifetime_timer.one_shot = true 
	if not lifetime_timer.is_connected("timeout", Callable(self, "queue_free")):
		lifetime_timer.timeout.connect(self.queue_free)
	# Timer started in _apply_all_effects

	if direction != Vector2.ZERO: 
		rotation = direction.angle() # Adjust with - PI if sprite faces left by default

	if _stats_have_been_set:
		_apply_all_effects()
	else: # Apply default scale if stats not yet set
		_apply_visual_scale() # Will use default final_applied_scale (1,1)
		if is_instance_valid(animated_sprite) and animated_sprite.sprite_frames and animated_sprite.sprite_frames.has_animation(FLY_ANIMATION_NAME):
			animated_sprite.play(FLY_ANIMATION_NAME)


func _physics_process(delta: float):
	global_position += direction * final_speed * delta

func set_owner_stats(stats: Dictionary):
	_received_stats = stats.duplicate(true)
	_stats_have_been_set = true
	
	if is_inside_tree(): # If already in tree, apply scale and start timer immediately
		_apply_all_effects()

func _apply_all_effects():
	if not _stats_have_been_set: return

	var base_w_damage = _received_stats.get("damage", 12) 
	var p_dmg_mult = _received_stats.get("damage_multiplier", 1.0)
	var p_flat_dmg = _received_stats.get("base_damage_bonus", 0.0)
	final_damage_amount = int(round(base_w_damage * p_dmg_mult + p_flat_dmg))
	
	var base_w_speed = _received_stats.get("projectile_speed", 350.0) 
	var p_proj_spd_mult = _received_stats.get("projectile_speed_multiplier", 1.0)
	final_speed = base_w_speed * p_proj_spd_mult
	
	var weapon_inherent_scl_val = _received_stats.get("inherent_visual_scale", Vector2(1.0, 1.0))
	var weapon_inherent_base_scale: Vector2
	if weapon_inherent_scl_val is Vector2: weapon_inherent_base_scale = weapon_inherent_scl_val
	elif weapon_inherent_scl_val is float: weapon_inherent_base_scale = Vector2(weapon_inherent_scl_val, weapon_inherent_scl_val)
	else: weapon_inherent_base_scale = Vector2(1.0, 1.0)
		
	var p_proj_size_mult = _received_stats.get("projectile_size_multiplier", 1.0)
	final_applied_scale.x = weapon_inherent_base_scale.x * p_proj_size_mult
	final_applied_scale.y = weapon_inherent_base_scale.y * p_proj_size_mult
	
	_apply_visual_scale()
	
	if is_instance_valid(animated_sprite) and animated_sprite.sprite_frames and animated_sprite.sprite_frames.has_animation(FLY_ANIMATION_NAME):
		if not animated_sprite.is_playing() or animated_sprite.animation != FLY_ANIMATION_NAME : animated_sprite.play(FLY_ANIMATION_NAME)

	if is_instance_valid(lifetime_timer) and lifetime_timer.is_stopped():
		lifetime_timer.start()


func _apply_visual_scale():
	if is_instance_valid(animated_sprite): animated_sprite.scale = final_applied_scale
	if is_instance_valid(collision_shape): collision_shape.scale = final_applied_scale

func _on_body_entered(body: Node2D): 
	if body.is_in_group("enemies") and body.has_method("take_damage"):
		body.take_damage(final_damage_amount); call_deferred("queue_free") 
	elif body.is_in_group("world_obstacles"): 
		call_deferred("queue_free") 

func set_direction(fired_direction: Vector2):
	direction = fired_direction.normalized() if fired_direction.length_squared() > 0 else Vector2.RIGHT
	if is_inside_tree() and direction != Vector2.ZERO: 
		rotation = direction.angle() # Adjust if sprite faces left
 
==== H:\Game Creation\testing-environ\Scripts\Weapons\BowShotManager.gd ==== 
#// --- File: BowShotManager.gd (for Rogue Bow) ---
#// (From Canvas ID: bow_shot_manager_rogue_v1)
#// Attach to the root Node2D of BowShotManager.tscn
extends Node2D

const ARROW_PROJECTILE_SCENE = preload("res://Scenes/Weapons/Projectiles/ArrowProjectile.tscn") # ADJUST PATH
const SHOT_DELAY: float = 0.25 

var owner_stats_for_arrow: Dictionary = {} 
var player_reference_global_position: Vector2 

func _ready():
	if not ARROW_PROJECTILE_SCENE: print("ERROR (BowShotManager): ARROW_PROJECTILE_SCENE not loaded!"); queue_free(); return
	if player_reference_global_position == Vector2.ZERO: 
		print("ERROR (BowShotManager): Player's global position not set.")
		var players = get_tree().get_nodes_in_group("player_char_group")
		if players.size() > 0 and is_instance_valid(players[0]): player_reference_global_position = players[0].global_position
		else: queue_free(); return
			
	_fire_arrow(player_reference_global_position, Vector2.LEFT)
	var delay_timer = get_tree().create_timer(SHOT_DELAY)
	await delay_timer.timeout 
	_fire_arrow(player_reference_global_position, Vector2.RIGHT)
	queue_free()

func _fire_arrow(spawn_position: Vector2, direction: Vector2):
	if not ARROW_PROJECTILE_SCENE: return
	var arrow_instance = ARROW_PROJECTILE_SCENE.instantiate()
	var attacks_parent = get_tree().current_scene.get_node_or_null("AttacksContainer")
	if not is_instance_valid(attacks_parent): attacks_parent = get_tree().current_scene 
	if is_instance_valid(attacks_parent): attacks_parent.add_child(arrow_instance)
	else: arrow_instance.queue_free(); return

	arrow_instance.global_position = spawn_position
	if arrow_instance.has_method("set_direction"): arrow_instance.set_direction(direction)
	if arrow_instance.has_method("set_owner_stats"): arrow_instance.set_owner_stats(owner_stats_for_arrow)

func set_shooter_info(p_spawn_position: Vector2, stats_for_projectile: Dictionary):
	player_reference_global_position = p_spawn_position
	owner_stats_for_arrow = stats_for_projectile
 
==== H:\Game Creation\testing-environ\Scripts\Weapons\CrossbowBoltAttack.gd ==== 
# crossbow_bolt_attack.gd
# Attach to the root Area2D of your crossbow_bolt_attack.tscn
extends Area2D

var final_damage_amount: int = 18
var final_speed: float = 200.0
var final_applied_scale: Vector2 = Vector2(1,1)
var direction: Vector2 = Vector2.RIGHT 
var max_pierce_count: int = 1 
var current_pierce_count: int = 0

@onready var animated_sprite: AnimatedSprite2D = get_node_or_null("AnimatedSprite") as AnimatedSprite2D
@onready var lifetime_timer: Timer = get_node_or_null("LifetimeTimer") as Timer
@onready var collision_shape: CollisionShape2D = get_node_or_null("CollisionShape2D") as CollisionShape2D

var _stats_have_been_set: bool = false
var _received_stats: Dictionary = {}

func _ready():
	if not is_instance_valid(animated_sprite): print("WARNING (CrossbowBolt '", name, "'): AnimatedSprite missing.")
	if not is_instance_valid(collision_shape): print("WARNING (CrossbowBolt '", name, "'): CollisionShape2D missing.")

	if not is_instance_valid(lifetime_timer): print("ERROR (CrossbowBolt '", name, "'): LifetimeTimer missing!"); call_deferred("queue_free"); return
	else:
		lifetime_timer.process_mode = Node.PROCESS_MODE_ALWAYS
		lifetime_timer.wait_time = 4.0; lifetime_timer.one_shot = true 
		if not lifetime_timer.is_connected("timeout", Callable(self, "queue_free")):
			lifetime_timer.timeout.connect(self.queue_free)
	
	if direction != Vector2.ZERO: rotation = direction.angle() # Adjust if sprite faces left
	
	if _stats_have_been_set: _apply_all_stats_effects()
	else: _apply_visual_scale() # Apply default scale

func _physics_process(delta: float):
	global_position += direction * final_speed * delta

func set_owner_stats(stats: Dictionary):
	_received_stats = stats.duplicate(true)
	_stats_have_been_set = true
	if is_inside_tree(): _apply_all_stats_effects()

func _apply_all_stats_effects():
	if not _stats_have_been_set: return

	var base_w_damage = _received_stats.get("damage", 18) 
	var p_dmg_mult = _received_stats.get("damage_multiplier", 1.0)
	var p_flat_dmg = _received_stats.get("base_damage_bonus", 0.0)
	final_damage_amount = int(round(base_w_damage * p_dmg_mult + p_flat_dmg))
	
	var base_w_speed = _received_stats.get("speed", 200.0)
	var p_proj_spd_mult = _received_stats.get("projectile_speed_multiplier", 1.0)
	final_speed = base_w_speed * p_proj_spd_mult
	
	max_pierce_count = _received_stats.get("max_pierce", 1)
	
	var weapon_inherent_scl_val = _received_stats.get("inherent_visual_scale", Vector2(1.0, 1.0))
	var weapon_inherent_base_scale: Vector2
	if weapon_inherent_scl_val is Vector2: weapon_inherent_base_scale = weapon_inherent_scl_val
	elif weapon_inherent_scl_val is float: weapon_inherent_base_scale = Vector2(weapon_inherent_scl_val, weapon_inherent_scl_val)
	else: weapon_inherent_base_scale = Vector2(1.0, 1.0)
	
	var p_proj_size_mult = _received_stats.get("projectile_size_multiplier", 1.0)
	final_applied_scale.x = weapon_inherent_base_scale.x * p_proj_size_mult
	final_applied_scale.y = weapon_inherent_base_scale.y * p_proj_size_mult
	
	_apply_visual_scale()
	if is_instance_valid(lifetime_timer) and lifetime_timer.is_stopped(): lifetime_timer.start()

func _apply_visual_scale():
	if is_instance_valid(animated_sprite): animated_sprite.scale = final_applied_scale
	if is_instance_valid(collision_shape): collision_shape.scale = final_applied_scale

func _on_body_entered(body: Node2D): 
	if body.is_in_group("enemies") and body.has_method("take_damage"):
		body.take_damage(final_damage_amount); current_pierce_count += 1
		if current_pierce_count >= max_pierce_count + 1: call_deferred("queue_free") # +1 because max_pierce is how many it passes THROUGH
	elif body.is_in_group("world_obstacles"): call_deferred("queue_free") 

func set_direction(fired_direction: Vector2):
	direction = fired_direction.normalized() if fired_direction.length_squared() > 0 else Vector2.RIGHT
	if is_inside_tree() and direction != Vector2.ZERO: rotation = direction.angle() # Adjust if sprite faces left
 
==== H:\Game Creation\testing-environ\Scripts\Weapons\DaggerAttack.gd ==== 
extends Node2D

var final_damage_amount: int = 10
var final_applied_scale: Vector2 = Vector2(1.0, 1.0) 
var facing_direction: Vector2 = Vector2.RIGHT 
var current_frame_index_to_display: int = 0

@onready var animated_sprite: AnimatedSprite2D = get_node_or_null("AnimatedSprite") as AnimatedSprite2D
@onready var display_duration_timer: Timer = get_node_or_null("DisplayDurationTimer") as Timer
@onready var damage_area: Area2D = get_node_or_null("DamageArea") as Area2D

const SLASH_ANIMATION_NAME_IN_SPRITEFRAMES = "slash" 
const BASE_DISPLAY_DURATION: float = 0.1 
const FADE_DURATION: float = 0.15 

var actual_display_duration: float = BASE_DISPLAY_DURATION
var current_attack_speed_multiplier: float = 1.0

var _enemies_hit_this_slash: Array[Node2D] = []
var _stats_have_been_set: bool = false
var _received_stats: Dictionary = {}

func _ready():
	if not is_instance_valid(animated_sprite): print("ERROR (DaggerAttack): AnimatedSprite missing."); call_deferred("queue_free"); return
	if not is_instance_valid(damage_area): print("ERROR (DaggerAttack): DamageArea missing."); call_deferred("queue_free"); return
	else:
		if not damage_area.is_connected("body_entered", Callable(self, "_on_damage_area_body_entered")):
			damage_area.body_entered.connect(self._on_damage_area_body_entered)
	if not is_instance_valid(display_duration_timer): print("ERROR (DaggerAttack): DisplayDurationTimer missing!"); call_deferred("queue_free"); return
	else:
		display_duration_timer.process_mode = Node.PROCESS_MODE_ALWAYS
		display_duration_timer.one_shot = true
		if not display_duration_timer.is_connected("timeout", Callable(self, "_on_display_duration_timer_timeout")):
			display_duration_timer.timeout.connect(self._on_display_duration_timer_timeout)
	
	if _stats_have_been_set: 
		_apply_all_effects_and_start_timer()

func set_attack_properties(p_direction: Vector2, p_attack_stats: Dictionary, p_frame_index: int):
	_received_stats = p_attack_stats.duplicate(true)
	_stats_have_been_set = true
	current_frame_index_to_display = p_frame_index
	facing_direction = p_direction.normalized() if p_direction.length_squared() > 0 else Vector2.RIGHT
	
	if is_inside_tree(): 
		_apply_all_effects_and_start_timer()

func _apply_all_effects_and_start_timer():
	if not _stats_have_been_set: return
	if not (is_instance_valid(animated_sprite) and is_instance_valid(damage_area) and is_instance_valid(display_duration_timer)):
		call_deferred("queue_free"); return

	var base_w_damage = _received_stats.get("damage", 10)
	var p_dmg_mult = _received_stats.get("damage_multiplier", 1.0)
	var p_flat_dmg = _received_stats.get("base_damage_bonus", 0.0)
	final_damage_amount = int(round(base_w_damage * p_dmg_mult + p_flat_dmg))

	var weapon_inherent_scl_val = _received_stats.get("inherent_visual_scale", Vector2(1.0, 1.0))
	var weapon_inherent_base_scale: Vector2
	if weapon_inherent_scl_val is Vector2: weapon_inherent_base_scale = weapon_inherent_scl_val
	elif weapon_inherent_scl_val is float: weapon_inherent_base_scale = Vector2(weapon_inherent_scl_val, weapon_inherent_scl_val)
	else: weapon_inherent_base_scale = Vector2(1.0, 1.0)
		
	var p_aoe_mult = _received_stats.get("aoe_area_multiplier", 1.0) 
	final_applied_scale.x = weapon_inherent_base_scale.x * p_aoe_mult
	final_applied_scale.y = weapon_inherent_base_scale.y * p_aoe_mult
	
	_apply_visual_scale()

	current_attack_speed_multiplier = _received_stats.get("attack_speed_multiplier", 1.0)
	if current_attack_speed_multiplier <= 0: current_attack_speed_multiplier = 0.01
	actual_display_duration = BASE_DISPLAY_DURATION / current_attack_speed_multiplier
	
	display_duration_timer.wait_time = actual_display_duration
	if not display_duration_timer.is_stopped(): display_duration_timer.stop()
	display_duration_timer.start()
	
	if is_instance_valid(animated_sprite): animated_sprite.speed_scale = current_attack_speed_multiplier

	if facing_direction != Vector2.ZERO: self.rotation = facing_direction.angle() - PI 
	_setup_visual_frame(current_frame_index_to_display)

func _apply_visual_scale():
	if is_instance_valid(animated_sprite): animated_sprite.scale = final_applied_scale
	if is_instance_valid(damage_area): damage_area.scale = final_applied_scale


func _setup_visual_frame(frame_idx: int):
	if not is_instance_valid(animated_sprite): return
	if animated_sprite.sprite_frames and animated_sprite.sprite_frames.has_animation(SLASH_ANIMATION_NAME_IN_SPRITEFRAMES):
		animated_sprite.animation = SLASH_ANIMATION_NAME_IN_SPRITEFRAMES 
		var frame_count = animated_sprite.sprite_frames.get_frame_count(SLASH_ANIMATION_NAME_IN_SPRITEFRAMES)
		var target_frame = frame_idx
		if not (frame_idx >= 0 and frame_idx < frame_count): target_frame = 0
		
		animated_sprite.animation = SLASH_ANIMATION_NAME_IN_SPRITEFRAMES 
		animated_sprite.stop(); animated_sprite.frame = target_frame 
	else: 
		print("WARNING (DaggerAttack '", name, "'): Animation '", SLASH_ANIMATION_NAME_IN_SPRITEFRAMES, "' not found.")


func _on_display_duration_timer_timeout():
	if is_instance_valid(damage_area):
		damage_area.monitoring = false; damage_area.monitorable = false
	_start_fade_out()

func _start_fade_out():
	var tween = create_tween().set_parallel(true) 
	if is_instance_valid(animated_sprite):
		tween.tween_property(animated_sprite, "modulate:a", 0.0, FADE_DURATION).set_trans(Tween.TRANS_SINE)
	tween.tween_callback(queue_free)


func _on_damage_area_body_entered(body: Node2D):
	if _enemies_hit_this_slash.has(body): return
	if body.is_in_group("enemies") and body.has_method("take_damage"):
		body.take_damage(final_damage_amount); _enemies_hit_this_slash.append(body)
 
==== H:\Game Creation\testing-environ\Scripts\Weapons\frozen_territory_attack.gd ==== 
extends Node2D 

@export var orbit_distance: float = 60.0  
const ROTATION_DURATION: float = 3.0     
const ORBIT_SPEED_BASE: float = TAU / ROTATION_DURATION 
var current_orbit_speed: float = ORBIT_SPEED_BASE
var initial_orbit_angle_offset: float = 0.0 

var final_damage_amount: int = 8 
var final_aoe_scale: Vector2 = Vector2(1,1) 
const SLOW_FACTOR: float = 0.5 
var final_slow_duration: float = 2.0

@onready var animated_sprite: AnimatedSprite2D = get_node_or_null("AnimatedSprite") as AnimatedSprite2D
@onready var damage_area: Area2D = get_node_or_null("DamageArea") as Area2D            
@onready var effect_duration_timer: Timer = get_node_or_null("EffectDurationTimer") as Timer 
@onready var collision_shape_for_scaling: CollisionShape2D = get_node_or_null("DamageArea/CollisionShape2D") as CollisionShape2D

var current_angle: float = 0.0
var _enemies_in_area: Array[Node2D] = [] 
var _hit_this_pulse: Array[Node2D] = []  
var _hit_reset_timer: Timer 
var _stats_have_been_set: bool = false
var _received_stats: Dictionary = {}
var actual_effect_duration: float = ROTATION_DURATION 


func _ready():
	if not is_instance_valid(animated_sprite): print("WARNING (FrozenTerritoryAttack): AnimatedSprite missing.")
	if not is_instance_valid(damage_area): print("ERROR (FrozenTerritoryAttack): DamageArea missing."); call_deferred("queue_free"); return
	else:
		if not damage_area.is_connected("body_entered", Callable(self, "_on_damage_area_body_entered")):
			damage_area.body_entered.connect(self._on_damage_area_body_entered)
		if not damage_area.is_connected("body_exited", Callable(self, "_on_damage_area_body_exited")):
			damage_area.body_exited.connect(self._on_damage_area_body_exited)
	
	if not is_instance_valid(effect_duration_timer): print("ERROR (FrozenTerritoryAttack): EffectDurationTimer missing!"); call_deferred("queue_free"); return
	else:
		effect_duration_timer.process_mode = Node.PROCESS_MODE_ALWAYS
		effect_duration_timer.one_shot = true 
		if not effect_duration_timer.is_connected("timeout", Callable(self, "queue_free")):
			effect_duration_timer.timeout.connect(self.queue_free)
	
	_hit_reset_timer = Timer.new(); _hit_reset_timer.name = "HitResetTimerInternal"
	_hit_reset_timer.process_mode = Node.PROCESS_MODE_ALWAYS; _hit_reset_timer.one_shot = false 
	add_child(_hit_reset_timer)
	if not _hit_reset_timer.is_connected("timeout", Callable(self, "_on_internal_hit_reset_timeout")):
		_hit_reset_timer.timeout.connect(self._on_internal_hit_reset_timeout)

	if _stats_have_been_set: _apply_all_stats_and_start_timers()
	else: _apply_visual_scale() 

	current_angle = initial_orbit_angle_offset 
	_update_orbit_position() 
	
	if is_instance_valid(animated_sprite) and animated_sprite.sprite_frames and animated_sprite.sprite_frames.has_animation("active"):
		animated_sprite.play("active")


func _physics_process(delta: float):
	if is_instance_valid(effect_duration_timer) and not effect_duration_timer.is_stopped():
		current_angle += current_orbit_speed * delta
		current_angle = fmod(current_angle, TAU) 
		_update_orbit_position()

func _update_orbit_position():
	position.x = orbit_distance * cos(current_angle)
	position.y = orbit_distance * sin(current_angle)

func set_owner_stats(stats: Dictionary): 
	_received_stats = stats.duplicate(true)
	_stats_have_been_set = true
	if is_inside_tree(): _apply_all_stats_and_start_timers()

func _apply_all_stats_and_start_timers():
	if not _stats_have_been_set: return
	if not (is_instance_valid(effect_duration_timer) and is_instance_valid(_hit_reset_timer)):
		print("ERROR (FrozenTerritory): Timers not valid in _apply_all_stats_and_start_timers.")
		return

	var base_w_damage = _received_stats.get("damage", 8)
	var p_dmg_mult = _received_stats.get("damage_multiplier", 1.0)
	var p_flat_dmg = _received_stats.get("base_damage_bonus", 0.0)
	final_damage_amount = int(round(base_w_damage * p_dmg_mult + p_flat_dmg))
	
	var weapon_inherent_scl_val = _received_stats.get("inherent_visual_scale", Vector2(1.0, 1.0))
	var weapon_inherent_base_scale: Vector2
	if weapon_inherent_scl_val is Vector2: weapon_inherent_base_scale = weapon_inherent_scl_val
	elif weapon_inherent_scl_val is float: weapon_inherent_base_scale = Vector2(weapon_inherent_scl_val, weapon_inherent_scl_val)
	else: weapon_inherent_base_scale = Vector2(1.0, 1.0)
	
	var p_aoe_mult = _received_stats.get("aoe_area_multiplier", 1.0) 
	final_aoe_scale.x = weapon_inherent_base_scale.x * p_aoe_mult
	final_aoe_scale.y = weapon_inherent_base_scale.y * p_aoe_mult
	
	var p_effect_dur_mult = _received_stats.get("effect_duration_multiplier", 1.0)
	var base_slow_dur = _received_stats.get("slow_duration", 2.0) 
	final_slow_duration = base_slow_dur * p_effect_dur_mult 
	
	var attack_speed_multiplier = _received_stats.get("attack_speed_multiplier", 1.0)
	if attack_speed_multiplier <= 0: attack_speed_multiplier = 0.01
	current_orbit_speed = ORBIT_SPEED_BASE * attack_speed_multiplier
	if is_instance_valid(animated_sprite): animated_sprite.speed_scale = attack_speed_multiplier

	var base_effect_duration = _received_stats.get("base_effect_duration", ROTATION_DURATION) 
	actual_effect_duration = base_effect_duration * p_effect_dur_mult 
	
	effect_duration_timer.wait_time = actual_effect_duration 
	if not effect_duration_timer.is_stopped(): effect_duration_timer.stop()
	effect_duration_timer.start()

	var base_pulse_interval = _received_stats.get("cooldown", 0.5) 
	_hit_reset_timer.wait_time = base_pulse_interval / attack_speed_multiplier 
	if _hit_reset_timer.is_stopped(): _hit_reset_timer.start()
	else: _hit_reset_timer.stop(); _hit_reset_timer.start()

	orbit_distance = _received_stats.get("orbit_distance", 60.0) 
	initial_orbit_angle_offset = _received_stats.get("initial_angle_offset", 0.0) 
	current_angle = initial_orbit_angle_offset 
	
	_apply_visual_scale()
	_update_orbit_position() 


func _apply_visual_scale():
	if is_instance_valid(animated_sprite): animated_sprite.scale = final_aoe_scale
	if is_instance_valid(damage_area): damage_area.scale = final_aoe_scale


func _on_damage_area_body_entered(body: Node2D):
	if is_instance_valid(effect_duration_timer) and effect_duration_timer.is_stopped(): return 
	if body.is_in_group("enemies") and not _enemies_in_area.has(body): 
		_enemies_in_area.append(body); _try_damage_enemy(body) 

func _on_damage_area_body_exited(body: Node2D):
	if body.is_in_group("enemies") and _enemies_in_area.has(body): _enemies_in_area.erase(body)
	if _hit_this_pulse.has(body): _hit_this_pulse.erase(body)

func _on_internal_hit_reset_timeout():
	_hit_this_pulse.clear() 
	var current_enemies = _enemies_in_area.duplicate() 
	for enemy_node in current_enemies:
		if is_instance_valid(enemy_node): _try_damage_enemy(enemy_node)
		else: _enemies_in_area.erase(enemy_node) 

func _try_damage_enemy(enemy_node: Node2D):
	if not _hit_this_pulse.has(enemy_node): 
		if enemy_node.has_method("take_damage"): enemy_node.take_damage(final_damage_amount)
		if enemy_node.has_method("apply_slow_debuff"): enemy_node.apply_slow_debuff(final_slow_duration, SLOW_FACTOR)
		_hit_this_pulse.append(enemy_node) 
 
==== H:\Game Creation\testing-environ\Scripts\Weapons\LesserSpirit.gd ==== 
# LesserSpirit.gd
# Attached to the root Node2D of LesserSpirit.tscn
extends Node2D

# --- Configurable Stats ---
var base_damage: int = 8
var base_fire_interval: float = 1.0 # Seconds between shots
var base_orbit_distance: float = 30.0
var base_orbit_speed: float = 1.0 # Radians per second
var projectile_base_speed: float = 250.0
var projectile_inherent_scale: Vector2 = Vector2(0.05, 0.05) # Example base scale for its projectiles

const PLAYER_TARGETING_RANGE: float = 100.0 # Max distance from PLAYER to acquire target
const PROJECTILE_SCENE_PATH = "res://Scenes/Weapons/Summons/LesserSpiritProjectile.tscn" # ADJUST PATH
var projectile_scene: PackedScene

# --- Player & Target References ---
var player_node: PlayerCharacter 
var current_target: Node2D = null

# --- Internal State ---
var current_orbit_angle: float = 0.0
var final_fire_interval: float = 1.0
var final_damage: int = 8
var final_projectile_speed: float = 250.0
var final_projectile_applied_scale: Vector2 = Vector2(1.0, 1.0)
var final_aoe_scale_for_self: Vector2 = Vector2(1.0, 1.0) # For the spirit's own visual
var final_orbit_speed: float = 1.0 # CORRECTED: Declared
var final_orbit_distance: float = 30.0 # CORRECTED: Declared

# --- Node References ---
@onready var visual: AnimatedSprite2D = get_node_or_null("Visual") as AnimatedSprite2D # Or AnimatedSprite2D
@onready var fire_timer: Timer = get_node_or_null("FireTimer") as Timer
@onready var projectile_spawn_point: Node2D = get_node_or_null("ProjectileSpawnPoint") as Node2D

func _ready():
	projectile_scene = load(PROJECTILE_SCENE_PATH)
	if not projectile_scene:
		print("ERROR (LesserSpirit): Could not load projectile scene at: ", PROJECTILE_SCENE_PATH)
		if is_instance_valid(fire_timer): fire_timer.stop() 
		return

	if not is_instance_valid(player_node): 
		var parent = get_parent()
		if parent is PlayerCharacter:
			player_node = parent
		else:
			print("ERROR (LesserSpirit): Player node not found or not PlayerCharacter type.")
			if is_instance_valid(fire_timer): fire_timer.stop()
			return
	
	if not is_instance_valid(fire_timer):
		print("ERROR (LesserSpirit): FireTimer node not found!")
	else:
		fire_timer.timeout.connect(_on_fire_timer_timeout)

	if not is_instance_valid(projectile_spawn_point):
		print("ERROR (LesserSpirit): ProjectileSpawnPoint node not found!")

	if is_instance_valid(player_node):
		_update_orbit_position() 

	if is_instance_valid(visual) and visual is AnimatedSprite2D:
		if visual.sprite_frames and visual.sprite_frames.has_animation("orbit_loop"): 
			visual.play("orbit_loop")


func _physics_process(delta: float):
	if not is_instance_valid(player_node): return 

	current_orbit_angle += final_orbit_speed * delta 
	current_orbit_angle = fmod(current_orbit_angle, TAU)
	_update_orbit_position()

	if is_instance_valid(visual):
		if is_instance_valid(current_target):
			visual.look_at(current_target.global_position)
		else: 
			var dir_from_player = position.normalized()
			if dir_from_player.length_squared() > 0:
				visual.rotation = dir_from_player.angle() + PI/2.0 
			

func _update_orbit_position():
	position.x = final_orbit_distance * cos(current_orbit_angle)
	position.y = final_orbit_distance * sin(current_orbit_angle)


func set_owner_stats(stats: Dictionary):
	if not is_instance_valid(player_node): 
		var parent = get_parent()
		if parent is PlayerCharacter: player_node = parent
		if not is_instance_valid(player_node):
			print("ERROR (LesserSpirit set_owner_stats): Player node still invalid.")
			return
	
	var weapon_base_damage = stats.get("damage", base_damage) 
	var player_damage_multiplier = stats.get("damage_multiplier", 1.0)
	var player_flat_damage_bonus = stats.get("base_damage_bonus", 0.0)
	final_damage = int(round(weapon_base_damage * player_damage_multiplier + player_flat_damage_bonus))

	var player_attack_speed_multiplier = stats.get("attack_speed_multiplier", 1.0)
	if player_attack_speed_multiplier <= 0: player_attack_speed_multiplier = 0.01
	
	final_fire_interval = stats.get("cooldown", base_fire_interval) / player_attack_speed_multiplier 
	if is_instance_valid(fire_timer):
		fire_timer.wait_time = final_fire_interval
		if fire_timer.is_stopped() or not fire_timer.autostart: fire_timer.start()
		else: fire_timer.stop(); fire_timer.start() 
	
	# Use base_orbit_speed and base_orbit_distance from class variables if not in stats
	final_orbit_speed = stats.get("orbit_speed", base_orbit_speed) * player_attack_speed_multiplier 
	final_orbit_distance = stats.get("orbit_distance", base_orbit_distance) 
	
	if is_instance_valid(visual) and visual is AnimatedSprite2D:
		visual.speed_scale = player_attack_speed_multiplier

	var spirit_inherent_scl_val = stats.get("inherent_visual_scale_pet", Vector2(1.0, 1.0)) 
	var spirit_inherent_base_scale: Vector2
	if spirit_inherent_scl_val is Vector2: spirit_inherent_base_scale = spirit_inherent_scl_val
	elif spirit_inherent_scl_val is float: spirit_inherent_base_scale = Vector2(spirit_inherent_scl_val, spirit_inherent_scl_val)
	else: spirit_inherent_base_scale = Vector2(1.0, 1.0)
	
	var player_aoe_mult = stats.get("aoe_area_multiplier", 1.0) 
	final_aoe_scale_for_self.x = spirit_inherent_base_scale.x * player_aoe_mult
	final_aoe_scale_for_self.y = spirit_inherent_base_scale.y * player_aoe_mult
	if is_instance_valid(visual): visual.scale = final_aoe_scale_for_self

	final_projectile_speed = stats.get("projectile_base_speed", projectile_base_speed) * stats.get("projectile_speed_multiplier", 1.0)
	var proj_inherent_scl_val = stats.get("projectile_inherent_scale", projectile_inherent_scale) 
	var proj_inherent_base_scale : Vector2
	if proj_inherent_scl_val is Vector2: proj_inherent_base_scale = proj_inherent_scl_val
	elif proj_inherent_scl_val is float: proj_inherent_base_scale = Vector2(proj_inherent_scl_val, proj_inherent_scl_val)
	else: proj_inherent_base_scale = projectile_inherent_scale # Use the class var default if not a Vector2
	var player_proj_size_mult = stats.get("projectile_size_multiplier", 1.0)
	final_projectile_applied_scale.x = proj_inherent_base_scale.x * player_proj_size_mult
	final_projectile_applied_scale.y = proj_inherent_base_scale.y * player_proj_size_mult

	# print("DEBUG (LesserSpirit): Stats set. Damage: ", final_damage, " Fire Interval: ", final_fire_interval)


func _on_fire_timer_timeout():
	if not is_instance_valid(player_node): return
	
	_find_target() 
	
	if is_instance_valid(current_target) and is_instance_valid(projectile_spawn_point) and projectile_scene:
		var proj_instance = projectile_scene.instantiate() 
		# Check if the type hint can be applied after instantiation
		if not proj_instance is LesserSpiritProjectile and proj_instance != null: # Check if it's not already the type or null
			# This might not be necessary if projectile_scene is correctly typed, but as a safeguard
			# print_debug("LesserSpirit: proj_instance is not LesserSpiritProjectile, type: ", typeof(proj_instance))
			pass

		var attacks_container = get_tree().current_scene.get_node_or_null("AttacksContainer") 
		if not is_instance_valid(attacks_container): attacks_container = get_tree().current_scene

		if is_instance_valid(attacks_container):
			attacks_container.add_child(proj_instance)
			proj_instance.global_position = projectile_spawn_point.global_position
			var fire_dir = (current_target.global_position - projectile_spawn_point.global_position).normalized()
			if proj_instance.has_method("setup"): # Check if setup method exists
				proj_instance.setup(fire_dir, final_damage, final_projectile_speed, final_projectile_applied_scale)
			else:
				print("ERROR (LesserSpirit): Projectile instance is missing 'setup' method.")
		else:
			if is_instance_valid(proj_instance): proj_instance.queue_free() 


func _find_target():
	if not is_instance_valid(player_node): return

	var player_pos = player_node.global_position
	
	if is_instance_valid(current_target) and current_target.is_inside_tree():
		if current_target.global_position.distance_squared_to(player_pos) < PLAYER_TARGETING_RANGE * PLAYER_TARGETING_RANGE:
			var target_is_dead = false
			if current_target.has_method("is_dead"): target_is_dead = current_target.is_dead()
			elif current_target.has_method("get_current_health"): target_is_dead = (current_target.get_current_health() <= 0)
			
			if not target_is_dead: return 
		current_target = null 
	else:
		current_target = null

	var potential_targets: Array[Node2D] = []
	var enemies_group = get_tree().get_nodes_in_group("enemies")
	for enemy in enemies_group:
		if is_instance_valid(enemy) and enemy.global_position.distance_squared_to(player_pos) < PLAYER_TARGETING_RANGE * PLAYER_TARGETING_RANGE:
			var enemy_is_dead = false
			if enemy.has_method("is_dead"): enemy_is_dead = enemy.is_dead()
			elif enemy.has_method("get_current_health"): enemy_is_dead = (enemy.get_current_health() <= 0)
			
			if not enemy_is_dead: potential_targets.append(enemy)
	
	if potential_targets.is_empty(): current_target = null; return

	var highest_health_enemy: Node2D = null
	var max_health_found: float = -INF
	for enemy in potential_targets:
		var enemy_health = 0.0
		if enemy.has_method("get_current_health"): enemy_health = float(enemy.get_current_health())
		elif "current_health" in enemy: enemy_health = float(enemy.current_health) 

		if enemy_health > max_health_found:
			max_health_found = enemy_health
			highest_health_enemy = enemy
			
	current_target = highest_health_enemy
 
==== H:\Game Creation\testing-environ\Scripts\Weapons\LongswordAttack.gd ==== 
extends Node2D

var final_damage_amount: int = 14
var final_aoe_scale: Vector2 = Vector2(1.0, 1.0) 
var facing_direction: Vector2 = Vector2.RIGHT 

@onready var animated_sprite: AnimatedSprite2D = get_node_or_null("AnimatedSprite") as AnimatedSprite2D
@onready var damage_area: Area2D = get_node_or_null("DamageArea") as Area2D
@onready var duration_timer: Timer = get_node_or_null("DurationTimer") as Timer

const SLASH_ANIMATION_NAME = "slash" 
const BASE_ATTACK_DURATION: float = 0.3 
var actual_attack_duration: float = BASE_ATTACK_DURATION
var current_attack_speed_multiplier: float = 1.0

var _enemies_hit_this_attack: Array[Node2D] = [] 
var _stats_have_been_set: bool = false
var _received_stats: Dictionary = {}

func _ready():
	if not is_instance_valid(animated_sprite): print("ERROR (Longsword): AnimatedSprite missing."); call_deferred("queue_free"); return
	if not is_instance_valid(damage_area): print("ERROR (Longsword): DamageArea missing."); call_deferred("queue_free"); return
	else:
		if not damage_area.is_connected("body_entered", Callable(self, "_on_damage_area_body_entered")):
			damage_area.body_entered.connect(self._on_damage_area_body_entered)
	if not is_instance_valid(duration_timer): print("ERROR (Longsword): DurationTimer missing!"); call_deferred("queue_free"); return
	else:
		duration_timer.process_mode = Node.PROCESS_MODE_ALWAYS
		duration_timer.one_shot = true
		if not duration_timer.is_connected("timeout", Callable(self, "queue_free")):
			duration_timer.timeout.connect(self.queue_free)
	
	if _stats_have_been_set: _apply_all_effects_and_start_timer()

# Updated to match the expected signature from WeaponManager for non-ShieldBash melee
func set_attack_properties(p_direction: Vector2, p_attack_stats: Dictionary):
	_received_stats = p_attack_stats.duplicate(true)
	_stats_have_been_set = true
	facing_direction = p_direction.normalized() if p_direction.length_squared() > 0 else Vector2.RIGHT
	
	if is_inside_tree(): 
		_apply_all_effects_and_start_timer()

func _apply_all_effects_and_start_timer():
	if not _stats_have_been_set: return
	if not (is_instance_valid(animated_sprite) and is_instance_valid(damage_area) and is_instance_valid(duration_timer)):
		call_deferred("queue_free"); return

	var base_w_damage = _received_stats.get("damage", 14) 
	var p_dmg_mult = _received_stats.get("damage_multiplier", 1.0)
	var p_flat_dmg = _received_stats.get("base_damage_bonus", 0.0)
	final_damage_amount = int(round(base_w_damage * p_dmg_mult + p_flat_dmg))
	
	var weapon_inherent_scl_val = _received_stats.get("inherent_visual_scale", Vector2(1.0, 1.0))
	var weapon_inherent_base_scale: Vector2
	if weapon_inherent_scl_val is Vector2: weapon_inherent_base_scale = weapon_inherent_scl_val
	elif weapon_inherent_scl_val is float: weapon_inherent_base_scale = Vector2(weapon_inherent_scl_val, weapon_inherent_scl_val)
	else: weapon_inherent_base_scale = Vector2(1.0, 1.0)
		
	var p_aoe_mult = _received_stats.get("aoe_area_multiplier", 1.0)
	final_aoe_scale.x = weapon_inherent_base_scale.x * p_aoe_mult
	final_aoe_scale.y = weapon_inherent_base_scale.y * p_aoe_mult
	
	_apply_visual_scale()

	current_attack_speed_multiplier = _received_stats.get("attack_speed_multiplier", 1.0)
	if current_attack_speed_multiplier <= 0: current_attack_speed_multiplier = 0.01
	
	actual_attack_duration = BASE_ATTACK_DURATION / current_attack_speed_multiplier
	duration_timer.wait_time = actual_attack_duration
	if not duration_timer.is_stopped(): duration_timer.stop()
	duration_timer.start()

	if facing_direction != Vector2.ZERO: self.rotation = facing_direction.angle() - PI # Assumes left-facing sprite
	
	animated_sprite.speed_scale = current_attack_speed_multiplier
	if animated_sprite.sprite_frames and animated_sprite.sprite_frames.has_animation(SLASH_ANIMATION_NAME):
		animated_sprite.play(SLASH_ANIMATION_NAME)

func _apply_visual_scale():
	if is_instance_valid(animated_sprite): animated_sprite.scale = final_aoe_scale
	if is_instance_valid(damage_area): damage_area.scale = final_aoe_scale

func _on_damage_area_body_entered(body: Node2D):
	if _enemies_hit_this_attack.has(body): return
	if body.is_in_group("enemies") and body.has_method("take_damage"):
		body.take_damage(final_damage_amount); _enemies_hit_this_attack.append(body)
 
==== H:\Game Creation\testing-environ\Scripts\Weapons\MothGolem.gd ==== 
# MothGolem.gd
# Attached to the root CharacterBody2D of MothGolem.tscn
extends CharacterBody2D

class_name MothGolem

# --- Base Stats (from blueprint, modified by player stats) ---
var final_damage_amount: int = 14
var final_attack_interval: float = 1.0 
var final_movement_speed: float = 75.0 
var final_visual_scale: Vector2 = Vector2(1.0, 1.0)

# --- Behavior Config ---
const LEASH_DISTANCE: float = 150.0 
const ATTACK_REACH: float = 30.0    # Radius of the AttackRangeArea's CollisionShape2D
# STOPPING_DISTANCE_ENEMY should be less than ATTACK_REACH to ensure overlap
const STOPPING_DISTANCE_ENEMY: float = ATTACK_REACH * .1 # Stop a bit before the full reach
const STOPPING_DISTANCE_PLAYER: float = 40.0
const ENEMY_DETECTION_RADIUS: float = 200.0 

# --- Node References ---
@onready var animated_sprite: AnimatedSprite2D = get_node_or_null("Visual") as AnimatedSprite2D
@onready var attack_range_area: Area2D = get_node_or_null("AttackRangeArea") as Area2D 
@onready var attack_timer: Timer = get_node_or_null("AttackTimer") as Timer 
@onready var leash_check_timer: Timer = get_node_or_null("LeashCheckTimer") as Timer 
@onready var navigation_agent: NavigationAgent2D = get_node_or_null("NavigationAgent") as NavigationAgent2D

# --- State & Targeting ---
var player_node: PlayerCharacter 
var current_target: Node2D = null
var prioritized_target: Node2D = null 
var is_returning_to_player: bool = false
var _enemies_in_attack_range: Array[Node2D] = [] 

enum GolemState { IDLE, SEEKING_ENEMY, ATTACKING, RETURNING_TO_PLAYER }
var current_state: GolemState = GolemState.IDLE

var _stats_have_been_set: bool = false 
var _received_stats_on_init : Dictionary
var _is_stagger_animation_playing: bool = false # To manage stagger animation state

func _ready():
	if not is_instance_valid(player_node):
		var parent = get_parent()
		if parent is PlayerCharacter: player_node = parent
		if not is_instance_valid(player_node):
			print("ERROR (MothGolem): Player node not set or found!")
			queue_free(); return

	if is_instance_valid(player_node) and player_node.has_signal("player_took_damage_from"):
		if not player_node.is_connected("player_took_damage_from", Callable(self, "on_player_damaged")):
			player_node.player_took_damage_from.connect(Callable(self, "on_player_damaged"))

	if not is_instance_valid(animated_sprite): print("ERROR (MothGolem): Visual node missing!")
	else: # Connect animation finished signal if sprite exists
		if not animated_sprite.is_connected("animation_finished", Callable(self, "_on_animated_sprite_animation_finished")):
			animated_sprite.animation_finished.connect(Callable(self, "_on_animated_sprite_animation_finished"))

	if not is_instance_valid(attack_range_area): print("ERROR (MothGolem): AttackRangeArea missing!")
	else:
		attack_range_area.body_entered.connect(_on_attack_range_area_body_entered)
		attack_range_area.body_exited.connect(_on_attack_range_area_body_exited)
		var attack_shape = attack_range_area.get_node_or_null("CollisionShape2D")
		if is_instance_valid(attack_shape) and attack_shape.shape is CircleShape2D:
			attack_shape.shape.radius = ATTACK_REACH 

	if not is_instance_valid(attack_timer): print("ERROR (MothGolem): AttackTimer missing!")
	else:
		attack_timer.timeout.connect(_on_attack_timer_timeout)

	if is_instance_valid(leash_check_timer): 
		leash_check_timer.timeout.connect(_check_leash_distance)
	
	if not is_instance_valid(navigation_agent):
		print("WARNING (MothGolem): NavigationAgent2D not found. Golem will use simple movement.")
	else:
		navigation_agent.path_desired_distance = 5.0 
		navigation_agent.target_desired_distance = STOPPING_DISTANCE_ENEMY 
		navigation_agent.avoidance_enabled = true # Consider enabling for better group movement

	if _stats_have_been_set: 
		_apply_all_stats(_received_stats_on_init)
		_update_state() 
	
	_play_animation("idle") 


func set_owner_stats(stats: Dictionary):
	_received_stats_on_init = stats.duplicate(true)
	_stats_have_been_set = true 

	if is_inside_tree(): 
		_apply_all_stats(_received_stats_on_init)
		_update_state()

func _apply_all_stats(stats: Dictionary):
	var base_w_damage = stats.get("damage", 14)
	var p_dmg_mult = stats.get("damage_multiplier", 1.0)
	var p_flat_dmg = stats.get("base_damage_bonus", 0.0)
	final_damage_amount = int(round(base_w_damage * p_dmg_mult + p_flat_dmg))

	var p_attack_speed_mult = stats.get("attack_speed_multiplier", 1.0)
	if p_attack_speed_mult <= 0: p_attack_speed_mult = 0.01
	var base_attack_interval = stats.get("attack_interval", 1.0) 
	final_attack_interval = base_attack_interval / p_attack_speed_mult
	if is_instance_valid(attack_timer):
		attack_timer.wait_time = final_attack_interval

	final_movement_speed = stats.get("movement_speed_pet", 75.0) 
	
	var weapon_inherent_scl_val = stats.get("inherent_visual_scale", Vector2(1.0, 1.0))
	var weapon_inherent_base_scale: Vector2
	if weapon_inherent_scl_val is Vector2: weapon_inherent_base_scale = weapon_inherent_scl_val
	elif weapon_inherent_scl_val is float: weapon_inherent_base_scale = Vector2(weapon_inherent_scl_val, weapon_inherent_scl_val)
	else: weapon_inherent_base_scale = Vector2(1.0, 1.0)
	
	var player_pet_size_mult = stats.get("pet_size_multiplier", 1.0) # Assuming this stat exists in PlayerStats
	final_visual_scale.x = weapon_inherent_base_scale.x * player_pet_size_mult
	final_visual_scale.y = weapon_inherent_base_scale.y * player_pet_size_mult
	
	if is_instance_valid(animated_sprite): animated_sprite.scale = final_visual_scale
	var body_collision_shape = get_node_or_null("CollisionShape2D") 
	if is_instance_valid(body_collision_shape): body_collision_shape.scale = final_visual_scale


func _physics_process(delta: float):
	if not is_instance_valid(player_node): return

	var target_pos_for_movement: Vector2 = Vector2.ZERO
	var is_actively_moving_to_target = false

	if is_returning_to_player:
		target_pos_for_movement = player_node.global_position
		if global_position.distance_to(player_node.global_position) < STOPPING_DISTANCE_PLAYER: 
			is_returning_to_player = false
			velocity = Vector2.ZERO 
			_update_state() 
		else:
			_move_towards(target_pos_for_movement)
			is_actively_moving_to_target = true
	elif is_instance_valid(current_target):
		target_pos_for_movement = current_target.global_position
		is_actively_moving_to_target = true
		_move_towards(target_pos_for_movement)
		# Face target - assuming sprite faces LEFT by default
		if is_instance_valid(animated_sprite) and global_position.distance_to(target_pos_for_movement) > 1.0 : 
			var direction_to_target = (target_pos_for_movement - global_position).normalized()
			if direction_to_target.x > 0.01 : # Target is to the right of Golem
				animated_sprite.flip_h = true # Flip to face right
			elif direction_to_target.x < -0.01: # Target is to the left of Golem
				animated_sprite.flip_h = false # Default left-facing
	else: 
		_update_state() 
		velocity = Vector2.ZERO 
		if not _is_stagger_animation_playing: _play_animation("idle")
	
	if not is_actively_moving_to_target and not is_returning_to_player: 
		if global_position.distance_to(player_node.global_position) > LEASH_DISTANCE * 0.75: 
			is_returning_to_player = true
	
	if velocity.length_squared() > 0.01: 
		move_and_slide()
	else: 
		velocity = Vector2.ZERO


func _move_towards(target_pos: Vector2): 
	var desired_stopping_dist = STOPPING_DISTANCE_ENEMY
	if is_returning_to_player:
		desired_stopping_dist = STOPPING_DISTANCE_PLAYER

	if global_position.distance_to(target_pos) < desired_stopping_dist:
		velocity = Vector2.ZERO
		if not is_returning_to_player and is_instance_valid(current_target) and _enemies_in_attack_range.has(current_target):
			_try_start_attack_timer() 
		if not _is_stagger_animation_playing: _play_animation("idle")
		return

	if is_instance_valid(navigation_agent) and navigation_agent.target_position != target_pos : # Only update if target changed
		navigation_agent.set_target_position(target_pos)
		
	if is_instance_valid(navigation_agent) and navigation_agent.is_target_reachable():
		var next_path_pos = navigation_agent.get_next_path_position()
		velocity = (next_path_pos - global_position).normalized() * final_movement_speed
		# Check if navigation agent is "done" or very close to its final target point
		if navigation_agent.is_target_reached() or global_position.distance_to(target_pos) < desired_stopping_dist:
			velocity = Vector2.ZERO # Stop precisely
			if not is_returning_to_player and is_instance_valid(current_target) and _enemies_in_attack_range.has(current_target):
				_try_start_attack_timer()
	else: # Simple movement if no navigation agent or target not reachable
		velocity = (target_pos - global_position).normalized() * final_movement_speed
	
	if velocity.length_squared() > 0.01 and not _is_stagger_animation_playing: _play_animation("move")
	elif not _is_stagger_animation_playing: _play_animation("idle")


func _update_state():
	if is_returning_to_player: return 

	var old_target = current_target
	if is_instance_valid(prioritized_target) and _is_target_valid(prioritized_target):
		current_target = prioritized_target
		current_state = GolemState.SEEKING_ENEMY
	else:
		prioritized_target = null
		var nearest_enemy = _find_nearest_enemy_to_self()
		if is_instance_valid(nearest_enemy):
			current_target = nearest_enemy
			current_state = GolemState.SEEKING_ENEMY
		else:
			current_target = null
			current_state = GolemState.IDLE 
			if is_instance_valid(player_node) and global_position.distance_to(player_node.global_position) > LEASH_DISTANCE * 0.75: 
				is_returning_to_player = true
	
	if old_target != current_target:
		if is_instance_valid(attack_timer): attack_timer.stop()


func _find_nearest_enemy_to_self() -> Node2D:
	var closest_enemy: Node2D = null; var min_dist_sq = ENEMY_DETECTION_RADIUS * ENEMY_DETECTION_RADIUS 
	var enemies = get_tree().get_nodes_in_group("enemies")
	for enemy in enemies:
		if _is_target_valid(enemy):
			var dist_sq = global_position.distance_squared_to(enemy.global_position)
			if dist_sq < min_dist_sq: min_dist_sq = dist_sq; closest_enemy = enemy
	return closest_enemy

func _is_target_valid(target_node: Node2D) -> bool:
	if not is_instance_valid(target_node) or not target_node.is_inside_tree(): return false
	if target_node.has_method("is_dead") and target_node.is_dead(): return false
	if target_node.has_method("get_current_health") and target_node.get_current_health() <= 0 : return false
	return true

func _check_leash_distance():
	if not is_returning_to_player and current_state != GolemState.ATTACKING and is_instance_valid(player_node):
		if global_position.distance_to(player_node.global_position) > LEASH_DISTANCE:
			is_returning_to_player = true; current_target = null; prioritized_target = null


func _on_attack_range_area_body_entered(body: Node2D):
	if body.is_in_group("enemies"):
		if not _enemies_in_attack_range.has(body): _enemies_in_attack_range.append(body)
		if body == current_target: _try_start_attack_timer()


func _on_attack_range_area_body_exited(body: Node2D):
	if body.is_in_group("enemies"):
		if _enemies_in_attack_range.has(body): _enemies_in_attack_range.erase(body)
		if body == current_target and is_instance_valid(attack_timer): 
			attack_timer.stop(); _update_state() 

func _try_start_attack_timer():
	if is_instance_valid(current_target) and _enemies_in_attack_range.has(current_target):
		if is_instance_valid(attack_timer) and attack_timer.is_stopped():
			attack_timer.start(); _perform_attack_action() 
		current_state = GolemState.ATTACKING
	elif current_state == GolemState.ATTACKING: 
		if is_instance_valid(attack_timer): attack_timer.stop()
		_update_state()


func _on_attack_timer_timeout():
	if is_instance_valid(current_target) and _enemies_in_attack_range.has(current_target) and _is_target_valid(current_target):
		_perform_attack_action()
	else: 
		if is_instance_valid(attack_timer): attack_timer.stop()
		_update_state() 


func _perform_attack_action():
	if not is_instance_valid(current_target): 
		if is_instance_valid(attack_timer): attack_timer.stop()
		_update_state(); return
	
	_play_animation("attack_stagger") 
	if current_target.has_method("take_damage"):
		current_target.take_damage(final_damage_amount)


func _play_animation(anim_name: String):
	if is_instance_valid(animated_sprite) and animated_sprite.sprite_frames:
		if animated_sprite.sprite_frames.has_animation(anim_name):
			if animated_sprite.animation != anim_name or not animated_sprite.is_playing():
				# For attack_stagger, we want it to play even if the current anim is idle/move
				if anim_name == "attack_stagger":
					_is_stagger_animation_playing = true
					animated_sprite.play(anim_name)
				elif not _is_stagger_animation_playing: # Don't interrupt stagger with move/idle
					animated_sprite.play(anim_name)


func _on_animated_sprite_animation_finished():
	# If the stagger animation finished, go back to idle or move
	if animated_sprite.animation == "attack_stagger":
		_is_stagger_animation_playing = false
		if velocity.length_squared() > 0.01:
			_play_animation("move")
		else:
			_play_animation("idle")


func on_player_damaged(attacker: Node2D): 
	if _is_target_valid(attacker):
		prioritized_target = attacker; current_target = attacker 
		is_returning_to_player = false; current_state = GolemState.SEEKING_ENEMY
 
==== H:\Game Creation\testing-environ\Scripts\Weapons\ShieldBashAttack.gd ==== 
extends Node2D

var final_damage_amount: int = 10
var final_applied_aoe_scale: Vector2 = Vector2(1.0, 1.0) 
var final_knockback_distance: float = 40.0
var facing_direction: Vector2 = Vector2.RIGHT 
var player_node_ref: PlayerCharacter 

@onready var animated_sprite: AnimatedSprite2D = get_node_or_null("AnimatedSprite") as AnimatedSprite2D
@onready var damage_area: Area2D = get_node_or_null("DamageArea") as Area2D
@onready var duration_timer: Timer = get_node_or_null("DurationTimer") as Timer

const BASH_ANIMATION_NAME = "bash" 
const BASE_ATTACK_DURATION: float = 0.4 
var actual_attack_duration: float = BASE_ATTACK_DURATION
var current_attack_speed_multiplier: float = 1.0 

var _enemies_hit_this_attack: Array[Node2D] = []
var _stats_have_been_set: bool = false 
var _received_stats: Dictionary = {} 

func _ready():
	if not is_instance_valid(animated_sprite): print("ERROR (ShieldBash): AnimatedSprite missing."); call_deferred("queue_free"); return
	if not is_instance_valid(damage_area): print("ERROR (ShieldBash): DamageArea missing."); call_deferred("queue_free"); return
	else:
		if not damage_area.is_connected("body_entered", Callable(self, "_on_damage_area_body_entered")):
			damage_area.body_entered.connect(self._on_damage_area_body_entered)
	if not is_instance_valid(duration_timer): print("ERROR (ShieldBash): DurationTimer missing!"); call_deferred("queue_free"); return
	else:
		duration_timer.process_mode = Node.PROCESS_MODE_ALWAYS
		duration_timer.one_shot = true
		if not duration_timer.is_connected("timeout", Callable(self, "queue_free")):
			duration_timer.timeout.connect(self.queue_free)
	
	if _stats_have_been_set: 
		_apply_visuals_and_timer_logic()

func set_attack_properties(p_direction: Vector2, p_player_ref: PlayerCharacter, p_attack_stats: Dictionary):
	_received_stats = p_attack_stats.duplicate(true) 
	_stats_have_been_set = true

	facing_direction = p_direction.normalized() if p_direction.length_squared() > 0 else Vector2.RIGHT
	player_node_ref = p_player_ref
	
	if is_inside_tree(): 
		_apply_visuals_and_timer_logic()

func _apply_visuals_and_timer_logic():
	if not _stats_have_been_set: return
	if not (is_instance_valid(animated_sprite) and is_instance_valid(damage_area) and is_instance_valid(duration_timer)):
		print("ERROR (ShieldBash): Critical nodes missing in _apply_visuals_and_timer_logic.")
		call_deferred("queue_free"); return

	var base_w_damage = _received_stats.get("damage", 10)
	var p_dmg_mult = _received_stats.get("damage_multiplier", 1.0)
	var p_flat_dmg = _received_stats.get("base_damage_bonus", 0.0)
	final_damage_amount = int(round(base_w_damage * p_dmg_mult + p_flat_dmg))
	
	var weapon_inherent_scl_val = _received_stats.get("inherent_visual_scale", Vector2(1.0, 1.0))
	var weapon_inherent_base_scale: Vector2
	if weapon_inherent_scl_val is Vector2: weapon_inherent_base_scale = weapon_inherent_scl_val
	elif weapon_inherent_scl_val is float: weapon_inherent_base_scale = Vector2(weapon_inherent_scl_val, weapon_inherent_scl_val)
	else: weapon_inherent_base_scale = Vector2(1.0, 1.0)
		
	var p_aoe_mult = _received_stats.get("aoe_area_multiplier", 1.0) 
	final_applied_aoe_scale.x = weapon_inherent_base_scale.x * p_aoe_mult
	final_applied_aoe_scale.y = weapon_inherent_base_scale.y * p_aoe_mult
	
	final_knockback_distance = _received_stats.get("knockback_distance", 40.0) 
	current_attack_speed_multiplier = _received_stats.get("attack_speed_multiplier", 1.0)

	if facing_direction != Vector2.ZERO: self.rotation = facing_direction.angle() - PI 
	
	_apply_visual_scale()

	if current_attack_speed_multiplier <= 0: current_attack_speed_multiplier = 0.01
	actual_attack_duration = BASE_ATTACK_DURATION / current_attack_speed_multiplier
	
	duration_timer.wait_time = actual_attack_duration
	if not duration_timer.is_stopped(): duration_timer.stop()
	duration_timer.start()

	animated_sprite.speed_scale = current_attack_speed_multiplier
	if animated_sprite.sprite_frames and animated_sprite.sprite_frames.has_animation(BASH_ANIMATION_NAME):
		animated_sprite.play(BASH_ANIMATION_NAME)

func _apply_visual_scale():
	if is_instance_valid(animated_sprite): animated_sprite.scale = final_applied_aoe_scale
	if is_instance_valid(damage_area): damage_area.scale = final_applied_aoe_scale 

func _on_damage_area_body_entered(body: Node2D):
	if _enemies_hit_this_attack.has(body): return
	if body.is_in_group("enemies"):
		if body.has_method("take_damage"): body.take_damage(final_damage_amount)
		if body.has_method("apply_knockback") and is_instance_valid(player_node_ref):
			var knockback_dir = (body.global_position - player_node_ref.global_position).normalized()
			if knockback_dir.length_squared() == 0: 
				knockback_dir = (body.global_position - self.global_position).normalized() 
				if knockback_dir.length_squared() == 0: knockback_dir = facing_direction 
			body.apply_knockback(knockback_dir, final_knockback_distance) 
		_enemies_hit_this_attack.append(body)
 
==== H:\Game Creation\testing-environ\Scripts\Weapons\spark_attack.gd ==== 
extends Area2D

var final_damage_amount: int = 14 
var final_speed: float = 250.0    
var final_applied_scale: Vector2 = Vector2(1,1)
var direction: Vector2 = Vector2.RIGHT 
var max_hits: int = 1; var hit_count: int = 0

@onready var spark_visual: AnimatedSprite2D = get_node_or_null("spark_animation") as AnimatedSprite2D
@onready var lifetime_timer: Timer = get_node_or_null("LifetimeTimer") as Timer
@onready var collision_shape: CollisionShape2D = get_node_or_null("CollisionShape2D") as CollisionShape2D

const FLY_ANIMATION_NAME = "spark_attack_frames" 
var _stats_have_been_set: bool = false
var _received_stats: Dictionary = {}

func _ready():
	if not is_instance_valid(spark_visual): print("WARNING (SparkAttack): spark_animation missing.")
	if not is_instance_valid(collision_shape): print("WARNING (SparkAttack): CollisionShape2D missing.")

	if not is_instance_valid(lifetime_timer): print("ERROR (SparkAttack): LifetimeTimer missing!"); call_deferred("queue_free"); return
	else:
		lifetime_timer.process_mode = Node.PROCESS_MODE_ALWAYS
		lifetime_timer.wait_time = 3.0; lifetime_timer.one_shot = true 
		if not lifetime_timer.is_connected("timeout", Callable(self, "queue_free")):
			lifetime_timer.timeout.connect(self.queue_free)
	
	if direction != Vector2.ZERO: rotation = direction.angle() # Adjust if sprite faces left
	
	if _stats_have_been_set: _apply_all_stats_effects()
	else: 
		_apply_visual_scale()
		if is_instance_valid(spark_visual) and spark_visual.sprite_frames and spark_visual.sprite_frames.has_animation(FLY_ANIMATION_NAME):
			spark_visual.play(FLY_ANIMATION_NAME)


func _physics_process(delta: float):
	global_position += direction * final_speed * delta

func set_owner_stats(stats: Dictionary):
	_received_stats = stats.duplicate(true)
	_stats_have_been_set = true
	if is_inside_tree(): _apply_all_stats_effects()

func _apply_all_stats_effects():
	if not _stats_have_been_set: return

	var base_w_damage = _received_stats.get("damage", 14) 
	var p_dmg_mult = _received_stats.get("damage_multiplier", 1.0)
	var p_flat_dmg = _received_stats.get("base_damage_bonus", 0.0)
	final_damage_amount = int(round(base_w_damage * p_dmg_mult + p_flat_dmg))
	
	var base_w_speed = _received_stats.get("speed", 250.0)
	var p_proj_spd_mult = _received_stats.get("projectile_speed_multiplier", 1.0)
	final_speed = base_w_speed * p_proj_spd_mult
	
	var weapon_inherent_scl_val = _received_stats.get("inherent_visual_scale", Vector2(1.0, 1.0))
	var weapon_inherent_base_scale: Vector2
	if weapon_inherent_scl_val is Vector2: weapon_inherent_base_scale = weapon_inherent_scl_val
	elif weapon_inherent_scl_val is float: weapon_inherent_base_scale = Vector2(weapon_inherent_scl_val, weapon_inherent_scl_val)
	else: weapon_inherent_base_scale = Vector2(1.0, 1.0)
	
	var p_proj_size_mult = _received_stats.get("projectile_size_multiplier", 1.0)
	final_applied_scale.x = weapon_inherent_base_scale.x * p_proj_size_mult
	final_applied_scale.y = weapon_inherent_base_scale.y * p_proj_size_mult
	
	_apply_visual_scale()
	
	if is_instance_valid(spark_visual): 
		if spark_visual.sprite_frames and spark_visual.sprite_frames.has_animation(FLY_ANIMATION_NAME):
			if not spark_visual.is_playing() or spark_visual.animation != FLY_ANIMATION_NAME:
				spark_visual.play(FLY_ANIMATION_NAME) 
	
	if is_instance_valid(lifetime_timer) and lifetime_timer.is_stopped(): lifetime_timer.start()


func _apply_visual_scale():
	if is_instance_valid(spark_visual): spark_visual.scale = final_applied_scale
	if is_instance_valid(collision_shape): collision_shape.scale = final_applied_scale


func _on_body_entered(body: Node2D): 
	if hit_count >= max_hits: return 
	if body.is_in_group("enemies") and body.has_method("take_damage"):
		body.take_damage(final_damage_amount); hit_count += 1
		if hit_count >= max_hits: call_deferred("queue_free") 
	elif body.is_in_group("world_obstacles"): call_deferred("queue_free") 

func set_direction(fired_direction: Vector2):
	direction = fired_direction.normalized() if fired_direction.length_squared() > 0 else Vector2.RIGHT
	if is_inside_tree() and direction != Vector2.ZERO: rotation = direction.angle() # Adjust if sprite faces left
 
==== H:\Game Creation\testing-environ\Scripts\Weapons\Projectiles\LesserSpiritProjectile.gd ==== 
# LesserSpiritProjectile.gd
# Attached to the root Area2D of LesserSpiritProjectile.tscn
class_name LesserSpiritProjectile
extends Area2D

var speed: float = 250.0
var damage: int = 8
var direction: Vector2 = Vector2.RIGHT
var final_applied_scale: Vector2 = Vector2(1.0, 1.0)

@onready var visual: AnimatedSprite2D = get_node_or_null("Visual") as AnimatedSprite2D # Or AnimatedSprite2D
@onready var collision_shape: CollisionShape2D = get_node_or_null("CollisionShape2D") as CollisionShape2D
@onready var lifetime_timer: Timer = get_node_or_null("LifetimeTimer") as Timer

func _ready():
	if not is_instance_valid(visual): print("ERROR (LesserSpiritProjectile): Visual node missing.")
	if not is_instance_valid(collision_shape): print("ERROR (LesserSpiritProjectile): CollisionShape2D node missing.")
	if not is_instance_valid(lifetime_timer):
		print("ERROR (LesserSpiritProjectile): LifetimeTimer node missing!"); call_deferred("queue_free"); return
	else:
		# Lifetime can also be affected by PlayerStats' effect_duration_multiplier if desired
		# For now, fixed lifetime.
		lifetime_timer.timeout.connect(queue_free) # Using built-in queue_free
		lifetime_timer.start()
	
	# Assume projectile sprite faces RIGHT by default
	# If it faces LEFT, use: rotation = direction.angle() - PI
	if direction != Vector2.ZERO:
		rotation = direction.angle()
	
	_apply_visual_scale()

func _physics_process(delta: float):
	global_position += direction * speed * delta

func setup(p_direction: Vector2, p_damage: int, p_speed: float, p_scale_vector: Vector2):
	direction = p_direction.normalized() if p_direction.length_squared() > 0 else Vector2.RIGHT
	damage = p_damage
	speed = p_speed
	final_applied_scale = p_scale_vector

	# Apply initial rotation and scale if node is ready, otherwise _ready will handle it
	if is_inside_tree():
		if direction != Vector2.ZERO: rotation = direction.angle()
		_apply_visual_scale()

func _apply_visual_scale():
	if is_instance_valid(visual): visual.scale = final_applied_scale
	if is_instance_valid(collision_shape): collision_shape.scale = final_applied_scale

func _on_body_entered(body: Node2D):
	if body.is_in_group("enemies") and body.has_method("take_damage"):
		body.take_damage(damage)
		queue_free() # Destroy projectile on hit
	elif body.is_in_group("world_obstacles"): # If you have obstacles
		queue_free()
 
